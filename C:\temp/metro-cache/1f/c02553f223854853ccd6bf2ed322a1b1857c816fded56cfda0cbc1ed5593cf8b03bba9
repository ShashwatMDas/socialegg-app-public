{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}},{"name":"./AnimatedWithChildren","data":{"isAsync":false}},{"name":"../NativeAnimatedHelper","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"../../../Color/normalizeColor","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/defineProperty\");\n\n  function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var AnimatedNode = _$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\");\n\n  var AnimatedWithChildren = _$$_REQUIRE(_dependencyMap[8], \"./AnimatedWithChildren\");\n\n  var NativeAnimatedHelper = _$$_REQUIRE(_dependencyMap[9], \"../NativeAnimatedHelper\");\n\n  var invariant = _$$_REQUIRE(_dependencyMap[10], \"invariant\");\n\n  var normalizeColor = _$$_REQUIRE(_dependencyMap[11], \"../../../Color/normalizeColor\");\n\n  var linear = function linear(t) {\n    return t;\n  };\n\n  function createInterpolation(config) {\n    if (config.outputRange && typeof config.outputRange[0] === 'string') {\n      return createInterpolationFromStringOutputRange(config);\n    }\n\n    var outputRange = config.outputRange;\n    checkInfiniteRange('outputRange', outputRange);\n    var inputRange = config.inputRange;\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n    var easing = config.easing || linear;\n    var extrapolateLeft = 'extend';\n\n    if (config.extrapolateLeft !== undefined) {\n      extrapolateLeft = config.extrapolateLeft;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateLeft = config.extrapolate;\n    }\n\n    var extrapolateRight = 'extend';\n\n    if (config.extrapolateRight !== undefined) {\n      extrapolateRight = config.extrapolateRight;\n    } else if (config.extrapolate !== undefined) {\n      extrapolateRight = config.extrapolate;\n    }\n\n    return function (input) {\n      invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n      var range = findRange(input, inputRange);\n      return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n    };\n  }\n\n  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n    var result = input;\n\n    if (result < inputMin) {\n      if (extrapolateLeft === 'identity') {\n        return result;\n      } else if (extrapolateLeft === 'clamp') {\n        result = inputMin;\n      } else if (extrapolateLeft === 'extend') {}\n    }\n\n    if (result > inputMax) {\n      if (extrapolateRight === 'identity') {\n        return result;\n      } else if (extrapolateRight === 'clamp') {\n        result = inputMax;\n      } else if (extrapolateRight === 'extend') {}\n    }\n\n    if (outputMin === outputMax) {\n      return outputMin;\n    }\n\n    if (inputMin === inputMax) {\n      if (input <= inputMin) {\n        return outputMin;\n      }\n\n      return outputMax;\n    }\n\n    if (inputMin === -Infinity) {\n      result = -result;\n    } else if (inputMax === Infinity) {\n      result = result - inputMin;\n    } else {\n      result = (result - inputMin) / (inputMax - inputMin);\n    }\n\n    result = easing(result);\n\n    if (outputMin === -Infinity) {\n      result = -result;\n    } else if (outputMax === Infinity) {\n      result = result + outputMin;\n    } else {\n      result = result * (outputMax - outputMin) + outputMin;\n    }\n\n    return result;\n  }\n\n  function colorToRgba(input) {\n    var int32Color = normalizeColor(input);\n\n    if (int32Color === null) {\n      return input;\n    }\n\n    int32Color = int32Color || 0;\n    var r = (int32Color & 0xff000000) >>> 24;\n    var g = (int32Color & 0x00ff0000) >>> 16;\n    var b = (int32Color & 0x0000ff00) >>> 8;\n    var a = (int32Color & 0x000000ff) / 255;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n  }\n\n  var stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n  function createInterpolationFromStringOutputRange(config) {\n    var outputRange = config.outputRange;\n    invariant(outputRange.length >= 2, 'Bad output range');\n    outputRange = outputRange.map(colorToRgba);\n    checkPattern(outputRange);\n    var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n      return [];\n    });\n    outputRange.forEach(function (value) {\n      value.match(stringShapeRegex).forEach(function (number, i) {\n        outputRanges[i].push(+number);\n      });\n    });\n    var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n      return createInterpolation(_objectSpread({}, config, {\n        outputRange: outputRanges[i]\n      }));\n    });\n    var shouldRound = isRgbOrRgba(outputRange[0]);\n    return function (input) {\n      var i = 0;\n      return outputRange[0].replace(stringShapeRegex, function () {\n        var val = +interpolations[i++](input);\n\n        if (shouldRound) {\n          val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n        }\n\n        return String(val);\n      });\n    };\n  }\n\n  function isRgbOrRgba(range) {\n    return typeof range === 'string' && range.startsWith('rgb');\n  }\n\n  function checkPattern(arr) {\n    var pattern = arr[0].replace(stringShapeRegex, '');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n    }\n  }\n\n  function findRange(input, inputRange) {\n    var i;\n\n    for (i = 1; i < inputRange.length - 1; ++i) {\n      if (inputRange[i] >= input) {\n        break;\n      }\n    }\n\n    return i - 1;\n  }\n\n  function checkValidInputRange(arr) {\n    invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n\n    for (var i = 1; i < arr.length; ++i) {\n      invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically non-decreasing ' + arr);\n    }\n  }\n\n  function checkInfiniteRange(name, arr) {\n    invariant(arr.length >= 2, name + ' must have at least 2 elements');\n    invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n  }\n\n  var AnimatedInterpolation = function (_AnimatedWithChildren) {\n    _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n\n    var _super = _createSuper(AnimatedInterpolation);\n\n    function AnimatedInterpolation(parent, config) {\n      var _this;\n\n      _classCallCheck(this, AnimatedInterpolation);\n\n      _this = _super.call(this);\n      _this._parent = parent;\n      _this._config = config;\n      _this._interpolation = createInterpolation(config);\n      return _this;\n    }\n\n    _createClass(AnimatedInterpolation, [{\n      key: \"__makeNative\",\n      value: function __makeNative() {\n        this._parent.__makeNative();\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this);\n      }\n    }, {\n      key: \"__getValue\",\n      value: function __getValue() {\n        var parentValue = this._parent.__getValue();\n\n        invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n        return this._interpolation(parentValue);\n      }\n    }, {\n      key: \"interpolate\",\n      value: function interpolate(config) {\n        return new AnimatedInterpolation(this, config);\n      }\n    }, {\n      key: \"__attach\",\n      value: function __attach() {\n        this._parent.__addChild(this);\n      }\n    }, {\n      key: \"__detach\",\n      value: function __detach() {\n        this._parent.__removeChild(this);\n\n        _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n      }\n    }, {\n      key: \"__transformDataType\",\n      value: function __transformDataType(range) {\n        return range.map(NativeAnimatedHelper.transformDataType);\n      }\n    }, {\n      key: \"__getNativeConfig\",\n      value: function __getNativeConfig() {\n        if (__DEV__) {\n          NativeAnimatedHelper.validateInterpolation(this._config);\n        }\n\n        return {\n          inputRange: this._config.inputRange,\n          outputRange: this.__transformDataType(this._config.outputRange),\n          extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n          extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n          type: 'interpolation'\n        };\n      }\n    }]);\n\n    return AnimatedInterpolation;\n  }(AnimatedWithChildren);\n\n  AnimatedInterpolation.__createInterpolation = createInterpolation;\n  module.exports = AnimatedInterpolation;\n});","lineCount":290,"map":[[2,0,11,0],[26,0,13,0],[26,6,13,6,"AnimatedNode"],[26,18,13,18],[26,21,13,21,"require"],[26,32,13,28],[26,69,13,0],[28,0,14,0],[28,6,14,6,"AnimatedWithChildren"],[28,26,14,26],[28,29,14,29,"require"],[28,40,14,36],[28,85,14,0],[30,0,15,0],[30,6,15,6,"NativeAnimatedHelper"],[30,26,15,26],[30,29,15,29,"require"],[30,40,15,36],[30,86,15,0],[32,0,17,0],[32,6,17,6,"invariant"],[32,15,17,15],[32,18,17,18,"require"],[32,29,17,25],[32,62,17,0],[34,0,18,0],[34,6,18,6,"normalizeColor"],[34,20,18,20],[34,23,18,23,"require"],[34,34,18,30],[34,87,18,0],[36,0,35,0],[36,6,35,6,"linear"],[36,12,35,12],[36,15,35,15],[36,24,35,6,"linear"],[36,30,35,15],[36,31,35,15,"t"],[36,32,35,16],[37,0,35,16],[37,11,35,20,"t"],[37,12,35,16],[38,0,35,16],[38,3,35,0],[40,0,41,0],[40,11,41,9,"createInterpolation"],[40,30,41,0],[40,31,42,2,"config"],[40,37,41,0],[40,39,43,38],[41,0,44,2],[41,8,44,6,"config"],[41,14,44,12],[41,15,44,13,"outputRange"],[41,26,44,6],[41,30,44,28],[41,37,44,35,"config"],[41,43,44,41],[41,44,44,42,"outputRange"],[41,55,44,35],[41,56,44,54],[41,57,44,35],[41,58,44,28],[41,63,44,61],[41,71,44,2],[41,73,44,71],[42,0,45,4],[42,13,45,11,"createInterpolationFromStringOutputRange"],[42,53,45,51],[42,54,45,52,"config"],[42,60,45,51],[42,61,45,4],[43,0,46,3],[45,0,48,2],[45,8,48,8,"outputRange"],[45,19,48,34],[45,22,48,38,"config"],[45,28,48,44],[45,29,48,45,"outputRange"],[45,40,48,2],[46,0,49,2,"checkInfiniteRange"],[46,4,49,2,"checkInfiniteRange"],[46,22,49,20],[46,23,49,21],[46,36,49,20],[46,38,49,36,"outputRange"],[46,49,49,20],[46,50,49,2],[47,0,51,2],[47,8,51,8,"inputRange"],[47,18,51,18],[47,21,51,21,"config"],[47,27,51,27],[47,28,51,28,"inputRange"],[47,38,51,2],[48,0,52,2,"checkInfiniteRange"],[48,4,52,2,"checkInfiniteRange"],[48,22,52,20],[48,23,52,21],[48,35,52,20],[48,37,52,35,"inputRange"],[48,47,52,20],[48,48,52,2],[49,0,53,2,"checkValidInputRange"],[49,4,53,2,"checkValidInputRange"],[49,24,53,22],[49,25,53,23,"inputRange"],[49,35,53,22],[49,36,53,2],[50,0,55,2,"invariant"],[50,4,55,2,"invariant"],[50,13,55,11],[50,14,56,4,"inputRange"],[50,24,56,14],[50,25,56,15,"length"],[50,31,56,4],[50,36,56,26,"outputRange"],[50,47,56,37],[50,48,56,38,"length"],[50,54,55,11],[50,56,57,4],[50,73,58,6,"inputRange"],[50,83,58,16],[50,84,58,17,"length"],[50,90,57,4],[50,93,59,6],[50,114,57,4],[50,117,60,6,"outputRange"],[50,128,60,17],[50,129,60,18,"length"],[50,135,57,4],[50,138,61,6],[50,167,55,11],[50,168,55,2],[51,0,64,2],[51,8,64,8,"easing"],[51,14,64,14],[51,17,64,17,"config"],[51,23,64,23],[51,24,64,24,"easing"],[51,30,64,17],[51,34,64,34,"linear"],[51,40,64,2],[52,0,66,2],[52,8,66,6,"extrapolateLeft"],[52,23,66,38],[52,26,66,41],[52,34,66,2],[54,0,67,2],[54,8,67,6,"config"],[54,14,67,12],[54,15,67,13,"extrapolateLeft"],[54,30,67,6],[54,35,67,33,"undefined"],[54,44,67,2],[54,46,67,44],[55,0,68,4,"extrapolateLeft"],[55,6,68,4,"extrapolateLeft"],[55,21,68,19],[55,24,68,22,"config"],[55,30,68,28],[55,31,68,29,"extrapolateLeft"],[55,46,68,4],[56,0,69,3],[56,5,67,2],[56,11,69,9],[56,15,69,13,"config"],[56,21,69,19],[56,22,69,20,"extrapolate"],[56,33,69,13],[56,38,69,36,"undefined"],[56,47,69,9],[56,49,69,47],[57,0,70,4,"extrapolateLeft"],[57,6,70,4,"extrapolateLeft"],[57,21,70,19],[57,24,70,22,"config"],[57,30,70,28],[57,31,70,29,"extrapolate"],[57,42,70,4],[58,0,71,3],[60,0,73,2],[60,8,73,6,"extrapolateRight"],[60,24,73,39],[60,27,73,42],[60,35,73,2],[62,0,74,2],[62,8,74,6,"config"],[62,14,74,12],[62,15,74,13,"extrapolateRight"],[62,31,74,6],[62,36,74,34,"undefined"],[62,45,74,2],[62,47,74,45],[63,0,75,4,"extrapolateRight"],[63,6,75,4,"extrapolateRight"],[63,22,75,20],[63,25,75,23,"config"],[63,31,75,29],[63,32,75,30,"extrapolateRight"],[63,48,75,4],[64,0,76,3],[64,5,74,2],[64,11,76,9],[64,15,76,13,"config"],[64,21,76,19],[64,22,76,20,"extrapolate"],[64,33,76,13],[64,38,76,36,"undefined"],[64,47,76,9],[64,49,76,47],[65,0,77,4,"extrapolateRight"],[65,6,77,4,"extrapolateRight"],[65,22,77,20],[65,25,77,23,"config"],[65,31,77,29],[65,32,77,30,"extrapolate"],[65,43,77,4],[66,0,78,3],[68,0,80,2],[68,11,80,9],[68,21,80,9,"input"],[68,26,80,14],[68,28,80,18],[69,0,81,4,"invariant"],[69,6,81,4,"invariant"],[69,15,81,13],[69,16,82,6],[69,23,82,13,"input"],[69,28,82,6],[69,33,82,23],[69,41,81,13],[69,43,83,6],[69,96,81,13],[69,97,81,4],[70,0,86,4],[70,10,86,10,"range"],[70,15,86,15],[70,18,86,18,"findRange"],[70,27,86,27],[70,28,86,28,"input"],[70,33,86,27],[70,35,86,35,"inputRange"],[70,45,86,27],[70,46,86,4],[71,0,87,4],[71,13,87,11,"interpolate"],[71,24,87,22],[71,25,88,6,"input"],[71,30,87,22],[71,32,89,6,"inputRange"],[71,42,89,16],[71,43,89,17,"range"],[71,48,89,16],[71,49,87,22],[71,51,90,6,"inputRange"],[71,61,90,16],[71,62,90,17,"range"],[71,67,90,22],[71,70,90,25],[71,71,90,16],[71,72,87,22],[71,74,91,6,"outputRange"],[71,85,91,17],[71,86,91,18,"range"],[71,91,91,17],[71,92,87,22],[71,94,92,6,"outputRange"],[71,105,92,17],[71,106,92,18,"range"],[71,111,92,23],[71,114,92,26],[71,115,92,17],[71,116,87,22],[71,118,93,6,"easing"],[71,124,87,22],[71,126,94,6,"extrapolateLeft"],[71,141,87,22],[71,143,95,6,"extrapolateRight"],[71,159,87,22],[71,160,87,4],[72,0,97,3],[72,5,80,2],[73,0,98,1],[75,0,100,0],[75,11,100,9,"interpolate"],[75,22,100,0],[75,23,101,2,"input"],[75,28,100,0],[75,30,102,2,"inputMin"],[75,38,100,0],[75,40,103,2,"inputMax"],[75,48,100,0],[75,50,104,2,"outputMin"],[75,59,100,0],[75,61,105,2,"outputMax"],[75,70,100,0],[75,72,106,2,"easing"],[75,78,100,0],[75,80,107,2,"extrapolateLeft"],[75,95,100,0],[75,97,108,2,"extrapolateRight"],[75,113,100,0],[75,115,109,2],[76,0,110,2],[76,8,110,6,"result"],[76,14,110,12],[76,17,110,15,"input"],[76,22,110,2],[78,0,113,2],[78,8,113,6,"result"],[78,14,113,12],[78,17,113,15,"inputMin"],[78,25,113,2],[78,27,113,25],[79,0,114,4],[79,10,114,8,"extrapolateLeft"],[79,25,114,23],[79,30,114,28],[79,40,114,4],[79,42,114,40],[80,0,115,6],[80,15,115,13,"result"],[80,21,115,6],[81,0,116,5],[81,7,114,4],[81,13,116,11],[81,17,116,15,"extrapolateLeft"],[81,32,116,30],[81,37,116,35],[81,44,116,11],[81,46,116,44],[82,0,117,6,"result"],[82,8,117,6,"result"],[82,14,117,12],[82,17,117,15,"inputMin"],[82,25,117,6],[83,0,118,5],[83,7,116,11],[83,13,118,11],[83,17,118,15,"extrapolateLeft"],[83,32,118,30],[83,37,118,35],[83,45,118,11],[83,47,118,45],[83,48,120,5],[84,0,121,3],[86,0,123,2],[86,8,123,6,"result"],[86,14,123,12],[86,17,123,15,"inputMax"],[86,25,123,2],[86,27,123,25],[87,0,124,4],[87,10,124,8,"extrapolateRight"],[87,26,124,24],[87,31,124,29],[87,41,124,4],[87,43,124,41],[88,0,125,6],[88,15,125,13,"result"],[88,21,125,6],[89,0,126,5],[89,7,124,4],[89,13,126,11],[89,17,126,15,"extrapolateRight"],[89,33,126,31],[89,38,126,36],[89,45,126,11],[89,47,126,45],[90,0,127,6,"result"],[90,8,127,6,"result"],[90,14,127,12],[90,17,127,15,"inputMax"],[90,25,127,6],[91,0,128,5],[91,7,126,11],[91,13,128,11],[91,17,128,15,"extrapolateRight"],[91,33,128,31],[91,38,128,36],[91,46,128,11],[91,48,128,46],[91,49,130,5],[92,0,131,3],[94,0,133,2],[94,8,133,6,"outputMin"],[94,17,133,15],[94,22,133,20,"outputMax"],[94,31,133,2],[94,33,133,31],[95,0,134,4],[95,13,134,11,"outputMin"],[95,22,134,4],[96,0,135,3],[98,0,137,2],[98,8,137,6,"inputMin"],[98,16,137,14],[98,21,137,19,"inputMax"],[98,29,137,2],[98,31,137,29],[99,0,138,4],[99,10,138,8,"input"],[99,15,138,13],[99,19,138,17,"inputMin"],[99,27,138,4],[99,29,138,27],[100,0,139,6],[100,15,139,13,"outputMin"],[100,24,139,6],[101,0,140,5],[103,0,141,4],[103,13,141,11,"outputMax"],[103,22,141,4],[104,0,142,3],[106,0,145,2],[106,8,145,6,"inputMin"],[106,16,145,14],[106,21,145,19],[106,22,145,20,"Infinity"],[106,30,145,2],[106,32,145,30],[107,0,146,4,"result"],[107,6,146,4,"result"],[107,12,146,10],[107,15,146,13],[107,16,146,14,"result"],[107,22,146,4],[108,0,147,3],[108,5,145,2],[108,11,147,9],[108,15,147,13,"inputMax"],[108,23,147,21],[108,28,147,26,"Infinity"],[108,36,147,9],[108,38,147,36],[109,0,148,4,"result"],[109,6,148,4,"result"],[109,12,148,10],[109,15,148,13,"result"],[109,21,148,19],[109,24,148,22,"inputMin"],[109,32,148,4],[110,0,149,3],[110,5,147,9],[110,11,149,9],[111,0,150,4,"result"],[111,6,150,4,"result"],[111,12,150,10],[111,15,150,13],[111,16,150,14,"result"],[111,22,150,20],[111,25,150,23,"inputMin"],[111,33,150,13],[111,38,150,36,"inputMax"],[111,46,150,44],[111,49,150,47,"inputMin"],[111,57,150,13],[111,58,150,4],[112,0,151,3],[114,0,154,2,"result"],[114,4,154,2,"result"],[114,10,154,8],[114,13,154,11,"easing"],[114,19,154,17],[114,20,154,18,"result"],[114,26,154,17],[114,27,154,2],[116,0,157,2],[116,8,157,6,"outputMin"],[116,17,157,15],[116,22,157,20],[116,23,157,21,"Infinity"],[116,31,157,2],[116,33,157,31],[117,0,158,4,"result"],[117,6,158,4,"result"],[117,12,158,10],[117,15,158,13],[117,16,158,14,"result"],[117,22,158,4],[118,0,159,3],[118,5,157,2],[118,11,159,9],[118,15,159,13,"outputMax"],[118,24,159,22],[118,29,159,27,"Infinity"],[118,37,159,9],[118,39,159,37],[119,0,160,4,"result"],[119,6,160,4,"result"],[119,12,160,10],[119,15,160,13,"result"],[119,21,160,19],[119,24,160,22,"outputMin"],[119,33,160,4],[120,0,161,3],[120,5,159,9],[120,11,161,9],[121,0,162,4,"result"],[121,6,162,4,"result"],[121,12,162,10],[121,15,162,13,"result"],[121,21,162,19],[121,25,162,23,"outputMax"],[121,34,162,32],[121,37,162,35,"outputMin"],[121,46,162,19],[121,47,162,13],[121,50,162,48,"outputMin"],[121,59,162,4],[122,0,163,3],[124,0,165,2],[124,11,165,9,"result"],[124,17,165,2],[125,0,166,1],[127,0,168,0],[127,11,168,9,"colorToRgba"],[127,22,168,0],[127,23,168,21,"input"],[127,28,168,0],[127,30,168,44],[128,0,169,2],[128,8,169,6,"int32Color"],[128,18,169,16],[128,21,169,19,"normalizeColor"],[128,35,169,33],[128,36,169,34,"input"],[128,41,169,33],[128,42,169,2],[130,0,170,2],[130,8,170,6,"int32Color"],[130,18,170,16],[130,23,170,21],[130,27,170,2],[130,29,170,27],[131,0,171,4],[131,13,171,11,"input"],[131,18,171,4],[132,0,172,3],[134,0,174,2,"int32Color"],[134,4,174,2,"int32Color"],[134,14,174,12],[134,17,174,15,"int32Color"],[134,27,174,25],[134,31,174,29],[134,32,174,2],[135,0,176,2],[135,8,176,8,"r"],[135,9,176,9],[135,12,176,12],[135,13,176,13,"int32Color"],[135,23,176,23],[135,26,176,26],[135,36,176,12],[135,42,176,42],[135,44,176,2],[136,0,177,2],[136,8,177,8,"g"],[136,9,177,9],[136,12,177,12],[136,13,177,13,"int32Color"],[136,23,177,23],[136,26,177,26],[136,36,177,12],[136,42,177,42],[136,44,177,2],[137,0,178,2],[137,8,178,8,"b"],[137,9,178,9],[137,12,178,12],[137,13,178,13,"int32Color"],[137,23,178,23],[137,26,178,26],[137,36,178,12],[137,42,178,42],[137,43,178,2],[138,0,179,2],[138,8,179,8,"a"],[138,9,179,9],[138,12,179,12],[138,13,179,13,"int32Color"],[138,23,179,23],[138,26,179,26],[138,36,179,12],[138,40,179,40],[138,43,179,2],[139,0,181,2],[139,21,181,17,"r"],[139,22,181,2],[139,32,181,23,"g"],[139,33,181,2],[139,43,181,29,"b"],[139,44,181,2],[139,54,181,35,"a"],[139,55,181,2],[140,0,182,1],[142,0,184,0],[142,6,184,6,"stringShapeRegex"],[142,22,184,22],[142,25,184,25],[142,69,184,0],[144,0,194,0],[144,11,194,9,"createInterpolationFromStringOutputRange"],[144,51,194,0],[144,52,195,2,"config"],[144,58,194,0],[144,60,196,29],[145,0,197,2],[145,8,197,6,"outputRange"],[145,19,197,32],[145,22,197,36,"config"],[145,28,197,42],[145,29,197,43,"outputRange"],[145,40,197,2],[146,0,198,2,"invariant"],[146,4,198,2,"invariant"],[146,13,198,11],[146,14,198,12,"outputRange"],[146,25,198,23],[146,26,198,24,"length"],[146,32,198,12],[146,36,198,34],[146,37,198,11],[146,39,198,37],[146,57,198,11],[146,58,198,2],[147,0,199,2,"outputRange"],[147,4,199,2,"outputRange"],[147,15,199,13],[147,18,199,16,"outputRange"],[147,29,199,27],[147,30,199,28,"map"],[147,33,199,16],[147,34,199,32,"colorToRgba"],[147,45,199,16],[147,46,199,2],[148,0,200,2,"checkPattern"],[148,4,200,2,"checkPattern"],[148,16,200,14],[148,17,200,15,"outputRange"],[148,28,200,14],[148,29,200,2],[149,0,213,2],[149,8,213,8,"outputRanges"],[149,20,213,20],[149,23,213,23,"outputRange"],[149,34,213,34],[149,35,213,35],[149,36,213,34],[149,37,213,23],[149,38,213,38,"match"],[149,43,213,23],[149,44,213,44,"stringShapeRegex"],[149,60,213,23],[149,62,213,62,"map"],[149,65,213,23],[149,66,213,66],[150,0,213,66],[150,13,213,72],[150,15,213,66],[151,0,213,66],[151,5,213,23],[151,6,213,2],[152,0,214,2,"outputRange"],[152,4,214,2,"outputRange"],[152,15,214,13],[152,16,214,14,"forEach"],[152,23,214,2],[152,24,214,22],[152,34,214,22,"value"],[152,39,214,27],[152,41,214,31],[153,0,218,4,"value"],[153,6,218,4,"value"],[153,11,218,9],[153,12,218,10,"match"],[153,17,218,4],[153,18,218,16,"stringShapeRegex"],[153,34,218,4],[153,36,218,34,"forEach"],[153,43,218,4],[153,44,218,42],[153,54,218,43,"number"],[153,60,218,42],[153,62,218,51,"i"],[153,63,218,42],[153,65,218,57],[154,0,219,6,"outputRanges"],[154,8,219,6,"outputRanges"],[154,20,219,18],[154,21,219,19,"i"],[154,22,219,18],[154,23,219,6],[154,24,219,22,"push"],[154,28,219,6],[154,29,219,27],[154,30,219,28,"number"],[154,36,219,6],[155,0,220,5],[155,7,218,4],[156,0,221,3],[156,5,214,2],[157,0,226,2],[157,8,226,8,"interpolations"],[157,22,226,22],[157,25,226,25,"outputRange"],[157,36,226,36],[157,37,226,37],[157,38,226,36],[157,39,226,25],[157,40,227,5,"match"],[157,45,226,25],[157,46,227,11,"stringShapeRegex"],[157,62,226,25],[157,64,228,5,"map"],[157,67,226,25],[157,68,228,9],[157,78,228,10,"value"],[157,83,228,9],[157,85,228,17,"i"],[157,86,228,9],[157,88,228,23],[158,0,229,6],[158,13,229,13,"createInterpolation"],[158,32,229,32],[158,51,230,11,"config"],[158,57,229,32],[159,0,231,8,"outputRange"],[159,8,231,8,"outputRange"],[159,19,231,19],[159,21,231,21,"outputRanges"],[159,33,231,33],[159,34,231,34,"i"],[159,35,231,33],[160,0,229,32],[160,9,229,6],[161,0,233,5],[161,5,226,25],[161,6,226,2],[162,0,237,2],[162,8,237,8,"shouldRound"],[162,19,237,19],[162,22,237,22,"isRgbOrRgba"],[162,33,237,33],[162,34,237,34,"outputRange"],[162,45,237,45],[162,46,237,46],[162,47,237,45],[162,48,237,33],[162,49,237,2],[163,0,239,2],[163,11,239,9],[163,21,239,9,"input"],[163,26,239,14],[163,28,239,18],[164,0,240,4],[164,10,240,8,"i"],[164,11,240,9],[164,14,240,12],[164,15,240,4],[165,0,244,4],[165,13,244,11,"outputRange"],[165,24,244,22],[165,25,244,23],[165,26,244,22],[165,27,244,11],[165,28,244,26,"replace"],[165,35,244,11],[165,36,244,34,"stringShapeRegex"],[165,52,244,11],[165,54,244,52],[165,66,244,58],[166,0,245,6],[166,12,245,10,"val"],[166,15,245,13],[166,18,245,16],[166,19,245,17,"interpolations"],[166,33,245,31],[166,34,245,32,"i"],[166,35,245,33],[166,37,245,31],[166,38,245,17],[166,39,245,37,"input"],[166,44,245,17],[166,45,245,6],[168,0,246,6],[168,12,246,10,"shouldRound"],[168,23,246,6],[168,25,246,23],[169,0,247,8,"val"],[169,10,247,8,"val"],[169,13,247,11],[169,16,247,14,"i"],[169,17,247,15],[169,20,247,18],[169,21,247,14],[169,24,247,22,"Math"],[169,28,247,26],[169,29,247,27,"round"],[169,34,247,22],[169,35,247,33,"val"],[169,38,247,22],[169,39,247,14],[169,42,247,40,"Math"],[169,46,247,44],[169,47,247,45,"round"],[169,52,247,40],[169,53,247,51,"val"],[169,56,247,54],[169,59,247,57],[169,63,247,40],[169,67,247,65],[169,71,247,8],[170,0,248,7],[172,0,249,6],[172,15,249,13,"String"],[172,21,249,19],[172,22,249,20,"val"],[172,25,249,19],[172,26,249,6],[173,0,250,5],[173,7,244,11],[173,8,244,4],[174,0,251,3],[174,5,239,2],[175,0,252,1],[177,0,254,0],[177,11,254,9,"isRgbOrRgba"],[177,22,254,0],[177,23,254,21,"range"],[177,28,254,0],[177,30,254,28],[178,0,255,2],[178,11,255,9],[178,18,255,16,"range"],[178,23,255,9],[178,28,255,26],[178,36,255,9],[178,40,255,38,"range"],[178,45,255,43],[178,46,255,44,"startsWith"],[178,56,255,38],[178,57,255,55],[178,62,255,38],[178,63,255,2],[179,0,256,1],[181,0,258,0],[181,11,258,9,"checkPattern"],[181,23,258,0],[181,24,258,22,"arr"],[181,27,258,0],[181,29,258,42],[182,0,259,2],[182,8,259,8,"pattern"],[182,15,259,15],[182,18,259,18,"arr"],[182,21,259,21],[182,22,259,22],[182,23,259,21],[182,24,259,18],[182,25,259,25,"replace"],[182,32,259,18],[182,33,259,33,"stringShapeRegex"],[182,49,259,18],[182,51,259,51],[182,53,259,18],[182,54,259,2],[184,0,260,2],[184,9,260,7],[184,13,260,11,"i"],[184,14,260,12],[184,17,260,15],[184,18,260,2],[184,20,260,18,"i"],[184,21,260,19],[184,24,260,22,"arr"],[184,27,260,25],[184,28,260,26,"length"],[184,34,260,2],[184,36,260,34],[184,38,260,36,"i"],[184,39,260,2],[184,41,260,39],[185,0,261,4,"invariant"],[185,6,261,4,"invariant"],[185,15,261,13],[185,16,262,6,"pattern"],[185,23,262,13],[185,28,262,18,"arr"],[185,31,262,21],[185,32,262,22,"i"],[185,33,262,21],[185,34,262,18],[185,35,262,25,"replace"],[185,42,262,18],[185,43,262,33,"stringShapeRegex"],[185,59,262,18],[185,61,262,51],[185,63,262,18],[185,64,261,13],[185,66,263,6],[185,87,263,27,"arr"],[185,90,263,30],[185,91,263,31],[185,92,263,30],[185,93,263,6],[185,96,263,36],[185,103,263,6],[185,106,263,46,"arr"],[185,109,263,49],[185,110,263,50,"i"],[185,111,263,49],[185,112,261,13],[185,113,261,4],[186,0,265,3],[187,0,266,1],[189,0,268,0],[189,11,268,9,"findRange"],[189,20,268,0],[189,21,268,19,"input"],[189,26,268,0],[189,28,268,34,"inputRange"],[189,38,268,0],[189,40,268,61],[190,0,269,2],[190,8,269,6,"i"],[190,9,269,2],[192,0,270,2],[192,9,270,7,"i"],[192,10,270,8],[192,13,270,11],[192,14,270,2],[192,16,270,14,"i"],[192,17,270,15],[192,20,270,18,"inputRange"],[192,30,270,28],[192,31,270,29,"length"],[192,37,270,18],[192,40,270,38],[192,41,270,2],[192,43,270,41],[192,45,270,43,"i"],[192,46,270,2],[192,48,270,46],[193,0,271,4],[193,10,271,8,"inputRange"],[193,20,271,18],[193,21,271,19,"i"],[193,22,271,18],[193,23,271,8],[193,27,271,25,"input"],[193,32,271,4],[193,34,271,32],[194,0,272,6],[195,0,273,5],[196,0,274,3],[198,0,275,2],[198,11,275,9,"i"],[198,12,275,10],[198,15,275,13],[198,16,275,2],[199,0,276,1],[201,0,278,0],[201,11,278,9,"checkValidInputRange"],[201,31,278,0],[201,32,278,30,"arr"],[201,35,278,0],[201,37,278,50],[202,0,279,2,"invariant"],[202,4,279,2,"invariant"],[202,13,279,11],[202,14,279,12,"arr"],[202,17,279,15],[202,18,279,16,"length"],[202,24,279,12],[202,28,279,26],[202,29,279,11],[202,31,279,29],[202,73,279,11],[202,74,279,2],[204,0,280,2],[204,9,280,7],[204,13,280,11,"i"],[204,14,280,12],[204,17,280,15],[204,18,280,2],[204,20,280,18,"i"],[204,21,280,19],[204,24,280,22,"arr"],[204,27,280,25],[204,28,280,26,"length"],[204,34,280,2],[204,36,280,34],[204,38,280,36,"i"],[204,39,280,2],[204,41,280,39],[205,0,281,4,"invariant"],[205,6,281,4,"invariant"],[205,15,281,13],[205,16,282,6,"arr"],[205,19,282,9],[205,20,282,10,"i"],[205,21,282,9],[205,22,282,6],[205,26,282,16,"arr"],[205,29,282,19],[205,30,282,20,"i"],[205,31,282,21],[205,34,282,24],[205,35,282,19],[205,36,281,13],[205,38,289,6],[205,91,289,59,"arr"],[205,94,281,13],[205,95,281,4],[206,0,291,3],[207,0,292,1],[209,0,294,0],[209,11,294,9,"checkInfiniteRange"],[209,29,294,0],[209,30,294,28,"name"],[209,34,294,0],[209,36,294,42,"arr"],[209,39,294,0],[209,41,294,62],[210,0,295,2,"invariant"],[210,4,295,2,"invariant"],[210,13,295,11],[210,14,295,12,"arr"],[210,17,295,15],[210,18,295,16,"length"],[210,24,295,12],[210,28,295,26],[210,29,295,11],[210,31,295,29,"name"],[210,35,295,33],[210,38,295,36],[210,70,295,11],[210,71,295,2],[211,0,296,2,"invariant"],[211,4,296,2,"invariant"],[211,13,296,11],[211,14,297,4,"arr"],[211,17,297,7],[211,18,297,8,"length"],[211,24,297,4],[211,29,297,19],[211,30,297,4],[211,34,297,24,"arr"],[211,37,297,27],[211,38,297,28],[211,39,297,27],[211,40,297,24],[211,45,297,35],[211,46,297,36,"Infinity"],[211,54,297,4],[211,58,297,48,"arr"],[211,61,297,51],[211,62,297,52],[211,63,297,51],[211,64,297,48],[211,69,297,59,"Infinity"],[211,77,296,11],[211,79,304,4,"name"],[211,83,304,8],[211,86,304,11],[211,120,304,4],[211,123,304,48,"arr"],[211,126,296,11],[211,127,296,2],[212,0,306,1],[214,6,308,6,"AnimatedInterpolation"],[214,27],[219,0,318,2],[219,35,318,14,"parent"],[219,41,318,2],[219,43,318,36,"config"],[219,49,318,2],[219,51,318,69],[220,0,318,69],[222,0,318,69],[224,0,319,4],[225,0,320,4],[225,12,320,9,"_parent"],[225,19,320,4],[225,22,320,19,"parent"],[225,28,320,4],[226,0,321,4],[226,12,321,9,"_config"],[226,19,321,4],[226,22,321,19,"config"],[226,28,321,4],[227,0,322,4],[227,12,322,9,"_interpolation"],[227,26,322,4],[227,29,322,26,"createInterpolation"],[227,48,322,45],[227,49,322,46,"config"],[227,55,322,45],[227,56,322,4],[228,0,318,69],[229,0,323,3],[233,37,325,17],[234,0,326,4],[234,13,326,9,"_parent"],[234,20,326,4],[234,21,326,17,"__makeNative"],[234,33,326,4],[236,0,327,4],[237,0,328,3],[240,35,330,32],[241,0,331,4],[241,12,331,10,"parentValue"],[241,23,331,29],[241,26,331,32],[241,31,331,37,"_parent"],[241,38,331,32],[241,39,331,45,"__getValue"],[241,49,331,32],[241,51,331,4],[243,0,332,4,"invariant"],[243,8,332,4,"invariant"],[243,17,332,13],[243,18,333,6],[243,25,333,13,"parentValue"],[243,36,333,6],[243,41,333,29],[243,49,332,13],[243,51,334,6],[243,103,332,13],[243,104,332,4],[244,0,336,4],[244,15,336,11],[244,20,336,16,"_interpolation"],[244,34,336,11],[244,35,336,31,"parentValue"],[244,46,336,11],[244,47,336,4],[245,0,337,3],[248,34,339,14,"config"],[248,40],[248,42,339,70],[249,0,340,4],[249,15,340,11],[249,19,340,15,"AnimatedInterpolation"],[249,40,340,11],[249,41,340,37],[249,45,340,11],[249,47,340,43,"config"],[249,53,340,11],[249,54,340,4],[250,0,341,3],[253,33,343,19],[254,0,344,4],[254,13,344,9,"_parent"],[254,20,344,4],[254,21,344,17,"__addChild"],[254,31,344,4],[254,32,344,28],[254,36,344,4],[255,0,345,3],[258,33,347,19],[259,0,348,4],[259,13,348,9,"_parent"],[259,20,348,4],[259,21,348,17,"__removeChild"],[259,34,348,4],[259,35,348,31],[259,39,348,4],[261,0,349,4],[262,0,350,3],[265,42,352,22,"range"],[265,47],[265,49,352,53],[266,0,353,4],[266,15,353,11,"range"],[266,20,353,16],[266,21,353,17,"map"],[266,24,353,11],[266,25,353,21,"NativeAnimatedHelper"],[266,45,353,41],[266,46,353,42,"transformDataType"],[266,63,353,11],[266,64,353,4],[267,0,354,3],[270,42,356,27],[271,0,357,4],[271,12,357,8,"__DEV__"],[271,19,357,4],[271,21,357,17],[272,0,358,6,"NativeAnimatedHelper"],[272,10,358,6,"NativeAnimatedHelper"],[272,30,358,26],[272,31,358,27,"validateInterpolation"],[272,52,358,6],[272,53,358,49],[272,58,358,54,"_config"],[272,65,358,6],[273,0,359,5],[275,0,361,4],[275,15,361,11],[276,0,362,6,"inputRange"],[276,10,362,6,"inputRange"],[276,20,362,16],[276,22,362,18],[276,27,362,23,"_config"],[276,34,362,18],[276,35,362,31,"inputRange"],[276,45,361,11],[277,0,364,6,"outputRange"],[277,10,364,6,"outputRange"],[277,21,364,17],[277,23,364,19],[277,28,364,24,"__transformDataType"],[277,47,364,19],[277,48,364,44],[277,53,364,49,"_config"],[277,60,364,44],[277,61,364,57,"outputRange"],[277,72,364,19],[277,73,361,11],[278,0,365,6,"extrapolateLeft"],[278,10,365,6,"extrapolateLeft"],[278,25,365,21],[278,27,366,8],[278,32,366,13,"_config"],[278,39,366,8],[278,40,366,21,"extrapolateLeft"],[278,55,366,8],[278,59,366,40],[278,64,366,45,"_config"],[278,71,366,40],[278,72,366,53,"extrapolate"],[278,83,366,8],[278,87,366,68],[278,95,361,11],[279,0,367,6,"extrapolateRight"],[279,10,367,6,"extrapolateRight"],[279,26,367,22],[279,28,368,8],[279,33,368,13,"_config"],[279,40,368,8],[279,41,368,21,"extrapolateRight"],[279,57,368,8],[279,61,368,41],[279,66,368,46,"_config"],[279,73,368,41],[279,74,368,54,"extrapolate"],[279,85,368,8],[279,89,368,69],[279,97,361,11],[280,0,369,6,"type"],[280,10,369,6,"type"],[280,14,369,10],[280,16,369,12],[281,0,361,11],[281,9,361,4],[282,0,371,3],[286,4,308,36,"AnimatedWithChildren"],[286,24],[288,0,308,6,"AnimatedInterpolation"],[288,2,308,6,"AnimatedInterpolation"],[288,23],[288,24,310,9,"__createInterpolation"],[288,45],[288,48,312,44,"createInterpolation"],[288,67],[289,0,374,0,"module"],[289,2,374,0,"module"],[289,8,374,6],[289,9,374,7,"exports"],[289,16,374,0],[289,19,374,17,"AnimatedInterpolation"],[289,40,374,0]],"functionMap":{"names":["<global>","linear","createInterpolation","<anonymous>","interpolate","colorToRgba","createInterpolationFromStringOutputRange","outputRange._.match.map$argument_0","outputRange.forEach$argument_0","value.match.forEach$argument_0","outputRange._.replace$argument_1","isRgbOrRgba","checkPattern","findRange","checkValidInputRange","checkInfiniteRange","AnimatedInterpolation","constructor","__makeNative","__getValue","__attach","__detach","__transformDataType","__getNativeConfig"],"mappings":"AAA;eCkC,MD;AEM;SCuC;GDiB;CFC;AIE;CJkE;AKE;CLc;AMY;kECmB,QD;sBEC;0CCI;KDE;GFC;SCO;KDK;SHM;oDOK;KPM;GGC;CNC;AWE;CXE;AYE;CZQ;AaE;CbQ;AcE;Cdc;AeE;CfY;AgBE;ECU;GDK;EEE;GFG;EGE;GHO;EZE;GYE;EIE;GJE;EKE;GLG;EME;GNE;EOE;GPe;ChBC"}},"type":"js/module"}]}