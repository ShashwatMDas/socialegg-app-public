{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"../AV","data":{"isAsync":false}},{"name":"../ExponentAV","data":{"isAsync":false}},{"name":"./AudioAvailability","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Sound = void 0;\n\n  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/extends\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/regenerator\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/createClass\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[7], \"@unimodules/core\");\n\n  var _AV = _$$_REQUIRE(_dependencyMap[8], \"../AV\");\n\n  var _ExponentAV = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"../ExponentAV\"));\n\n  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[10], \"./AudioAvailability\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var Sound = function () {\n    function Sound() {\n      var _this = this;\n\n      (0, _classCallCheck2.default)(this, Sound);\n      this._loaded = false;\n      this._loading = false;\n      this._key = null;\n      this._lastStatusUpdate = null;\n      this._lastStatusUpdateTime = null;\n      this._subscriptions = [];\n      this._eventEmitter = new _core.EventEmitter(_ExponentAV.default);\n      this._coalesceStatusUpdatesInMillis = 100;\n      this._onPlaybackStatusUpdate = null;\n\n      this._internalStatusUpdateCallback = function (_ref) {\n        var key = _ref.key,\n            status = _ref.status;\n\n        if (_this._key === key) {\n          _this._callOnPlaybackStatusUpdateForNewStatus(status);\n        }\n      };\n\n      this._internalErrorCallback = function (_ref2) {\n        var key = _ref2.key,\n            error = _ref2.error;\n\n        if (_this._key === key) {\n          _this._errorCallback(error);\n        }\n      };\n\n      this._errorCallback = function (error) {\n        _this._clearSubscriptions();\n\n        _this._loaded = false;\n        _this._key = null;\n\n        _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV.getUnloadedStatus)(error));\n      };\n\n      this.getStatusAsync = function _callee() {\n        var status;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this._loaded) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.getStatusForSound(_this._key);\n                }));\n\n              case 2:\n                status = (0, _AV.getUnloadedStatus)();\n\n                _this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                return _context.abrupt(\"return\", status);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n    }\n\n    (0, _createClass2.default)(Sound, [{\n      key: \"_callOnPlaybackStatusUpdateForNewStatus\",\n      value: function _callOnPlaybackStatusUpdateForNewStatus(status) {\n        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n          this._onPlaybackStatusUpdate(status);\n\n          this._lastStatusUpdateTime = new Date();\n          this._lastStatusUpdate = JSON.stringify(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function _performOperationAndHandleStatusAsync(operation) {\n        var status;\n        return _regenerator.default.async(function _performOperationAndHandleStatusAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!this._loaded) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 4;\n                return _regenerator.default.awrap(operation());\n\n              case 4:\n                status = _context2.sent;\n\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                return _context2.abrupt(\"return\", status);\n\n              case 9:\n                throw new Error('Cannot complete operation because sound is not loaded.');\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"_subscribeToNativeEvents\",\n      value: function _subscribeToNativeEvents() {\n        if (this._loaded) {\n          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n\n          this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n        }\n      }\n    }, {\n      key: \"_clearSubscriptions\",\n      value: function _clearSubscriptions() {\n        this._subscriptions.forEach(function (e) {\n          return e.remove();\n        });\n\n        this._subscriptions = [];\n      }\n    }, {\n      key: \"setOnPlaybackStatusUpdate\",\n      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n        this.getStatusAsync();\n      }\n    }, {\n      key: \"loadAsync\",\n      value: function loadAsync(source) {\n        var _this2 = this;\n\n        var initialStatus,\n            downloadFirst,\n            _await$getNativeSourc,\n            nativeSource,\n            fullInitialStatus,\n            _args3 = arguments;\n\n        return _regenerator.default.async(function loadAsync$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                initialStatus = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                downloadFirst = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!this._loading) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('The Sound is already loading.');\n\n              case 5:\n                if (this._loaded) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                this._loading = true;\n                _context3.next = 9;\n                return _regenerator.default.awrap((0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));\n\n              case 9:\n                _await$getNativeSourc = _context3.sent;\n                nativeSource = _await$getNativeSourc.nativeSource;\n                fullInitialStatus = _await$getNativeSourc.fullInitialStatus;\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var loadSuccess = function loadSuccess(result) {\n                    var _result = (0, _slicedToArray2.default)(result, 2),\n                        key = _result[0],\n                        status = _result[1];\n\n                    _this2._key = key;\n                    _this2._loaded = true;\n                    _this2._loading = false;\n\n                    _this2._subscribeToNativeEvents();\n\n                    _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                    resolve(status);\n                  };\n\n                  var loadError = function loadError(error) {\n                    _this2._loading = false;\n                    reject(error);\n                  };\n\n                  _ExponentAV.default.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n                }));\n\n              case 15:\n                throw new Error('The Sound is already loaded.');\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"unloadAsync\",\n      value: function unloadAsync() {\n        var key, status;\n        return _regenerator.default.async(function unloadAsync$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._loaded) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                this._loaded = false;\n                key = this._key;\n                this._key = null;\n                _context4.next = 6;\n                return _regenerator.default.awrap(_ExponentAV.default.unloadForSound(key));\n\n              case 6:\n                status = _context4.sent;\n\n                this._callOnPlaybackStatusUpdateForNewStatus(status);\n\n                this._clearSubscriptions();\n\n                return _context4.abrupt(\"return\", status);\n\n              case 12:\n                return _context4.abrupt(\"return\", this.getStatusAsync());\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"setStatusAsync\",\n      value: function setStatusAsync(status) {\n        var _this3 = this;\n\n        return _regenerator.default.async(function setStatusAsync$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                (0, _AV.assertStatusValuesInBounds)(status);\n                return _context5.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.setStatusForSound(_this3._key, status);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"replayAsync\",\n      value: function replayAsync() {\n        var _this4 = this;\n\n        var status,\n            _args6 = arguments;\n        return _regenerator.default.async(function replayAsync$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                status = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n\n                if (!(status.positionMillis && status.positionMillis !== 0)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('Requested position after replay has to be 0.');\n\n              case 3:\n                return _context6.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.replaySound(_this4._key, _objectSpread({}, status, {\n                    positionMillis: 0,\n                    shouldPlay: true\n                  }));\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }]);\n    return Sound;\n  }();\n\n  exports.Sound = Sound;\n\n  Sound.create = function _callee2(source) {\n    var initialStatus,\n        onPlaybackStatusUpdate,\n        downloadFirst,\n        _args7 = arguments;\n    return _regenerator.default.async(function _callee2$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            initialStatus = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n            onPlaybackStatusUpdate = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : null;\n            downloadFirst = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : true;\n            console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n            return _context7.abrupt(\"return\", Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  Sound.createAsync = function _callee3(source) {\n    var initialStatus,\n        onPlaybackStatusUpdate,\n        downloadFirst,\n        sound,\n        status,\n        _args8 = arguments;\n    return _regenerator.default.async(function _callee3$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            initialStatus = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n            onPlaybackStatusUpdate = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : null;\n            downloadFirst = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : true;\n            sound = new Sound();\n            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n            _context8.next = 7;\n            return _regenerator.default.awrap(sound.loadAsync(source, initialStatus, downloadFirst));\n\n          case 7:\n            status = _context8.sent;\n            return _context8.abrupt(\"return\", {\n              sound: sound,\n              status: status\n            });\n\n          case 9:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  (0, _extends2.default)(Sound.prototype, _AV.PlaybackMixin);\n});","lineCount":411,"map":[[21,0,1,0],[23,0,2,0],[25,0,3,0],[27,0,4,0],[33,6,5,13,"Sound"],[33,11],[34,0,6,4],[34,21,6,18],[35,0,6,18],[37,0,6,18],[38,0,7,8],[38,11,7,13,"_loaded"],[38,18,7,8],[38,21,7,23],[38,26,7,8],[39,0,8,8],[39,11,8,13,"_loading"],[39,19,8,8],[39,22,8,24],[39,27,8,8],[40,0,9,8],[40,11,9,13,"_key"],[40,15,9,8],[40,18,9,20],[40,22,9,8],[41,0,10,8],[41,11,10,13,"_lastStatusUpdate"],[41,28,10,8],[41,31,10,33],[41,35,10,8],[42,0,11,8],[42,11,11,13,"_lastStatusUpdateTime"],[42,32,11,8],[42,35,11,37],[42,39,11,8],[43,0,12,8],[43,11,12,13,"_subscriptions"],[43,25,12,8],[43,28,12,30],[43,30,12,8],[44,0,13,8],[44,11,13,13,"_eventEmitter"],[44,24,13,8],[44,27,13,29],[44,31,13,33,"EventEmitter"],[44,49,13,29],[44,50,13,46,"ExponentAV"],[44,69,13,29],[44,70,13,8],[45,0,14,8],[45,11,14,13,"_coalesceStatusUpdatesInMillis"],[45,41,14,8],[45,44,14,46],[45,47,14,8],[46,0,15,8],[46,11,15,13,"_onPlaybackStatusUpdate"],[46,34,15,8],[46,37,15,39],[46,41,15,8],[48,0,16,8],[48,11,16,13,"_internalStatusUpdateCallback"],[48,40,16,8],[48,43,16,45],[48,59,16,67],[49,0,16,67],[49,12,16,48,"key"],[49,15,16,67],[49,23,16,48,"key"],[49,26,16,67],[50,0,16,67],[50,12,16,53,"status"],[50,18,16,67],[50,26,16,53,"status"],[50,32,16,67],[52,0,17,12],[52,12,17,16],[52,17,17,20],[52,18,17,21,"_key"],[52,22,17,16],[52,27,17,30,"key"],[52,30,17,12],[52,32,17,35],[53,0,18,16],[53,10,18,16],[53,15,18,20],[53,16,18,21,"_callOnPlaybackStatusUpdateForNewStatus"],[53,55,18,16],[53,56,18,61,"status"],[53,62,18,16],[54,0,19,13],[55,0,20,9],[55,7,16,8],[57,0,21,8],[57,11,21,13,"_internalErrorCallback"],[57,33,21,8],[57,36,21,38],[57,53,21,58],[58,0,21,58],[58,12,21,41,"key"],[58,15,21,58],[58,24,21,41,"key"],[58,27,21,58],[59,0,21,58],[59,12,21,46,"error"],[59,17,21,58],[59,26,21,46,"error"],[59,31,21,58],[61,0,22,12],[61,12,22,16],[61,17,22,20],[61,18,22,21,"_key"],[61,22,22,16],[61,27,22,30,"key"],[61,30,22,12],[61,32,22,35],[62,0,23,16],[62,10,23,16],[62,15,23,20],[62,16,23,21,"_errorCallback"],[62,30,23,16],[62,31,23,36,"error"],[62,36,23,16],[63,0,24,13],[64,0,25,9],[64,7,21,8],[66,0,26,8],[66,11,26,13,"_errorCallback"],[66,25,26,8],[66,28,26,30],[66,38,26,31,"error"],[66,43,26,30],[66,45,26,41],[67,0,27,12],[67,8,27,12],[67,13,27,16],[67,14,27,17,"_clearSubscriptions"],[67,33,27,12],[69,0,28,12],[69,8,28,12],[69,13,28,16],[69,14,28,17,"_loaded"],[69,21,28,12],[69,24,28,27],[69,29,28,12],[70,0,29,12],[70,8,29,12],[70,13,29,16],[70,14,29,17,"_key"],[70,18,29,12],[70,21,29,24],[70,25,29,12],[72,0,30,12],[72,8,30,12],[72,13,30,16],[72,14,30,17,"_callOnPlaybackStatusUpdateForNewStatus"],[72,53,30,12],[72,54,30,57],[72,81,30,75,"error"],[72,86,30,57],[72,87,30,12],[73,0,31,9],[73,7,26,8],[75,0,35,8],[75,11,35,13,"getStatusAsync"],[75,25,35,8],[75,28,35,30],[76,0,35,30],[77,0,35,30],[78,0,35,30],[79,0,35,30],[80,0,35,30],[81,0,35,30],[81,21,36,16],[81,26,36,20],[81,27,36,21,"_loaded"],[81,34,35,30],[82,0,35,30],[83,0,35,30],[84,0,35,30],[86,0,35,30],[86,49,37,23],[86,54,37,27],[86,55,37,28,"_performOperationAndHandleStatusAsync"],[86,92,37,23],[86,93,37,66],[87,0,37,66],[87,25,37,72,"ExponentAV"],[87,45,37,83,"getStatusForSound"],[87,62,37,72],[87,63,37,101],[87,68,37,105],[87,69,37,106,"_key"],[87,73,37,72],[87,74,37,66],[88,0,37,66],[88,17,37,23],[88,18,35,30],[90,0,35,30],[91,0,39,18,"status"],[91,16,39,18,"status"],[91,22,35,30],[91,25,39,27],[91,53,35,30],[93,0,40,12],[93,16,40,12],[93,21,40,16],[93,22,40,17,"_callOnPlaybackStatusUpdateForNewStatus"],[93,61,40,12],[93,62,40,57,"status"],[93,68,40,12],[95,0,35,30],[95,49,41,19,"status"],[95,55,35,30],[97,0,35,30],[98,0,35,30],[99,0,35,30],[100,0,35,30],[101,0,35,30],[102,0,35,30],[103,0,35,30],[103,7,35,8],[104,0,43,5],[108,62,45,44,"status"],[108,68],[108,70,45,52],[109,0,46,8],[109,12,46,14,"shouldDismissBasedOnCoalescing"],[109,42,46,44],[109,45,46,47],[109,50,46,52,"_lastStatusUpdateTime"],[109,71,46,47],[109,75,47,12,"JSON"],[109,79,47,16],[109,80,47,17,"stringify"],[109,89,47,12],[109,90,47,27,"status"],[109,96,47,12],[109,102,47,39],[109,107,47,44,"_lastStatusUpdate"],[109,124,46,47],[109,128,48,12,"Date"],[109,132,48,16],[109,133,48,17,"now"],[109,136,48,12],[109,141,48,25],[109,146,48,30,"_lastStatusUpdateTime"],[109,167,48,25],[109,168,48,52,"getTime"],[109,175,48,25],[109,177,48,12],[109,180,48,64],[109,185,48,69,"_coalesceStatusUpdatesInMillis"],[109,215,46,8],[111,0,49,8],[111,12,49,12],[111,17,49,17,"_onPlaybackStatusUpdate"],[111,40,49,12],[111,44,49,44],[111,48,49,12],[111,52,49,52],[111,53,49,53,"shouldDismissBasedOnCoalescing"],[111,83,49,8],[111,85,49,85],[112,0,50,12],[112,15,50,17,"_onPlaybackStatusUpdate"],[112,38,50,12],[112,39,50,41,"status"],[112,45,50,12],[114,0,51,12],[114,15,51,17,"_lastStatusUpdateTime"],[114,36,51,12],[114,39,51,41],[114,43,51,45,"Date"],[114,47,51,41],[114,49,51,12],[115,0,52,12],[115,15,52,17,"_lastStatusUpdate"],[115,32,52,12],[115,35,52,37,"JSON"],[115,39,52,41],[115,40,52,42,"stringify"],[115,49,52,37],[115,50,52,52,"status"],[115,56,52,37],[115,57,52,12],[116,0,53,9],[117,0,54,5],[120,60,55,48,"operation"],[120,69],[126,0,56,8],[128,21,57,12],[128,26,57,17,"_loaded"],[128,33],[134,50,58,33,"operation"],[134,59,58,42],[134,61],[137,0,58,18,"status"],[137,16,58,18,"status"],[137,22],[139,0,59,12],[139,21,59,17,"_callOnPlaybackStatusUpdateForNewStatus"],[139,60,59,12],[139,61,59,57,"status"],[139,67,59,12],[141,50,60,19,"status"],[141,56],[144,22,63,18],[144,26,63,22,"Error"],[144,31,63,18],[144,32,63,28],[144,88,63,18],[144,89],[155,49,67,31],[156,0,68,8],[156,12,68,12],[156,17,68,17,"_loaded"],[156,24,68,8],[156,26,68,26],[157,0,69,12],[157,15,69,17,"_subscriptions"],[157,29,69,12],[157,30,69,32,"push"],[157,34,69,12],[157,35,69,37],[157,40,69,42,"_eventEmitter"],[157,53,69,37],[157,54,69,56,"addListener"],[157,65,69,37],[157,66,69,68],[157,91,69,37],[157,93,69,95],[157,98,69,100,"_internalStatusUpdateCallback"],[157,127,69,37],[157,128,69,12],[159,0,70,12],[159,15,70,17,"_subscriptions"],[159,29,70,12],[159,30,70,32,"push"],[159,34,70,12],[159,35,70,37],[159,40,70,42,"_eventEmitter"],[159,53,70,37],[159,54,70,56,"addListener"],[159,65,70,37],[159,66,70,68],[159,86,70,37],[159,88,70,90],[159,93,70,95,"_internalErrorCallback"],[159,115,70,37],[159,116,70,12],[160,0,71,9],[161,0,72,5],[164,44,73,26],[165,0,74,8],[165,13,74,13,"_subscriptions"],[165,27,74,8],[165,28,74,28,"forEach"],[165,35,74,8],[165,36,74,36],[165,46,74,36,"e"],[165,47,74,37],[166,0,74,37],[166,17,74,41,"e"],[166,18,74,42],[166,19,74,43,"remove"],[166,25,74,41],[166,27,74,37],[167,0,74,37],[167,9,74,8],[169,0,75,8],[169,13,75,13,"_subscriptions"],[169,27,75,8],[169,30,75,30],[169,32,75,8],[170,0,76,5],[173,48,77,30,"onPlaybackStatusUpdate"],[173,70],[173,72,77,54],[174,0,78,8],[174,13,78,13,"_onPlaybackStatusUpdate"],[174,36,78,8],[174,39,78,39,"onPlaybackStatusUpdate"],[174,61,78,8],[175,0,79,8],[175,13,79,13,"getStatusAsync"],[175,27,79,8],[176,0,80,5],[179,32,82,20,"source"],[179,38],[193,0,82,28,"initialStatus"],[193,16,82,28,"initialStatus"],[193,29],[193,91,82,44],[193,93],[194,0,82,48,"downloadFirst"],[194,16,82,48,"downloadFirst"],[194,29],[194,91,82,64],[194,95],[195,0,83,8],[197,21,84,12],[197,26,84,17,"_loading"],[197,34],[202,22,85,18],[202,26,85,22,"Error"],[202,31,85,18],[202,32,85,28],[202,63,85,18],[202,64],[205,20,87,13],[205,25,87,18,"_loaded"],[205,32],[210,0,88,12],[210,21,88,17,"_loading"],[210,29,88,12],[210,32,88,28],[210,36,88,12],[212,50,89,63],[212,107,89,111,"source"],[212,113,89,63],[212,115,89,119,"initialStatus"],[212,128,89,63],[212,130,89,134,"downloadFirst"],[212,143,89,63],[212,144],[216,0,89,20,"nativeSource"],[216,16,89,20,"nativeSource"],[216,28],[216,53,89,20,"nativeSource"],[216,65],[217,0,89,34,"fullInitialStatus"],[217,16,89,34,"fullInitialStatus"],[217,33],[217,58,89,34,"fullInitialStatus"],[217,75],[218,50,91,19],[218,54,91,23,"Promise"],[218,61,91,19],[218,62,91,31],[218,72,91,32,"resolve"],[218,79,91,31],[218,81,91,41,"reject"],[218,87,91,31],[218,89,91,52],[219,0,92,16],[219,22,92,22,"loadSuccess"],[219,33,92,33],[219,36,92,36],[219,45,92,22,"loadSuccess"],[219,56,92,36],[219,57,92,37,"result"],[219,63,92,36],[219,65,92,48],[220,0,92,48],[220,63,93,42,"result"],[220,69,92,48],[221,0,92,48],[221,24,93,27,"key"],[221,27,92,48],[222,0,92,48],[222,24,93,32,"status"],[222,30,92,48],[224,0,94,20],[224,20,94,20],[224,26,94,24],[224,27,94,25,"_key"],[224,31,94,20],[224,34,94,32,"key"],[224,37,94,20],[225,0,95,20],[225,20,95,20],[225,26,95,24],[225,27,95,25,"_loaded"],[225,34,95,20],[225,37,95,35],[225,41,95,20],[226,0,96,20],[226,20,96,20],[226,26,96,24],[226,27,96,25,"_loading"],[226,35,96,20],[226,38,96,36],[226,43,96,20],[228,0,97,20],[228,20,97,20],[228,26,97,24],[228,27,97,25,"_subscribeToNativeEvents"],[228,51,97,20],[230,0,98,20],[230,20,98,20],[230,26,98,24],[230,27,98,25,"_callOnPlaybackStatusUpdateForNewStatus"],[230,66,98,20],[230,67,98,65,"status"],[230,73,98,20],[232,0,99,20,"resolve"],[232,20,99,20,"resolve"],[232,27,99,27],[232,28,99,28,"status"],[232,34,99,27],[232,35,99,20],[233,0,100,17],[233,19,92,16],[235,0,101,16],[235,22,101,22,"loadError"],[235,31,101,31],[235,34,101,34],[235,43,101,22,"loadError"],[235,52,101,34],[235,53,101,35,"error"],[235,58,101,34],[235,60,101,45],[236,0,102,20],[236,20,102,20],[236,26,102,24],[236,27,102,25,"_loading"],[236,35,102,20],[236,38,102,36],[236,43,102,20],[237,0,103,20,"reject"],[237,20,103,20,"reject"],[237,26,103,26],[237,27,103,27,"error"],[237,32,103,26],[237,33,103,20],[238,0,104,17],[238,19,101,16],[240,0,105,16,"ExponentAV"],[240,38,105,27,"loadForSound"],[240,50,105,16],[240,51,105,40,"nativeSource"],[240,63,105,16],[240,65,105,54,"fullInitialStatus"],[240,82,105,16],[240,84,106,21,"then"],[240,88,105,16],[240,89,106,26,"loadSuccess"],[240,100,105,16],[240,102,107,21,"catch"],[240,107,105,16],[240,108,107,27,"loadError"],[240,117,105,16],[241,0,108,13],[241,17,91,19],[241,18],[244,22,111,18],[244,26,111,22,"Error"],[244,31,111,18],[244,32,111,28],[244,62,111,18],[244,63],[261,21,115,12],[261,26,115,17,"_loaded"],[261,33],[266,0,116,12],[266,21,116,17,"_loaded"],[266,28,116,12],[266,31,116,27],[266,36,116,12],[267,0,117,18,"key"],[267,16,117,18,"key"],[267,19],[267,22,117,24],[267,27,117,29,"_key"],[267,31],[268,0,118,12],[268,21,118,17,"_key"],[268,25,118,12],[268,28,118,24],[268,32,118,12],[270,50,119,33,"ExponentAV"],[270,70,119,44,"unloadForSound"],[270,84,119,33],[270,85,119,59,"key"],[270,88,119,33],[270,89],[273,0,119,18,"status"],[273,16,119,18,"status"],[273,22],[275,0,120,12],[275,21,120,17,"_callOnPlaybackStatusUpdateForNewStatus"],[275,60,120,12],[275,61,120,57,"status"],[275,67,120,12],[277,0,121,12],[277,21,121,17,"_clearSubscriptions"],[277,40,121,12],[279,50,122,19,"status"],[279,56],[282,50,125,19],[282,55,125,24,"getStatusAsync"],[282,69,125,19],[282,71],[293,37,129,25,"status"],[293,43],[300,0,130,8],[300,52,130,35,"status"],[300,58,130,8],[301,50,131,15],[301,55,131,20,"_performOperationAndHandleStatusAsync"],[301,92,131,15],[301,93,131,58],[302,0,131,58],[302,25,131,64,"ExponentAV"],[302,45,131,75,"setStatusForSound"],[302,62,131,64],[302,63,131,93],[302,69,131,97],[302,70,131,98,"_key"],[302,74,131,64],[302,76,131,104,"status"],[302,82,131,64],[302,83,131,58],[303,0,131,58],[303,17,131,15],[303,18],[323,0,133,22,"status"],[323,16,133,22,"status"],[323,22],[323,84,133,31],[323,86],[325,22,134,12,"status"],[325,28,134,18],[325,29,134,19,"positionMillis"],[325,43,134,12],[325,47,134,37,"status"],[325,53,134,43],[325,54,134,44,"positionMillis"],[325,68,134,37],[325,73,134,63],[325,74],[330,22,135,18],[330,26,135,22,"Error"],[330,31,135,18],[330,32,135,28],[330,78,135,18],[330,79],[333,50,137,15],[333,55,137,20,"_performOperationAndHandleStatusAsync"],[333,92,137,15],[333,93,137,58],[334,0,137,58],[334,25,137,64,"ExponentAV"],[334,45,137,75,"replaySound"],[334,56,137,64],[334,57,137,87],[334,63,137,91],[334,64,137,92,"_key"],[334,68,137,64],[334,88,138,15,"status"],[334,94,137,64],[335,0,139,12,"positionMillis"],[335,20,139,12,"positionMillis"],[335,34,139,26],[335,36,139,28],[335,37,137,64],[336,0,140,12,"shouldPlay"],[336,20,140,12,"shouldPlay"],[336,30,140,22],[336,32,140,24],[337,0,137,64],[337,21,137,58],[338,0,137,58],[338,17,137,15],[338,18],[353,0,144,0,"Sound"],[353,2,144,0,"Sound"],[353,7,144,5],[353,8,144,6,"create"],[353,14,144,0],[353,17,144,15],[353,35,144,22,"source"],[353,41,144,15],[354,0,144,15],[355,0,144,15],[356,0,144,15],[357,0,144,15],[358,0,144,15],[359,0,144,15],[360,0,144,15],[361,0,144,15],[362,0,144,30,"initialStatus"],[362,12,144,30,"initialStatus"],[362,25,144,15],[362,87,144,46],[362,89,144,15],[363,0,144,50,"onPlaybackStatusUpdate"],[363,12,144,50,"onPlaybackStatusUpdate"],[363,34,144,15],[363,96,144,75],[363,100,144,15],[364,0,144,81,"downloadFirst"],[364,12,144,81,"downloadFirst"],[364,25,144,15],[364,87,144,97],[364,91,144,15],[365,0,145,4,"console"],[365,12,145,4,"console"],[365,19,145,11],[365,20,145,12,"warn"],[365,24,145,4],[366,0,144,15],[366,46,146,11,"Sound"],[366,51,146,16],[366,52,146,17,"createAsync"],[366,63,146,11],[366,64,146,29,"source"],[366,70,146,11],[366,72,146,37,"initialStatus"],[366,85,146,11],[366,87,146,52,"onPlaybackStatusUpdate"],[366,109,146,11],[366,111,146,76,"downloadFirst"],[366,124,146,11],[366,125,144,15],[368,0,144,15],[369,0,144,15],[370,0,144,15],[371,0,144,15],[372,0,144,15],[373,0,144,15],[374,0,144,15],[374,3,144,0],[376,0,148,0,"Sound"],[376,2,148,0,"Sound"],[376,7,148,5],[376,8,148,6,"createAsync"],[376,19,148,0],[376,22,148,20],[376,40,148,27,"source"],[376,46,148,20],[377,0,148,20],[378,0,148,20],[379,0,148,20],[380,0,148,20],[381,0,148,20],[382,0,148,20],[383,0,148,20],[384,0,148,20],[385,0,148,20],[386,0,148,20],[387,0,148,35,"initialStatus"],[387,12,148,35,"initialStatus"],[387,25,148,20],[387,87,148,51],[387,89,148,20],[388,0,148,55,"onPlaybackStatusUpdate"],[388,12,148,55,"onPlaybackStatusUpdate"],[388,34,148,20],[388,96,148,80],[388,100,148,20],[389,0,148,86,"downloadFirst"],[389,12,148,86,"downloadFirst"],[389,25,148,20],[389,87,148,102],[389,91,148,20],[390,0,149,10,"sound"],[390,12,149,10,"sound"],[390,17,148,20],[390,20,149,18],[390,24,149,22,"Sound"],[390,29,149,18],[390,31,148,20],[391,0,150,4,"sound"],[391,12,150,4,"sound"],[391,17,150,9],[391,18,150,10,"setOnPlaybackStatusUpdate"],[391,43,150,4],[391,44,150,36,"onPlaybackStatusUpdate"],[391,66,150,4],[392,0,148,20],[393,0,148,20],[393,46,151,25,"sound"],[393,51,151,30],[393,52,151,31,"loadAsync"],[393,61,151,25],[393,62,151,41,"source"],[393,68,151,25],[393,70,151,49,"initialStatus"],[393,83,151,25],[393,85,151,64,"downloadFirst"],[393,98,151,25],[393,99,148,20],[395,0,148,20],[396,0,151,10,"status"],[396,12,151,10,"status"],[396,18,148,20],[397,0,148,20],[397,46,152,11],[398,0,152,13,"sound"],[398,14,152,13,"sound"],[398,19,152,18],[398,21,152,13,"sound"],[398,26,152,11],[399,0,152,20,"status"],[399,14,152,20,"status"],[399,20,152,26],[399,22,152,20,"status"],[400,0,152,11],[400,13,148,20],[402,0,148,20],[403,0,148,20],[404,0,148,20],[405,0,148,20],[406,0,148,20],[407,0,148,20],[408,0,148,20],[408,3,148,0],[410,0,154,0],[410,25,154,14,"Sound"],[410,30,154,19],[410,31,154,20,"prototype"],[410,40,154,0],[410,42,154,31,"PlaybackMixin"],[410,59,154,0]],"functionMap":{"names":["<global>","Sound","constructor","_internalStatusUpdateCallback","_internalErrorCallback","_errorCallback","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","_callOnPlaybackStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","_subscribeToNativeEvents","_clearSubscriptions","_subscriptions.forEach$argument_0","setOnPlaybackStatusUpdate","loadAsync","Promise$argument_0","loadSuccess","loadError","unloadAsync","setStatusAsync","replayAsync","create","createAsync"],"mappings":"AAA;OCI;ICC;6CCU;SDI;sCEC;SFI;8BGC;SHK;8BII;kECE,6CD;SJK;KDC;IOE;KPS;IQC;KRU;ISE;KTK;IUC;oCCC,eD;KVE;IYC;KZG;IaE;+BCS;oCCC;iBDQ;kCEC;iBFG;aDI;KbK;IiBC;KjBa;IkBE;0DZE,qDY;KlBC;ImBC;0DbI;UaI;KnBC;CDC;eqBC;CrBG;oBsBC;CtBK"}},"type":"js/module"}]}