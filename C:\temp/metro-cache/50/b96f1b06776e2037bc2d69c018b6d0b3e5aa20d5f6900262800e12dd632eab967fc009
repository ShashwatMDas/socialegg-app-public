{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"unimodules-permissions-interface","data":{"isAsync":false}},{"name":"../AV","data":{"isAsync":false}},{"name":"../ExponentAV","data":{"isAsync":false}},{"name":"./AudioAvailability","data":{"isAsync":false}},{"name":"./Sound","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function get() {\n      return _unimodulesPermissionsInterface.PermissionStatus;\n    }\n  });\n  exports.Recording = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[5], \"@unimodules/core\");\n\n  var _unimodulesPermissionsInterface = _$$_REQUIRE(_dependencyMap[6], \"unimodules-permissions-interface\");\n\n  var _AV = _$$_REQUIRE(_dependencyMap[7], \"../AV\");\n\n  var _ExponentAV = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../ExponentAV\"));\n\n  var _AudioAvailability = _$$_REQUIRE(_dependencyMap[9], \"./AudioAvailability\");\n\n  var _Sound = _$$_REQUIRE(_dependencyMap[10], \"./Sound\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS;\n  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;\n  exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC;\n  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;\n  exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3;\n  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';\n  exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3;\n  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;\n  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN;\n  var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;\n  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW;\n  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;\n  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM;\n  var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;\n  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH;\n  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;\n  exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX;\n  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;\n  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT;\n  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;\n  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE;\n  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;\n  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED;\n  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;\n  exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE;\n  var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {\n    android: {\n      extension: '.m4a',\n      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,\n      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,\n      sampleRate: 44100,\n      numberOfChannels: 2,\n      bitRate: 128000\n    },\n    ios: {\n      extension: '.caf',\n      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,\n      sampleRate: 44100,\n      numberOfChannels: 2,\n      bitRate: 128000,\n      linearPCMBitDepth: 16,\n      linearPCMIsBigEndian: false,\n      linearPCMIsFloat: false\n    }\n  };\n  exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = RECORDING_OPTIONS_PRESET_HIGH_QUALITY;\n  var RECORDING_OPTIONS_PRESET_LOW_QUALITY = {\n    android: {\n      extension: '.3gp',\n      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,\n      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,\n      sampleRate: 44100,\n      numberOfChannels: 2,\n      bitRate: 128000\n    },\n    ios: {\n      extension: '.caf',\n      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,\n      sampleRate: 44100,\n      numberOfChannels: 2,\n      bitRate: 128000,\n      linearPCMBitDepth: 16,\n      linearPCMIsBigEndian: false,\n      linearPCMIsFloat: false\n    }\n  };\n  exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n  var _recorderExists = false;\n  var eventEmitter = _core.Platform.OS === 'android' ? new _core.EventEmitter(_ExponentAV.default) : null;\n\n  function getPermissionsAsync() {\n    return _regenerator.default.async(function getPermissionsAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _ExponentAV.default.getPermissionsAsync());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function requestPermissionsAsync() {\n    return _regenerator.default.async(function requestPermissionsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", _ExponentAV.default.requestPermissionsAsync());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var Recording = function () {\n    function Recording() {\n      var _this = this;\n\n      (0, _classCallCheck2.default)(this, Recording);\n      this._subscription = null;\n      this._canRecord = false;\n      this._isDoneRecording = false;\n      this._finalDurationMillis = 0;\n      this._uri = null;\n      this._onRecordingStatusUpdate = null;\n      this._progressUpdateTimeoutVariable = null;\n      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;\n      this._options = null;\n\n      this._cleanupForUnloadedRecorder = function _callee(finalStatus) {\n        return _regenerator.default.async(function _callee$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this._canRecord = false;\n                _this._isDoneRecording = true;\n                _this._finalDurationMillis = finalStatus.durationMillis;\n                _recorderExists = false;\n\n                if (_this._subscription) {\n                  _this._subscription.remove();\n\n                  _this._subscription = null;\n                }\n\n                _this._disablePolling();\n\n                _context3.next = 8;\n                return _regenerator.default.awrap(_this.getStatusAsync());\n\n              case 8:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      this._pollingLoop = function _callee2() {\n        return _regenerator.default.async(function _callee2$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!((0, _AudioAvailability.isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);\n                _context4.prev = 2;\n                _context4.next = 5;\n                return _regenerator.default.awrap(_this.getStatusAsync());\n\n              case 5:\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](2);\n\n                _this._disablePolling();\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, [[2, 7]], Promise);\n      };\n\n      this.getStatusAsync = function _callee3() {\n        var status;\n        return _regenerator.default.async(function _callee3$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!_this._canRecord) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.getAudioRecordingStatus();\n                }));\n\n              case 2:\n                status = {\n                  canRecord: false,\n                  isRecording: false,\n                  isDoneRecording: _this._isDoneRecording,\n                  durationMillis: _this._finalDurationMillis\n                };\n\n                _this._callOnRecordingStatusUpdateForNewStatus(status);\n\n                return _context5.abrupt(\"return\", status);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n    }\n\n    (0, _createClass2.default)(Recording, [{\n      key: \"_disablePolling\",\n      value: function _disablePolling() {\n        if (this._progressUpdateTimeoutVariable != null) {\n          clearTimeout(this._progressUpdateTimeoutVariable);\n          this._progressUpdateTimeoutVariable = null;\n        }\n      }\n    }, {\n      key: \"_enablePollingIfNecessaryAndPossible\",\n      value: function _enablePollingIfNecessaryAndPossible() {\n        if ((0, _AudioAvailability.isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {\n          this._disablePolling();\n\n          this._pollingLoop();\n        }\n      }\n    }, {\n      key: \"_callOnRecordingStatusUpdateForNewStatus\",\n      value: function _callOnRecordingStatusUpdateForNewStatus(status) {\n        if (this._onRecordingStatusUpdate != null) {\n          this._onRecordingStatusUpdate(status);\n        }\n      }\n    }, {\n      key: \"_performOperationAndHandleStatusAsync\",\n      value: function _performOperationAndHandleStatusAsync(operation) {\n        var status;\n        return _regenerator.default.async(function _performOperationAndHandleStatusAsync$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!this._canRecord) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                _context6.next = 4;\n                return _regenerator.default.awrap(operation());\n\n              case 4:\n                status = _context6.sent;\n\n                this._callOnRecordingStatusUpdateForNewStatus(status);\n\n                return _context6.abrupt(\"return\", status);\n\n              case 9:\n                throw new Error('Cannot complete operation because this recorder is not ready to record.');\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"setOnRecordingStatusUpdate\",\n      value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {\n        this._onRecordingStatusUpdate = onRecordingStatusUpdate;\n\n        if (onRecordingStatusUpdate == null) {\n          this._disablePolling();\n        } else {\n          this._enablePollingIfNecessaryAndPossible();\n        }\n\n        this.getStatusAsync();\n      }\n    }, {\n      key: \"setProgressUpdateInterval\",\n      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {\n        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;\n        this.getStatusAsync();\n      }\n    }, {\n      key: \"prepareToRecordAsync\",\n      value: function prepareToRecordAsync() {\n        var options,\n            extensionRegex,\n            _await$ExponentAV$pre,\n            uri,\n            status,\n            currentStatus,\n            _args7 = arguments;\n\n        return _regenerator.default.async(function prepareToRecordAsync$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;\n                (0, _AudioAvailability.throwIfAudioIsDisabled)();\n\n                if (!_recorderExists) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                throw new Error('Only one Recording object can be prepared at a given time.');\n\n              case 4:\n                if (!this._isDoneRecording) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error('This Recording object is done recording; you must make a new one.');\n\n              case 6:\n                if (!(!options || !options.android || !options.ios)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                throw new Error('You must provide recording options for android and ios in order to prepare to record.');\n\n              case 8:\n                extensionRegex = /^\\.\\w+$/;\n\n                if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                throw new Error(\"Your file extensions must match \" + extensionRegex.toString() + \".\");\n\n              case 11:\n                if (this._canRecord) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                if (eventEmitter) {\n                  this._subscription = eventEmitter.addListener('Expo.Recording.recorderUnloaded', this._cleanupForUnloadedRecorder);\n                }\n\n                _context7.next = 15;\n                return _regenerator.default.awrap(_ExponentAV.default.prepareAudioRecorder(options));\n\n              case 15:\n                _await$ExponentAV$pre = _context7.sent;\n                uri = _await$ExponentAV$pre.uri;\n                status = _await$ExponentAV$pre.status;\n                _recorderExists = true;\n                this._uri = uri;\n                this._options = options;\n                this._canRecord = true;\n                currentStatus = _objectSpread({}, status, {\n                  canRecord: true\n                });\n\n                this._callOnRecordingStatusUpdateForNewStatus(currentStatus);\n\n                this._enablePollingIfNecessaryAndPossible();\n\n                return _context7.abrupt(\"return\", currentStatus);\n\n              case 28:\n                throw new Error('This Recording object is already prepared to record.');\n\n              case 29:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"startAsync\",\n      value: function startAsync() {\n        return _regenerator.default.async(function startAsync$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.startAudioRecording();\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"pauseAsync\",\n      value: function pauseAsync() {\n        return _regenerator.default.async(function pauseAsync$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this._performOperationAndHandleStatusAsync(function () {\n                  return _ExponentAV.default.pauseAudioRecording();\n                }));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"stopAndUnloadAsync\",\n      value: function stopAndUnloadAsync() {\n        var finalStatus;\n        return _regenerator.default.async(function stopAndUnloadAsync$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this._canRecord) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                if (!this._isDoneRecording) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot unload a Recording that has already been unloaded.');\n\n              case 5:\n                throw new Error('Cannot unload a Recording that has not been prepared.');\n\n              case 6:\n                _context10.next = 8;\n                return _regenerator.default.awrap(_ExponentAV.default.stopAudioRecording());\n\n              case 8:\n                finalStatus = _context10.sent;\n                _context10.next = 11;\n                return _regenerator.default.awrap(_ExponentAV.default.unloadAudioRecorder());\n\n              case 11:\n                return _context10.abrupt(\"return\", this._cleanupForUnloadedRecorder(finalStatus));\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"getURI\",\n      value: function getURI() {\n        return this._uri;\n      }\n    }, {\n      key: \"createNewLoadedSound\",\n      value: function createNewLoadedSound() {\n        var initialStatus,\n            onPlaybackStatusUpdate,\n            _args11 = arguments;\n        return _regenerator.default.async(function createNewLoadedSound$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                initialStatus = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                onPlaybackStatusUpdate = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n                console.warn(\"createNewLoadedSound is deprecated in favor of createNewLoadedSoundAsync, which has the same API aside from the method name\");\n                return _context11.abrupt(\"return\", this.createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"createNewLoadedSoundAsync\",\n      value: function createNewLoadedSoundAsync() {\n        var initialStatus,\n            onPlaybackStatusUpdate,\n            _args12 = arguments;\n        return _regenerator.default.async(function createNewLoadedSoundAsync$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                initialStatus = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                onPlaybackStatusUpdate = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : null;\n\n                if (!(this._uri == null || !this._isDoneRecording)) {\n                  _context12.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot create sound when the Recording has not finished!');\n\n              case 4:\n                return _context12.abrupt(\"return\", _Sound.Sound.createAsync({\n                  uri: this._uri\n                }, initialStatus, onPlaybackStatusUpdate, false));\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    }]);\n    return Recording;\n  }();\n\n  exports.Recording = Recording;\n});","lineCount":662,"map":[[25,0,1,0],[27,0,2,0],[29,0,3,0],[31,0,4,0],[33,0,5,0],[35,0,6,0],[41,0,8,7],[41,6,8,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT"],[41,52,8,59],[41,55,8,62],[41,56,8,7],[43,0,9,7],[43,6,9,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP"],[43,54,9,61],[43,57,9,64],[43,58,9,7],[45,0,10,7],[45,6,10,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4"],[45,51,10,58],[45,54,10,61],[45,55,10,7],[47,0,11,7],[47,6,11,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB"],[47,51,11,58],[47,54,11,61],[47,55,11,7],[49,0,12,7],[49,6,12,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB"],[49,51,12,58],[49,54,12,61],[49,55,12,7],[51,0,13,7],[51,6,13,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF"],[51,53,13,60],[51,56,13,63],[51,57,13,7],[53,0,14,7],[53,6,14,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS"],[53,53,14,60],[53,56,14,63],[53,57,14,7],[55,0,15,7],[55,6,15,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP"],[55,52,15,59],[55,55,15,62],[55,56,15,7],[57,0,16,7],[57,6,16,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS"],[57,52,16,59],[57,55,16,62],[57,56,16,7],[59,0,17,7],[59,6,17,13,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM"],[59,49,17,56],[59,52,17,59],[59,53,17,7],[61,0,18,7],[61,6,18,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT"],[61,52,18,59],[61,55,18,62],[61,56,18,7],[63,0,19,7],[63,6,19,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB"],[63,51,19,58],[63,54,19,61],[63,55,19,7],[65,0,20,7],[65,6,20,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB"],[65,51,20,58],[65,54,20,61],[65,55,20,7],[67,0,21,7],[67,6,21,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC"],[67,48,21,55],[67,51,21,58],[67,52,21,7],[69,0,22,7],[69,6,22,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC"],[69,51,22,58],[69,54,22,61],[69,55,22,7],[71,0,23,7],[71,6,23,13,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD"],[71,52,23,59],[71,55,23,62],[71,56,23,7],[73,0,24,7],[73,6,24,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM"],[73,50,24,57],[73,53,24,60],[73,59,24,7],[75,0,25,7],[75,6,25,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3"],[75,44,25,51],[75,47,25,54],[75,53,25,7],[77,0,26,7],[77,6,26,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3"],[77,49,26,56],[77,52,26,59],[77,58,26,7],[79,0,27,7],[79,6,27,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4"],[79,50,27,57],[79,53,27,60],[79,59,27,7],[81,0,28,7],[81,6,28,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC"],[81,49,28,56],[81,52,28,59],[81,58,28,7],[83,0,29,7],[83,6,29,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP"],[83,50,29,57],[83,53,29,60],[83,59,29,7],[85,0,30,7],[85,6,30,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC"],[85,50,30,57],[85,53,30,60],[85,59,30,7],[87,0,31,7],[87,6,31,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ"],[87,52,31,59],[87,55,31,62],[87,61,31,7],[89,0,32,7],[89,6,32,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3"],[89,46,32,53],[89,49,32,56],[89,55,32,7],[91,0,33,7],[91,6,33,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6"],[91,46,33,53],[91,49,33,56],[91,55,33,7],[93,0,34,7],[93,6,34,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW"],[93,45,34,52],[93,48,34,55],[93,54,34,7],[95,0,35,7],[95,6,35,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW"],[95,45,35,52],[95,48,35,55],[95,54,35,7],[97,0,36,7],[97,6,36,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN"],[97,48,36,55],[97,51,36,58],[97,57,36,7],[99,0,37,7],[99,6,37,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2"],[99,49,37,56],[99,52,37,59],[99,58,37,7],[101,0,38,7],[101,6,38,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM"],[101,49,38,56],[101,52,38,59],[101,58,38,7],[103,0,39,7],[103,6,39,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1"],[103,51,39,58],[103,54,39,61],[103,60,39,7],[105,0,40,7],[105,6,40,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2"],[105,51,40,58],[105,54,40,61],[105,60,40,7],[107,0,41,7],[107,6,41,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3"],[107,51,41,58],[107,54,41,61],[107,60,41,7],[109,0,42,7],[109,6,42,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS"],[109,54,42,61],[109,57,42,64],[109,63,42,7],[111,0,43,7],[111,6,43,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE"],[111,52,43,59],[111,55,43,62],[111,61,43,7],[113,0,44,7],[113,6,44,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD"],[113,52,44,59],[113,55,44,62],[113,61,44,7],[115,0,45,7],[115,6,45,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD"],[115,53,45,60],[115,56,45,63],[115,62,45,7],[117,0,46,7],[117,6,46,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR"],[117,57,46,64],[117,60,46,67],[117,66,46,7],[119,0,47,7],[119,6,47,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2"],[119,56,47,63],[119,59,47,66],[119,65,47,7],[121,0,48,7],[121,6,48,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2"],[121,55,48,62],[121,58,48,65],[121,64,48,7],[123,0,49,7],[123,6,49,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL"],[123,57,49,64],[123,60,49,67],[123,66,49,7],[125,0,50,7],[125,6,50,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR"],[125,44,50,51],[125,47,50,54],[125,53,50,7],[127,0,51,7],[127,6,51,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB"],[127,47,51,54],[127,50,51,57],[127,56,51,7],[129,0,52,7],[129,6,52,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE"],[129,48,52,55],[129,51,52,58],[129,57,52,7],[131,0,53,7],[131,6,53,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC"],[131,45,53,52],[131,48,53,55],[131,54,53,7],[133,0,54,7],[133,6,54,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA"],[133,52,54,59],[133,55,54,62],[133,65,54,7],[135,0,55,7],[135,6,55,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM"],[135,53,55,60],[135,56,55,63],[135,66,55,7],[137,0,56,7],[137,6,56,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3"],[137,45,56,52],[137,48,56,55],[137,54,56,7],[139,0,57,7],[139,6,57,13,"RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3"],[139,52,57,59],[139,55,57,62],[139,61,57,7],[141,0,58,7],[141,6,58,13,"RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN"],[141,44,58,51],[141,47,58,54],[141,48,58,7],[143,0,59,7],[143,6,59,13,"RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW"],[143,44,59,51],[143,47,59,54],[143,51,59,7],[145,0,60,7],[145,6,60,13,"RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM"],[145,47,60,54],[145,50,60,57],[145,54,60,7],[147,0,61,7],[147,6,61,13,"RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH"],[147,45,61,52],[147,48,61,55],[147,52,61,7],[149,0,62,7],[149,6,62,13,"RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX"],[149,44,62,51],[149,47,62,54],[149,51,62,7],[151,0,63,7],[151,6,63,13,"RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT"],[151,53,63,60],[151,56,63,63],[151,57,63,7],[153,0,64,7],[153,6,64,13,"RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE"],[153,62,64,69],[153,65,64,72],[153,66,64,7],[155,0,65,7],[155,6,65,13,"RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED"],[155,65,65,72],[155,68,65,75],[155,69,65,7],[157,0,66,7],[157,6,66,13,"RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE"],[157,53,66,60],[157,56,66,63],[157,57,66,7],[159,0,68,7],[159,6,68,13,"RECORDING_OPTIONS_PRESET_HIGH_QUALITY"],[159,43,68,50],[159,46,68,53],[160,0,69,4,"android"],[160,4,69,4,"android"],[160,11,69,11],[160,13,69,13],[161,0,70,8,"extension"],[161,6,70,8,"extension"],[161,15,70,17],[161,17,70,19],[161,23,69,13],[162,0,71,8,"outputFormat"],[162,6,71,8,"outputFormat"],[162,18,71,20],[162,20,71,22,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4"],[162,65,69,13],[163,0,72,8,"audioEncoder"],[163,6,72,8,"audioEncoder"],[163,18,72,20],[163,20,72,22,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC"],[163,62,69,13],[164,0,73,8,"sampleRate"],[164,6,73,8,"sampleRate"],[164,16,73,18],[164,18,73,20],[164,23,69,13],[165,0,74,8,"numberOfChannels"],[165,6,74,8,"numberOfChannels"],[165,22,74,24],[165,24,74,26],[165,25,69,13],[166,0,75,8,"bitRate"],[166,6,75,8,"bitRate"],[166,13,75,15],[166,15,75,17],[167,0,69,13],[167,5,68,53],[168,0,77,4,"ios"],[168,4,77,4,"ios"],[168,7,77,7],[168,9,77,9],[169,0,78,8,"extension"],[169,6,78,8,"extension"],[169,15,78,17],[169,17,78,19],[169,23,77,9],[170,0,79,8,"audioQuality"],[170,6,79,8,"audioQuality"],[170,18,79,20],[170,20,79,22,"RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX"],[170,58,77,9],[171,0,80,8,"sampleRate"],[171,6,80,8,"sampleRate"],[171,16,80,18],[171,18,80,20],[171,23,77,9],[172,0,81,8,"numberOfChannels"],[172,6,81,8,"numberOfChannels"],[172,22,81,24],[172,24,81,26],[172,25,77,9],[173,0,82,8,"bitRate"],[173,6,82,8,"bitRate"],[173,13,82,15],[173,15,82,17],[173,21,77,9],[174,0,83,8,"linearPCMBitDepth"],[174,6,83,8,"linearPCMBitDepth"],[174,23,83,25],[174,25,83,27],[174,27,77,9],[175,0,84,8,"linearPCMIsBigEndian"],[175,6,84,8,"linearPCMIsBigEndian"],[175,26,84,28],[175,28,84,30],[175,33,77,9],[176,0,85,8,"linearPCMIsFloat"],[176,6,85,8,"linearPCMIsFloat"],[176,22,85,24],[176,24,85,26],[177,0,77,9],[178,0,68,53],[178,3,68,7],[180,0,88,7],[180,6,88,13,"RECORDING_OPTIONS_PRESET_LOW_QUALITY"],[180,42,88,49],[180,45,88,52],[181,0,89,4,"android"],[181,4,89,4,"android"],[181,11,89,11],[181,13,89,13],[182,0,90,8,"extension"],[182,6,90,8,"extension"],[182,15,90,17],[182,17,90,19],[182,23,89,13],[183,0,91,8,"outputFormat"],[183,6,91,8,"outputFormat"],[183,18,91,20],[183,20,91,22,"RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP"],[183,68,89,13],[184,0,92,8,"audioEncoder"],[184,6,92,8,"audioEncoder"],[184,18,92,20],[184,20,92,22,"RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB"],[184,65,89,13],[185,0,93,8,"sampleRate"],[185,6,93,8,"sampleRate"],[185,16,93,18],[185,18,93,20],[185,23,89,13],[186,0,94,8,"numberOfChannels"],[186,6,94,8,"numberOfChannels"],[186,22,94,24],[186,24,94,26],[186,25,89,13],[187,0,95,8,"bitRate"],[187,6,95,8,"bitRate"],[187,13,95,15],[187,15,95,17],[188,0,89,13],[188,5,88,52],[189,0,97,4,"ios"],[189,4,97,4,"ios"],[189,7,97,7],[189,9,97,9],[190,0,98,8,"extension"],[190,6,98,8,"extension"],[190,15,98,17],[190,17,98,19],[190,23,97,9],[191,0,99,8,"audioQuality"],[191,6,99,8,"audioQuality"],[191,18,99,20],[191,20,99,22,"RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN"],[191,58,97,9],[192,0,100,8,"sampleRate"],[192,6,100,8,"sampleRate"],[192,16,100,18],[192,18,100,20],[192,23,97,9],[193,0,101,8,"numberOfChannels"],[193,6,101,8,"numberOfChannels"],[193,22,101,24],[193,24,101,26],[193,25,97,9],[194,0,102,8,"bitRate"],[194,6,102,8,"bitRate"],[194,13,102,15],[194,15,102,17],[194,21,97,9],[195,0,103,8,"linearPCMBitDepth"],[195,6,103,8,"linearPCMBitDepth"],[195,23,103,25],[195,25,103,27],[195,27,97,9],[196,0,104,8,"linearPCMIsBigEndian"],[196,6,104,8,"linearPCMIsBigEndian"],[196,26,104,28],[196,28,104,30],[196,33,97,9],[197,0,105,8,"linearPCMIsFloat"],[197,6,105,8,"linearPCMIsFloat"],[197,22,105,24],[197,24,105,26],[198,0,97,9],[199,0,88,52],[199,3,88,7],[201,0,109,0],[201,6,109,4,"_recorderExists"],[201,21,109,19],[201,24,109,22],[201,29,109,0],[202,0,110,0],[202,6,110,6,"eventEmitter"],[202,18,110,18],[202,21,110,21,"Platform"],[202,36,110,30,"OS"],[202,38,110,21],[202,43,110,37],[202,52,110,21],[202,55,110,49],[202,59,110,53,"EventEmitter"],[202,77,110,49],[202,78,110,66,"ExponentAV"],[202,97,110,49],[202,98,110,21],[202,101,110,80],[202,105,110,0],[204,0,111,7],[204,11,111,22,"getPermissionsAsync"],[204,30,111,7],[205,0,111,7],[206,0,111,7],[207,0,111,7],[208,0,111,7],[209,0,111,7],[209,45,112,11,"ExponentAV"],[209,65,112,22,"getPermissionsAsync"],[209,84,112,11],[209,86,111,7],[211,0,111,7],[212,0,111,7],[213,0,111,7],[214,0,111,7],[215,0,111,7],[216,0,111,7],[217,0,111,7],[219,0,114,7],[219,11,114,22,"requestPermissionsAsync"],[219,34,114,7],[220,0,114,7],[221,0,114,7],[222,0,114,7],[223,0,114,7],[224,0,114,7],[224,46,115,11,"ExponentAV"],[224,66,115,22,"requestPermissionsAsync"],[224,89,115,11],[224,91,114,7],[226,0,114,7],[227,0,114,7],[228,0,114,7],[229,0,114,7],[230,0,114,7],[231,0,114,7],[232,0,114,7],[234,6,117,13,"Recording"],[234,15],[235,0,118,4],[235,25,118,18],[236,0,118,18],[238,0,118,18],[239,0,119,8],[239,11,119,13,"_subscription"],[239,24,119,8],[239,27,119,29],[239,31,119,8],[240,0,120,8],[240,11,120,13,"_canRecord"],[240,21,120,8],[240,24,120,26],[240,29,120,8],[241,0,121,8],[241,11,121,13,"_isDoneRecording"],[241,27,121,8],[241,30,121,32],[241,35,121,8],[242,0,122,8],[242,11,122,13,"_finalDurationMillis"],[242,31,122,8],[242,34,122,36],[242,35,122,8],[243,0,123,8],[243,11,123,13,"_uri"],[243,15,123,8],[243,18,123,20],[243,22,123,8],[244,0,124,8],[244,11,124,13,"_onRecordingStatusUpdate"],[244,35,124,8],[244,38,124,40],[244,42,124,8],[245,0,125,8],[245,11,125,13,"_progressUpdateTimeoutVariable"],[245,41,125,8],[245,44,125,46],[245,48,125,8],[246,0,126,8],[246,11,126,13,"_progressUpdateIntervalMillis"],[246,40,126,8],[246,43,126,45,"_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS"],[246,87,126,8],[247,0,127,8],[247,11,127,13,"_options"],[247,19,127,8],[247,22,127,24],[247,26,127,8],[249,0,129,8],[249,11,129,13,"_cleanupForUnloadedRecorder"],[249,38,129,8],[249,41,129,43],[249,58,129,50,"finalStatus"],[249,69,129,43],[250,0,129,43],[251,0,129,43],[252,0,129,43],[253,0,129,43],[254,0,130,12],[254,16,130,12],[254,21,130,16],[254,22,130,17,"_canRecord"],[254,32,130,12],[254,35,130,30],[254,40,130,12],[255,0,131,12],[255,16,131,12],[255,21,131,16],[255,22,131,17,"_isDoneRecording"],[255,38,131,12],[255,41,131,36],[255,45,131,12],[256,0,133,12],[256,16,133,12],[256,21,133,16],[256,22,133,17,"_finalDurationMillis"],[256,42,133,12],[256,45,133,40,"finalStatus"],[256,56,133,51],[256,57,133,52,"durationMillis"],[256,71,133,12],[257,0,134,12,"_recorderExists"],[257,16,134,12,"_recorderExists"],[257,31,134,27],[257,34,134,30],[257,39,134,12],[259,0,135,12],[259,20,135,16],[259,25,135,20],[259,26,135,21,"_subscription"],[259,39,135,12],[259,41,135,36],[260,0,136,16],[260,18,136,16],[260,23,136,20],[260,24,136,21,"_subscription"],[260,37,136,16],[260,38,136,35,"remove"],[260,44,136,16],[262,0,137,16],[262,18,137,16],[262,23,137,20],[262,24,137,21,"_subscription"],[262,37,137,16],[262,40,137,37],[262,44,137,16],[263,0,138,13],[265,0,139,12],[265,16,139,12],[265,21,139,16],[265,22,139,17,"_disablePolling"],[265,37,139,12],[267,0,129,43],[268,0,129,43],[268,50,140,25],[268,55,140,29],[268,56,140,30,"getStatusAsync"],[268,70,140,25],[268,72,129,43],[270,0,129,43],[271,0,129,43],[273,0,129,43],[274,0,129,43],[275,0,129,43],[276,0,129,43],[277,0,129,43],[278,0,129,43],[279,0,129,43],[279,7,129,8],[281,0,142,8],[281,11,142,13,"_pollingLoop"],[281,23,142,8],[281,26,142,28],[282,0,142,28],[283,0,142,28],[284,0,142,28],[285,0,142,28],[286,0,142,28],[286,22,143,16],[286,66,143,36],[286,71,143,40],[286,72,143,41,"_canRecord"],[286,82,143,16],[286,86,143,55],[286,91,143,59],[286,92,143,60,"_onRecordingStatusUpdate"],[286,116,143,55],[286,120,143,88],[286,124,142,28],[287,0,142,28],[288,0,142,28],[289,0,142,28],[291,0,144,16],[291,16,144,16],[291,21,144,20],[291,22,144,21,"_progressUpdateTimeoutVariable"],[291,52,144,16],[291,55,144,54,"setTimeout"],[291,65,144,64],[291,66,144,65],[291,71,144,69],[291,72,144,70,"_pollingLoop"],[291,84,144,64],[291,86,144,84],[291,91,144,88],[291,92,144,89,"_progressUpdateIntervalMillis"],[291,121,144,64],[291,122,144,16],[292,0,142,28],[293,0,142,28],[294,0,142,28],[294,50,146,26],[294,55,146,30],[294,56,146,31,"getStatusAsync"],[294,70,146,26],[294,72,142,28],[296,0,142,28],[297,0,142,28],[298,0,142,28],[300,0,142,28],[301,0,142,28],[302,0,142,28],[304,0,149,20],[304,16,149,20],[304,21,149,24],[304,22,149,25,"_disablePolling"],[304,37,149,20],[306,0,142,28],[307,0,142,28],[308,0,142,28],[309,0,142,28],[310,0,142,28],[311,0,142,28],[312,0,142,28],[312,7,142,8],[314,0,155,8],[314,11,155,13,"getStatusAsync"],[314,25,155,8],[314,28,155,30],[315,0,155,30],[316,0,155,30],[317,0,155,30],[318,0,155,30],[319,0,155,30],[320,0,155,30],[320,21,157,16],[320,26,157,20],[320,27,157,21,"_canRecord"],[320,37,155,30],[321,0,155,30],[322,0,155,30],[323,0,155,30],[325,0,155,30],[325,50,158,23],[325,55,158,27],[325,56,158,28,"_performOperationAndHandleStatusAsync"],[325,93,158,23],[325,94,158,66],[326,0,158,66],[326,25,158,72,"ExponentAV"],[326,45,158,83,"getAudioRecordingStatus"],[326,68,158,72],[326,70,158,66],[327,0,158,66],[327,17,158,23],[327,18,155,30],[329,0,155,30],[330,0,160,18,"status"],[330,16,160,18,"status"],[330,22,155,30],[330,25,160,27],[331,0,161,16,"canRecord"],[331,18,161,16,"canRecord"],[331,27,161,25],[331,29,161,27],[331,34,160,27],[332,0,162,16,"isRecording"],[332,18,162,16,"isRecording"],[332,29,162,27],[332,31,162,29],[332,36,160,27],[333,0,163,16,"isDoneRecording"],[333,18,163,16,"isDoneRecording"],[333,33,163,31],[333,35,163,33],[333,40,163,37],[333,41,163,38,"_isDoneRecording"],[333,57,160,27],[334,0,164,16,"durationMillis"],[334,18,164,16,"durationMillis"],[334,32,164,30],[334,34,164,32],[334,39,164,36],[334,40,164,37,"_finalDurationMillis"],[335,0,160,27],[335,17,155,30],[337,0,166,12],[337,16,166,12],[337,21,166,16],[337,22,166,17,"_callOnRecordingStatusUpdateForNewStatus"],[337,62,166,12],[337,63,166,58,"status"],[337,69,166,12],[339,0,155,30],[339,50,167,19,"status"],[339,56,155,30],[341,0,155,30],[342,0,155,30],[343,0,155,30],[344,0,155,30],[345,0,155,30],[346,0,155,30],[347,0,155,30],[347,7,155,8],[348,0,169,5],[352,40,170,22],[353,0,171,8],[353,12,171,12],[353,17,171,17,"_progressUpdateTimeoutVariable"],[353,47,171,12],[353,51,171,51],[353,55,171,8],[353,57,171,57],[354,0,172,12,"clearTimeout"],[354,10,172,12,"clearTimeout"],[354,22,172,24],[354,23,172,25],[354,28,172,30,"_progressUpdateTimeoutVariable"],[354,58,172,24],[354,59,172,12],[355,0,173,12],[355,15,173,17,"_progressUpdateTimeoutVariable"],[355,45,173,12],[355,48,173,50],[355,52,173,12],[356,0,174,9],[357,0,175,5],[360,61,176,43],[361,0,177,8],[361,12,177,12],[361,56,177,32],[361,61,177,37,"_canRecord"],[361,71,177,12],[361,75,177,51],[361,80,177,56,"_onRecordingStatusUpdate"],[361,104,177,51],[361,108,177,84],[361,112,177,8],[361,114,177,90],[362,0,178,12],[362,15,178,17,"_disablePolling"],[362,30,178,12],[364,0,179,12],[364,15,179,17,"_pollingLoop"],[364,27,179,12],[365,0,180,9],[366,0,181,5],[369,63,182,45,"status"],[369,69],[369,71,182,53],[370,0,183,8],[370,12,183,12],[370,17,183,17,"_onRecordingStatusUpdate"],[370,41,183,12],[370,45,183,45],[370,49,183,8],[370,51,183,51],[371,0,184,12],[371,15,184,17,"_onRecordingStatusUpdate"],[371,39,184,12],[371,40,184,42,"status"],[371,46,184,12],[372,0,185,9],[373,0,186,5],[376,60,187,48,"operation"],[376,69],[382,0,188,8],[384,21,189,12],[384,26,189,17,"_canRecord"],[384,36],[390,50,190,33,"operation"],[390,59,190,42],[390,61],[393,0,190,18,"status"],[393,16,190,18,"status"],[393,22],[395,0,191,12],[395,21,191,17,"_callOnRecordingStatusUpdateForNewStatus"],[395,61,191,12],[395,62,191,58,"status"],[395,68,191,12],[397,50,192,19,"status"],[397,56],[400,22,195,18],[400,26,195,22,"Error"],[400,31,195,18],[400,32,195,28],[400,105,195,18],[400,106],[411,49,198,31,"onRecordingStatusUpdate"],[411,72],[411,74,198,56],[412,0,199,8],[412,13,199,13,"_onRecordingStatusUpdate"],[412,37,199,8],[412,40,199,40,"onRecordingStatusUpdate"],[412,63,199,8],[414,0,200,8],[414,12,200,12,"onRecordingStatusUpdate"],[414,35,200,35],[414,39,200,39],[414,43,200,8],[414,45,200,45],[415,0,201,12],[415,15,201,17,"_disablePolling"],[415,30,201,12],[416,0,202,9],[416,9,200,8],[416,15,203,13],[417,0,204,12],[417,15,204,17,"_enablePollingIfNecessaryAndPossible"],[417,51,204,12],[418,0,205,9],[420,0,206,8],[420,13,206,13,"getStatusAsync"],[420,27,206,8],[421,0,207,5],[424,48,208,30,"progressUpdateIntervalMillis"],[424,76],[424,78,208,60],[425,0,209,8],[425,13,209,13,"_progressUpdateIntervalMillis"],[425,42,209,8],[425,45,209,45,"progressUpdateIntervalMillis"],[425,73,209,8],[426,0,210,8],[426,13,210,13,"getStatusAsync"],[426,27,210,8],[427,0,211,5],[443,0,213,31,"options"],[443,16,213,31,"options"],[443,23],[443,85,213,41,"RECORDING_OPTIONS_PRESET_LOW_QUALITY"],[443,121],[444,0,214,8],[446,21,215,12,"_recorderExists"],[446,36],[451,22,216,18],[451,26,216,22,"Error"],[451,31,216,18],[451,32,216,28],[451,92,216,18],[451,93],[454,21,218,12],[454,26,218,17,"_isDoneRecording"],[454,42],[459,22,219,18],[459,26,219,22,"Error"],[459,31,219,18],[459,32,219,28],[459,99,219,18],[459,100],[462,22,221,12],[462,23,221,13,"options"],[462,30,221,12],[462,34,221,24],[462,35,221,25,"options"],[462,42,221,32],[462,43,221,33,"android"],[462,50,221,12],[462,54,221,44],[462,55,221,45,"options"],[462,62,221,52],[462,63,221,53,"ios"],[462,66],[467,22,222,18],[467,26,222,22,"Error"],[467,31,222,18],[467,32,222,28],[467,119,222,18],[467,120],[470,0,224,14,"extensionRegex"],[470,16,224,14,"extensionRegex"],[470,30],[470,33,224,31],[470,42],[472,22,225,12],[472,23,225,13,"options"],[472,30,225,20],[472,31,225,21,"android"],[472,38,225,13],[472,39,225,29,"extension"],[472,48,225,12],[472,52,226,12],[472,53,226,13,"options"],[472,60,226,20],[472,61,226,21,"ios"],[472,64,226,13],[472,65,226,25,"extension"],[472,74,225,12],[472,78,227,12],[472,79,227,13,"extensionRegex"],[472,93,227,27],[472,94,227,28,"test"],[472,98,227,13],[472,99,227,33,"options"],[472,106,227,40],[472,107,227,41,"android"],[472,114,227,33],[472,115,227,49,"extension"],[472,124,227,13],[472,125,225,12],[472,129,228,12],[472,130,228,13,"extensionRegex"],[472,144,228,27],[472,145,228,28,"test"],[472,149,228,13],[472,150,228,33,"options"],[472,157,228,40],[472,158,228,41,"ios"],[472,161,228,33],[472,162,228,45,"extension"],[472,171,228,13],[472,172],[477,22,229,18],[477,26,229,22,"Error"],[477,31,229,18],[477,69,229,63,"extensionRegex"],[477,83,229,77],[477,84,229,78,"toString"],[477,92,229,63],[477,94,229,18],[477,101],[480,20,231,13],[480,25,231,18,"_canRecord"],[480,35],[485,0,232,12],[485,20,232,16,"eventEmitter"],[485,32,232,12],[485,34,232,30],[486,0,233,16],[486,23,233,21,"_subscription"],[486,36,233,16],[486,39,233,37,"eventEmitter"],[486,51,233,49],[486,52,233,50,"addListener"],[486,63,233,37],[486,64,233,62],[486,97,233,37],[486,99,233,97],[486,104,233,102,"_cleanupForUnloadedRecorder"],[486,131,233,37],[486,132,233,16],[487,0,234,13],[490,50,235,43,"ExponentAV"],[490,70,235,54,"prepareAudioRecorder"],[490,90,235,43],[490,91,235,75,"options"],[490,98,235,43],[490,99],[494,0,235,20,"uri"],[494,16,235,20,"uri"],[494,19],[494,44,235,20,"uri"],[494,47],[495,0,235,25,"status"],[495,16,235,25,"status"],[495,22],[495,47,235,25,"status"],[495,53],[496,0,236,12,"_recorderExists"],[496,16,236,12,"_recorderExists"],[496,31,236,27],[496,34,236,30],[496,38,236,12],[497,0,237,12],[497,21,237,17,"_uri"],[497,25,237,12],[497,28,237,24,"uri"],[497,31,237,12],[498,0,238,12],[498,21,238,17,"_options"],[498,29,238,12],[498,32,238,28,"options"],[498,39,238,12],[499,0,239,12],[499,21,239,17,"_canRecord"],[499,31,239,12],[499,34,239,30],[499,38,239,12],[500,0,240,18,"currentStatus"],[500,16,240,18,"currentStatus"],[500,29],[500,50,240,39,"status"],[500,56],[501,0,240,47,"canRecord"],[501,18,240,47,"canRecord"],[501,27,240,56],[501,29,240,58],[504,0,241,12],[504,21,241,17,"_callOnRecordingStatusUpdateForNewStatus"],[504,61,241,12],[504,62,241,58,"currentStatus"],[504,75,241,12],[506,0,242,12],[506,21,242,17,"_enablePollingIfNecessaryAndPossible"],[506,57,242,12],[508,50,243,19,"currentStatus"],[508,63],[511,22,246,18],[511,26,246,22,"Error"],[511,31,246,18],[511,32,246,28],[511,86,246,18],[511,87],[527,50,250,15],[527,55,250,20,"_performOperationAndHandleStatusAsync"],[527,92,250,15],[527,93,250,58],[528,0,250,58],[528,25,250,64,"ExponentAV"],[528,45,250,75,"startAudioRecording"],[528,64,250,64],[528,66,250,58],[529,0,250,58],[529,17,250,15],[529,18],[545,50,253,15],[545,55,253,20,"_performOperationAndHandleStatusAsync"],[545,92,253,15],[545,93,253,58],[546,0,253,58],[546,25,253,64,"ExponentAV"],[546,45,253,75,"pauseAudioRecording"],[546,64,253,64],[546,66,253,58],[547,0,253,58],[547,17,253,15],[547,18],[564,20,256,13],[564,25,256,18,"_canRecord"],[564,35],[569,21,257,16],[569,26,257,21,"_isDoneRecording"],[569,42],[574,22,258,22],[574,26,258,26,"Error"],[574,31,258,22],[574,32,258,32],[574,91,258,22],[574,92],[577,22,261,22],[577,26,261,26,"Error"],[577,31,261,22],[577,32,261,32],[577,87,261,22],[577,88],[581,50,266,34,"ExponentAV"],[581,70,266,45,"stopAudioRecording"],[581,88,266,34],[581,90],[584,0,266,14,"finalStatus"],[584,16,266,14,"finalStatus"],[584,27],[586,50,267,14,"ExponentAV"],[586,70,267,25,"unloadAudioRecorder"],[586,89,267,14],[586,91],[589,51,268,15],[589,56,268,20,"_cleanupForUnloadedRecorder"],[589,83,268,15],[589,84,268,48,"finalStatus"],[589,95,268,15],[589,96],[600,31,271,13],[601,0,272,8],[601,15,272,15],[601,20,272,20,"_uri"],[601,24,272,8],[602,0,273,5],[613,0,274,31,"initialStatus"],[613,16,274,31,"initialStatus"],[613,29],[613,94,274,47],[613,96],[614,0,274,51,"onPlaybackStatusUpdate"],[614,16,274,51,"onPlaybackStatusUpdate"],[614,38],[614,103,274,76],[614,107],[615,0,275,8,"console"],[615,16,275,8,"console"],[615,23,275,15],[615,24,275,16,"warn"],[615,28,275,8],[616,51,276,15],[616,56,276,20,"createNewLoadedSoundAsync"],[616,81,276,15],[616,82,276,46,"initialStatus"],[616,95,276,15],[616,97,276,61,"onPlaybackStatusUpdate"],[616,119,276,15],[616,120],[635,0,278,36,"initialStatus"],[635,16,278,36,"initialStatus"],[635,29],[635,94,278,52],[635,96],[636,0,278,56,"onPlaybackStatusUpdate"],[636,16,278,56,"onPlaybackStatusUpdate"],[636,38],[636,103,278,81],[636,107],[638,22,279,12],[638,27,279,17,"_uri"],[638,31,279,12],[638,35,279,25],[638,39,279,12],[638,43,279,33],[638,44,279,34],[638,49,279,39,"_isDoneRecording"],[638,65],[643,22,280,18],[643,26,280,22,"Error"],[643,31,280,18],[643,32,280,28],[643,90,280,18],[643,91],[646,51,282,15,"Sound"],[646,64,282,21,"createAsync"],[646,75,282,15],[646,76,284,8],[647,0,284,10,"uri"],[647,18,284,10,"uri"],[647,21,284,13],[647,23,284,15],[647,28,284,20,"_uri"],[648,0,284,8],[648,17,282,15],[648,19,284,28,"initialStatus"],[648,32,282,15],[648,34,284,43,"onPlaybackStatusUpdate"],[648,56,282,15],[648,58,284,67],[648,63,282,15],[648,64]],"functionMap":{"names":["<global>","getPermissionsAsync","requestPermissionsAsync","Recording","constructor","_cleanupForUnloadedRecorder","_pollingLoop","getStatusAsync","_performOperationAndHandleStatusAsync$argument_0","_disablePolling","_enablePollingIfNecessaryAndPossible","_callOnRecordingStatusUpdateForNewStatus","_performOperationAndHandleStatusAsync","setOnRecordingStatusUpdate","setProgressUpdateInterval","prepareToRecordAsync","startAsync","pauseAsync","stopAndUnloadAsync","getURI","createNewLoadedSound","createNewLoadedSoundAsync"],"mappings":"AAA;OC8G;CDE;OEC;CFE;OGC;ICC;2CCW;SDY;4BEC;SFU;8BGG;kECG,0CD;SHU;KDC;IMC;KNK;IOC;KPK;IQC;KRI;ISC;KTU;IUC;KVS;IWC;KXG;IYE;KZmC;IaC;0DRC,sCQ;KbC;IcC;0DTC,sCS;KdC;IeC;Kfc;IgBE;KhBE;IiBC;KjBG;IkBC;KlBO;CHC"}},"type":"js/module"}]}