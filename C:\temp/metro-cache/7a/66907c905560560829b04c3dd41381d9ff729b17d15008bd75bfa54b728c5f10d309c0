{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"escape-string-regexp","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"escape-string-regexp\"));\n\n  var _queryString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"query-string\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } i = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return i.next.bind(i); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function getStateFromPath(path) {\n    var _ref;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (path === '') {\n      return undefined;\n    }\n\n    var initialRoutes = [];\n\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(options).map(function (key) {\n      return createNormalizedConfigs(key, options, [], initialRoutes);\n    })));\n\n    var result;\n    var current;\n    var remaining = path.replace(/[/]+/, '/').replace(/^\\//, '').replace(/\\?.*/, '');\n\n    while (remaining) {\n      var routeNames = void 0;\n      var params = void 0;\n\n      var _loop = function _loop(config) {\n        var match = remaining.match(config.match);\n\n        if (match) {\n          routeNames = (0, _toConsumableArray2.default)(config.routeNames);\n          var paramPatterns = config.pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          });\n\n          if (paramPatterns.length) {\n            params = paramPatterns.reduce(function (acc, p, i) {\n              var key = p.replace(/^:/, '');\n              var value = match[i + 1];\n              acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n              return acc;\n            }, {});\n          }\n\n          remaining = remaining.replace(match[0], '');\n          return \"break\";\n        }\n      };\n\n      for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n        var config = _step.value;\n\n        var _ret = _loop(config);\n\n        if (_ret === \"break\") break;\n      }\n\n      if (routeNames === undefined) {\n        var segments = remaining.split('/');\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      var state = void 0;\n\n      var _routeName = routeNames.shift();\n\n      var initialRoute = findInitialRoute(_routeName, initialRoutes);\n      state = createNestedState(initialRoute, _routeName, routeNames.length === 0, params);\n\n      if (routeNames.length > 0) {\n        var nestedState = state;\n\n        while (_routeName = routeNames.shift()) {\n          initialRoute = findInitialRoute(_routeName, initialRoutes);\n          nestedState.routes[nestedState.index || 0].state = createNestedState(initialRoute, _routeName, routeNames.length === 0, params);\n\n          if (routeNames.length > 0) {\n            nestedState = nestedState.routes[nestedState.index || 0].state;\n          }\n        }\n      }\n\n      if (current) {\n        var _current2;\n\n        while ((_current = current) == null ? void 0 : _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) == null ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n\n    if (current == null || result == null) {\n      return undefined;\n    }\n\n    var query = path.split('?')[1];\n\n    if (query) {\n      var _current4;\n\n      while ((_current3 = current) == null ? void 0 : _current3.routes[current.index || 0].state) {\n        var _current3;\n\n        current = current.routes[current.index || 0].state;\n      }\n\n      var route = current.routes[((_current4 = current) == null ? void 0 : _current4.index) || 0];\n\n      var _params = _queryString.default.parse(query);\n\n      var parseFunction = findParseConfigForRoute(route.name, configs);\n\n      if (parseFunction) {\n        Object.keys(_params).forEach(function (name) {\n          if (parseFunction[name] && typeof _params[name] === 'string') {\n            _params[name] = parseFunction[name](_params[name]);\n          }\n        });\n      }\n\n      route.params = _objectSpread({}, route.params, {}, _params);\n    }\n\n    return result;\n  }\n\n  function createNormalizedConfigs(key, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var configs = [];\n    routeNames.push(key);\n    var value = routeConfig[key];\n\n    if (typeof value === 'string') {\n      if (value !== '') {\n        configs.push(createConfigItem(routeNames, value));\n      }\n    } else if (typeof value === 'object') {\n      if (value.path && value.path !== '') {\n        configs.push(createConfigItem(routeNames, value.path, value.parse));\n      }\n\n      if (value.screens) {\n        if (value.initialRouteName) {\n          initials.push({\n            initialRouteName: value.initialRouteName,\n            connectedRoutes: Object.keys(value.screens)\n          });\n        }\n\n        Object.keys(value.screens).forEach(function (nestedConfig) {\n          var result = createNormalizedConfigs(nestedConfig, value.screens, routeNames, initials);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n\n    routeNames.pop();\n    return configs;\n  }\n\n  function createConfigItem(routeNames, pattern, parse) {\n    var match = new RegExp('^' + (0, _escapeStringRegexp.default)(pattern).replace(/:[a-z0-9]+/gi, '([^/]+)') + '/?');\n    return {\n      match: match,\n      pattern: pattern,\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  }\n\n  function findParseConfigForRoute(routeName, flatConfig) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n      var config = _step2.value;\n\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n\n    return undefined;\n  }\n\n  function findInitialRoute(routeName, initialRoutes) {\n    for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n      var config = _step3.value;\n\n      if (config.connectedRoutes.includes(routeName)) {\n        return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n      }\n    }\n\n    return undefined;\n  }\n\n  function createNestedState(initialRoute, routeName, isEmpty, params) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, _objectSpread({\n            name: routeName\n          }, params && {\n            params: params\n          })]\n        };\n      } else {\n        return {\n          routes: [_objectSpread({\n            name: routeName\n          }, params && {\n            params: params\n          })]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            name: routeName,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            name: routeName,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  }\n});","lineCount":276,"map":[[13,0,1,0],[15,0,2,0],[27,0,57,15],[27,11,57,24,"getStateFromPath"],[27,27,57,15],[27,28,58,2,"path"],[27,32,57,15],[27,34,60,27],[28,0,60,27],[30,0,60,27],[30,8,59,2,"options"],[30,15,60,27],[30,86,59,21],[30,88,60,27],[32,0,61,2],[32,8,61,6,"path"],[32,12,61,10],[32,17,61,15],[32,19,61,2],[32,21,61,19],[33,0,62,4],[33,13,62,11,"undefined"],[33,22,62,4],[34,0,63,3],[36,0,64,2],[36,8,64,6,"initialRoutes"],[36,21,64,41],[36,24,64,44],[36,26,64,2],[38,0,66,2],[38,8,66,8,"configs"],[38,15,66,15],[38,18,66,18],[38,26,66,19],[38,28,66,18],[38,30,66,40,"concat"],[38,36,66,18],[38,82,67,7,"Object"],[38,88,67,13],[38,89,67,14,"keys"],[38,93,67,7],[38,94,67,19,"options"],[38,101,67,7],[38,103,67,28,"map"],[38,106,67,7],[38,107,67,32],[38,117,67,33,"key"],[38,120,67,32],[39,0,67,32],[39,13,68,6,"createNormalizedConfigs"],[39,36,68,29],[39,37,68,30,"key"],[39,40,68,29],[39,42,68,35,"options"],[39,49,68,29],[39,51,68,44],[39,53,68,29],[39,55,68,48,"initialRoutes"],[39,68,68,29],[39,69,67,32],[40,0,67,32],[40,5,67,7],[40,6,66,18],[40,8,66,2],[42,0,72,2],[42,8,72,6,"result"],[42,14,72,2],[43,0,73,2],[43,8,73,6,"current"],[43,15,73,2],[44,0,75,2],[44,8,75,6,"remaining"],[44,17,75,15],[44,20,75,18,"path"],[44,24,75,22],[44,25,76,5,"replace"],[44,32,75,18],[44,33,76,13],[44,39,75,18],[44,41,76,21],[44,44,75,18],[44,46,77,5,"replace"],[44,53,75,18],[44,54,77,13],[44,59,75,18],[44,61,77,20],[44,63,75,18],[44,65,78,5,"replace"],[44,72,75,18],[44,73,78,13],[44,79,75,18],[44,81,78,21],[44,83,75,18],[44,84,75,2],[46,0,80,2],[46,11,80,9,"remaining"],[46,20,80,2],[46,22,80,20],[47,0,81,4],[47,10,81,8,"routeNames"],[47,20,81,40],[47,29,81,4],[48,0,82,4],[48,10,82,8,"params"],[48,16,82,47],[48,25,82,4],[50,0,80,20],[50,33,85,15,"config"],[50,39,80,20],[51,0,86,6],[51,12,86,12,"match"],[51,17,86,17],[51,20,86,20,"remaining"],[51,29,86,29],[51,30,86,30,"match"],[51,35,86,20],[51,36,86,36,"config"],[51,42,86,42],[51,43,86,43,"match"],[51,48,86,20],[51,49,86,6],[53,0,89,6],[53,12,89,10,"match"],[53,17,89,6],[53,19,89,17],[54,0,90,8,"routeNames"],[54,10,90,8,"routeNames"],[54,20,90,18],[54,56,90,25,"config"],[54,62,90,31],[54,63,90,32,"routeNames"],[54,73,90,18],[54,74,90,8],[55,0,92,8],[55,14,92,14,"paramPatterns"],[55,27,92,27],[55,30,92,30,"config"],[55,36,92,36],[55,37,92,37,"pattern"],[55,44,92,30],[55,45,93,11,"split"],[55,50,92,30],[55,51,93,17],[55,54,92,30],[55,56,94,11,"filter"],[55,62,92,30],[55,63,94,18],[55,73,94,19,"p"],[55,74,94,18],[56,0,94,18],[56,19,94,25,"p"],[56,20,94,26],[56,21,94,27,"startsWith"],[56,31,94,25],[56,32,94,38],[56,35,94,25],[56,36,94,18],[57,0,94,18],[57,11,92,30],[57,12,92,8],[59,0,96,8],[59,14,96,12,"paramPatterns"],[59,27,96,25],[59,28,96,26,"length"],[59,34,96,8],[59,36,96,34],[60,0,97,10,"params"],[60,12,97,10,"params"],[60,18,97,16],[60,21,97,19,"paramPatterns"],[60,34,97,32],[60,35,97,33,"reduce"],[60,41,97,19],[60,42,97,61],[60,52,97,62,"acc"],[60,55,97,61],[60,57,97,67,"p"],[60,58,97,61],[60,60,97,70,"i"],[60,61,97,61],[60,63,97,76],[61,0,98,12],[61,18,98,18,"key"],[61,21,98,21],[61,24,98,24,"p"],[61,25,98,25],[61,26,98,26,"replace"],[61,33,98,24],[61,34,98,34],[61,38,98,24],[61,40,98,40],[61,42,98,24],[61,43,98,12],[62,0,99,12],[62,18,99,18,"value"],[62,23,99,23],[62,26,99,26,"match"],[62,31,99,31],[62,32,99,32,"i"],[62,33,99,33],[62,36,99,36],[62,37,99,31],[62,38,99,12],[63,0,101,12,"acc"],[63,14,101,12,"acc"],[63,17,101,15],[63,18,101,16,"key"],[63,21,101,15],[63,22,101,12],[63,25,102,14,"config"],[63,31,102,20],[63,32,102,21,"parse"],[63,37,102,14],[63,41,102,30,"config"],[63,47,102,36],[63,48,102,37,"parse"],[63,53,102,30],[63,54,102,43,"key"],[63,57,102,30],[63,58,102,14],[63,61,103,18,"config"],[63,67,103,24],[63,68,103,25,"parse"],[63,73,103,18],[63,74,103,31,"key"],[63,77,103,18],[63,79,103,36,"value"],[63,84,103,18],[63,85,102,14],[63,88,104,18,"value"],[63,93,101,12],[64,0,106,12],[64,21,106,19,"acc"],[64,24,106,12],[65,0,107,11],[65,13,97,19],[65,15,107,13],[65,17,97,19],[65,18,97,10],[66,0,108,9],[68,0,111,8,"remaining"],[68,10,111,8,"remaining"],[68,19,111,17],[68,22,111,20,"remaining"],[68,31,111,29],[68,32,111,30,"replace"],[68,39,111,20],[68,40,111,38,"match"],[68,45,111,43],[68,46,111,44],[68,47,111,43],[68,48,111,20],[68,50,111,48],[68,52,111,20],[68,53,111,8],[69,0,113,8],[70,0,114,7],[71,0,80,20],[73,0,85,4],[73,59,85,25,"configs"],[73,66,85,4],[73,106,85,34],[74,0,85,34],[74,12,85,15,"config"],[74,18,85,34],[76,0,85,34],[76,25,85,15,"config"],[76,31,85,34],[78,0,85,34],[78,30,113,8],[79,0,115,5],[81,0,118,4],[81,10,118,8,"routeNames"],[81,20,118,18],[81,25,118,23,"undefined"],[81,34,118,4],[81,36,118,34],[82,0,119,6],[82,12,119,12,"segments"],[82,20,119,20],[82,23,119,23,"remaining"],[82,32,119,32],[82,33,119,33,"split"],[82,38,119,23],[82,39,119,39],[82,42,119,23],[82,43,119,6],[83,0,121,6,"routeNames"],[83,8,121,6,"routeNames"],[83,18,121,16],[83,21,121,19],[83,22,121,20,"decodeURIComponent"],[83,40,121,38],[83,41,121,39,"segments"],[83,49,121,47],[83,50,121,48],[83,51,121,47],[83,52,121,38],[83,53,121,19],[83,54,121,6],[84,0,122,6,"segments"],[84,8,122,6,"segments"],[84,16,122,14],[84,17,122,15,"shift"],[84,22,122,6],[85,0,123,6,"remaining"],[85,8,123,6,"remaining"],[85,17,123,15],[85,20,123,18,"segments"],[85,28,123,26],[85,29,123,27,"join"],[85,33,123,18],[85,34,123,32],[85,37,123,18],[85,38,123,6],[86,0,124,5],[88,0,126,4],[88,10,126,8,"state"],[88,15,126,27],[88,24,126,4],[90,0,127,4],[90,10,127,8,"routeName"],[90,20,127,17],[90,23,127,20,"routeNames"],[90,33,127,30],[90,34,127,31,"shift"],[90,39,127,20],[90,41,127,4],[92,0,128,4],[92,10,128,8,"initialRoute"],[92,22,128,20],[92,25,128,23,"findInitialRoute"],[92,41,128,39],[92,42,128,40,"routeName"],[92,52,128,39],[92,54,128,51,"initialRoutes"],[92,67,128,39],[92,68,128,4],[93,0,130,4,"state"],[93,6,130,4,"state"],[93,11,130,9],[93,14,130,12,"createNestedState"],[93,31,130,29],[93,32,131,6,"initialRoute"],[93,44,130,29],[93,46,132,6,"routeName"],[93,56,130,29],[93,58,133,6,"routeNames"],[93,68,133,16],[93,69,133,17,"length"],[93,75,133,6],[93,80,133,28],[93,81,130,29],[93,83,134,6,"params"],[93,89,130,29],[93,90,130,4],[95,0,137,4],[95,10,137,8,"routeNames"],[95,20,137,18],[95,21,137,19,"length"],[95,27,137,8],[95,30,137,28],[95,31,137,4],[95,33,137,31],[96,0,138,6],[96,12,138,10,"nestedState"],[96,23,138,21],[96,26,138,24,"state"],[96,31,138,6],[98,0,140,6],[98,15,140,14,"routeName"],[98,25,140,23],[98,28,140,26,"routeNames"],[98,38,140,36],[98,39,140,37,"shift"],[98,44,140,26],[98,46,140,6],[98,48,140,57],[99,0,141,8,"initialRoute"],[99,10,141,8,"initialRoute"],[99,22,141,20],[99,25,141,23,"findInitialRoute"],[99,41,141,39],[99,42,141,40,"routeName"],[99,52,141,39],[99,54,141,51,"initialRoutes"],[99,67,141,39],[99,68,141,8],[100,0,142,8,"nestedState"],[100,10,142,8,"nestedState"],[100,21,142,19],[100,22,142,20,"routes"],[100,28,142,8],[100,29,142,27,"nestedState"],[100,40,142,38],[100,41,142,39,"index"],[100,46,142,27],[100,50,142,48],[100,51,142,8],[100,53,142,51,"state"],[100,58,142,8],[100,61,142,59,"createNestedState"],[100,78,142,76],[100,79,143,10,"initialRoute"],[100,91,142,76],[100,93,144,10,"routeName"],[100,103,142,76],[100,105,145,10,"routeNames"],[100,115,145,20],[100,116,145,21,"length"],[100,122,145,10],[100,127,145,32],[100,128,142,76],[100,130,146,10,"params"],[100,136,142,76],[100,137,142,8],[102,0,148,8],[102,14,148,12,"routeNames"],[102,24,148,22],[102,25,148,23,"length"],[102,31,148,12],[102,34,148,32],[102,35,148,8],[102,37,148,35],[103,0,149,10,"nestedState"],[103,12,149,10,"nestedState"],[103,23,149,21],[103,26,149,24,"nestedState"],[103,37,149,35],[103,38,149,36,"routes"],[103,44,149,24],[103,45,149,43,"nestedState"],[103,56,149,54],[103,57,149,55,"index"],[103,62,149,43],[103,66,149,64],[103,67,149,24],[103,69,150,13,"state"],[103,74,149,10],[104,0,151,9],[105,0,152,7],[106,0,153,5],[108,0,155,4],[108,10,155,8,"current"],[108,17,155,4],[108,19,155,17],[109,0,155,17],[111,0,157,6],[111,27,157,13,"current"],[111,34,157,6],[111,55,157,13],[111,64,157,22,"routes"],[111,70,157,13],[111,71,157,29,"current"],[111,78,157,36],[111,79,157,37,"index"],[111,84,157,29],[111,88,157,46],[111,89,157,13],[111,91,157,49,"state"],[111,96,157,6],[111,98,157,56],[112,0,157,56],[114,0,158,8,"current"],[114,10,158,8,"current"],[114,17,158,15],[114,20,158,18,"current"],[114,27,158,25],[114,28,158,26,"routes"],[114,34,158,18],[114,35,158,33,"current"],[114,42,158,40],[114,43,158,41,"index"],[114,48,158,33],[114,52,158,50],[114,53,158,18],[114,55,158,53,"state"],[114,60,158,8],[115,0,159,7],[117,0,161,7,"current"],[117,8,161,7,"current"],[117,15,161,6],[117,16,161,49,"routes"],[117,22,161,6],[117,23,162,8],[117,37,162,8,"current"],[117,44,162,15],[117,53,162,8],[117,75,162,17,"index"],[117,80,162,8],[117,85,162,26],[117,86,161,6],[117,88,163,8,"state"],[117,93,161,6],[117,96,163,16,"state"],[117,101,161,6],[118,0,164,5],[118,7,155,4],[118,13,164,11],[119,0,165,6,"result"],[119,8,165,6,"result"],[119,14,165,12],[119,17,165,15,"state"],[119,22,165,6],[120,0,166,5],[122,0,168,4,"current"],[122,6,168,4,"current"],[122,13,168,11],[122,16,168,14,"state"],[122,21,168,4],[123,0,169,3],[125,0,171,2],[125,8,171,6,"current"],[125,15,171,13],[125,19,171,17],[125,23,171,6],[125,27,171,25,"result"],[125,33,171,31],[125,37,171,35],[125,41,171,2],[125,43,171,41],[126,0,172,4],[126,13,172,11,"undefined"],[126,22,172,4],[127,0,173,3],[129,0,175,2],[129,8,175,8,"query"],[129,13,175,13],[129,16,175,16,"path"],[129,20,175,20],[129,21,175,21,"split"],[129,26,175,16],[129,27,175,27],[129,30,175,16],[129,32,175,32],[129,33,175,16],[129,34,175,2],[131,0,177,2],[131,8,177,6,"query"],[131,13,177,2],[131,15,177,13],[132,0,177,13],[134,0,178,4],[134,26,178,11,"current"],[134,33,178,4],[134,54,178,11],[134,64,178,20,"routes"],[134,70,178,11],[134,71,178,27,"current"],[134,78,178,34],[134,79,178,35,"index"],[134,84,178,27],[134,88,178,44],[134,89,178,11],[134,91,178,47,"state"],[134,96,178,4],[134,98,178,54],[135,0,178,54],[137,0,180,6,"current"],[137,8,180,6,"current"],[137,15,180,13],[137,18,180,16,"current"],[137,25,180,23],[137,26,180,24,"routes"],[137,32,180,16],[137,33,180,31,"current"],[137,40,180,38],[137,41,180,39,"index"],[137,46,180,31],[137,50,180,48],[137,51,180,16],[137,53,180,51,"state"],[137,58,180,6],[138,0,181,5],[140,0,183,4],[140,10,183,10,"route"],[140,15,183,15],[140,18,183,19,"current"],[140,25,183,18],[140,26,183,61,"routes"],[140,32,183,18],[140,33,184,6],[140,47,184,6,"current"],[140,54,184,13],[140,63,184,6],[140,85,184,15,"index"],[140,90,184,6],[140,95,184,24],[140,96,183,18],[140,97,183,4],[142,0,187,4],[142,10,187,10,"params"],[142,17,187,16],[142,20,187,19,"queryString"],[142,41,187,31,"parse"],[142,46,187,19],[142,47,187,37,"query"],[142,52,187,19],[142,53,187,4],[144,0,188,4],[144,10,188,10,"parseFunction"],[144,23,188,23],[144,26,188,26,"findParseConfigForRoute"],[144,49,188,49],[144,50,188,50,"route"],[144,55,188,55],[144,56,188,56,"name"],[144,60,188,49],[144,62,188,62,"configs"],[144,69,188,49],[144,70,188,4],[146,0,190,4],[146,10,190,8,"parseFunction"],[146,23,190,4],[146,25,190,23],[147,0,191,6,"Object"],[147,8,191,6,"Object"],[147,14,191,12],[147,15,191,13,"keys"],[147,19,191,6],[147,20,191,18,"params"],[147,27,191,6],[147,29,191,26,"forEach"],[147,36,191,6],[147,37,191,34],[147,47,191,35,"name"],[147,51,191,34],[147,53,191,44],[148,0,192,8],[148,14,192,12,"parseFunction"],[148,27,192,25],[148,28,192,26,"name"],[148,32,192,25],[148,33,192,12],[148,37,192,35],[148,44,192,42,"params"],[148,51,192,48],[148,52,192,49,"name"],[148,56,192,48],[148,57,192,35],[148,62,192,59],[148,70,192,8],[148,72,192,69],[149,0,193,10,"params"],[149,12,193,10,"params"],[149,19,193,16],[149,20,193,17,"name"],[149,24,193,16],[149,25,193,10],[149,28,193,25,"parseFunction"],[149,41,193,38],[149,42,193,39,"name"],[149,46,193,38],[149,47,193,25],[149,48,193,45,"params"],[149,55,193,51],[149,56,193,52,"name"],[149,60,193,51],[149,61,193,25],[149,62,193,10],[150,0,194,9],[151,0,195,7],[151,9,191,6],[152,0,196,5],[154,0,198,4,"route"],[154,6,198,4,"route"],[154,11,198,9],[154,12,198,10,"params"],[154,18,198,4],[154,39,198,24,"route"],[154,44,198,29],[154,45,198,30,"params"],[154,51,198,4],[154,57,198,41,"params"],[154,64,198,4],[155,0,199,3],[157,0,201,2],[157,11,201,9,"result"],[157,17,201,2],[158,0,202,1],[160,0,204,0],[160,11,204,9,"createNormalizedConfigs"],[160,34,204,0],[160,35,205,2,"key"],[160,38,204,0],[160,40,206,2,"routeConfig"],[160,51,204,0],[160,53,209,17],[161,0,209,17],[161,8,207,2,"routeNames"],[161,18,209,17],[161,89,207,25],[161,91,209,17],[162,0,209,17],[162,8,208,2,"initials"],[162,16,209,17],[163,0,210,2],[163,8,210,8,"configs"],[163,15,210,30],[163,18,210,33],[163,20,210,2],[164,0,212,2,"routeNames"],[164,4,212,2,"routeNames"],[164,14,212,12],[164,15,212,13,"push"],[164,19,212,2],[164,20,212,18,"key"],[164,23,212,2],[165,0,214,2],[165,8,214,8,"value"],[165,13,214,13],[165,16,214,16,"routeConfig"],[165,27,214,27],[165,28,214,28,"key"],[165,31,214,27],[165,32,214,2],[167,0,216,2],[167,8,216,6],[167,15,216,13,"value"],[167,20,216,6],[167,25,216,23],[167,33,216,2],[167,35,216,33],[168,0,218,4],[168,10,218,8,"value"],[168,15,218,13],[168,20,218,18],[168,22,218,4],[168,24,218,22],[169,0,219,6,"configs"],[169,8,219,6,"configs"],[169,15,219,13],[169,16,219,14,"push"],[169,20,219,6],[169,21,219,19,"createConfigItem"],[169,37,219,35],[169,38,219,36,"routeNames"],[169,48,219,35],[169,50,219,48,"value"],[169,55,219,35],[169,56,219,6],[170,0,220,5],[171,0,221,3],[171,5,216,2],[171,11,221,9],[171,15,221,13],[171,22,221,20,"value"],[171,27,221,13],[171,32,221,30],[171,40,221,9],[171,42,221,40],[172,0,225,4],[172,10,225,8,"value"],[172,15,225,13],[172,16,225,14,"path"],[172,20,225,8],[172,24,225,22,"value"],[172,29,225,27],[172,30,225,28,"path"],[172,34,225,22],[172,39,225,37],[172,41,225,4],[172,43,225,41],[173,0,226,6,"configs"],[173,8,226,6,"configs"],[173,15,226,13],[173,16,226,14,"push"],[173,20,226,6],[173,21,226,19,"createConfigItem"],[173,37,226,35],[173,38,226,36,"routeNames"],[173,48,226,35],[173,50,226,48,"value"],[173,55,226,53],[173,56,226,54,"path"],[173,60,226,35],[173,62,226,60,"value"],[173,67,226,65],[173,68,226,66,"parse"],[173,73,226,35],[173,74,226,6],[174,0,227,5],[176,0,228,4],[176,10,228,8,"value"],[176,15,228,13],[176,16,228,14,"screens"],[176,23,228,4],[176,25,228,23],[177,0,230,6],[177,12,230,10,"value"],[177,17,230,15],[177,18,230,16,"initialRouteName"],[177,34,230,6],[177,36,230,34],[178,0,231,8,"initials"],[178,10,231,8,"initials"],[178,18,231,16],[178,19,231,17,"push"],[178,23,231,8],[178,24,231,22],[179,0,232,10,"initialRouteName"],[179,12,232,10,"initialRouteName"],[179,28,232,26],[179,30,232,28,"value"],[179,35,232,33],[179,36,232,34,"initialRouteName"],[179,52,231,22],[180,0,233,10,"connectedRoutes"],[180,12,233,10,"connectedRoutes"],[180,27,233,25],[180,29,233,27,"Object"],[180,35,233,33],[180,36,233,34,"keys"],[180,40,233,27],[180,41,233,39,"value"],[180,46,233,44],[180,47,233,45,"screens"],[180,54,233,27],[181,0,231,22],[181,11,231,8],[182,0,235,7],[184,0,236,6,"Object"],[184,8,236,6,"Object"],[184,14,236,12],[184,15,236,13,"keys"],[184,19,236,6],[184,20,236,18,"value"],[184,25,236,23],[184,26,236,24,"screens"],[184,33,236,6],[184,35,236,33,"forEach"],[184,42,236,6],[184,43,236,41],[184,53,236,42,"nestedConfig"],[184,65,236,41],[184,67,236,59],[185,0,237,8],[185,14,237,14,"result"],[185,20,237,20],[185,23,237,23,"createNormalizedConfigs"],[185,46,237,46],[185,47,238,10,"nestedConfig"],[185,59,237,46],[185,61,239,10,"value"],[185,66,239,15],[185,67,239,16,"screens"],[185,74,237,46],[185,76,240,10,"routeNames"],[185,86,237,46],[185,88,241,10,"initials"],[185,96,237,46],[185,97,237,8],[186,0,243,8,"configs"],[186,10,243,8,"configs"],[186,17,243,15],[186,18,243,16,"push"],[186,22,243,8],[186,29,243,8,"configs"],[186,36,243,15],[186,71,243,24,"result"],[186,77,243,15],[186,79,243,8],[187,0,244,7],[187,9,236,6],[188,0,245,5],[189,0,246,3],[191,0,248,2,"routeNames"],[191,4,248,2,"routeNames"],[191,14,248,12],[191,15,248,13,"pop"],[191,18,248,2],[192,0,250,2],[192,11,250,9,"configs"],[192,18,250,2],[193,0,251,1],[195,0,253,0],[195,11,253,9,"createConfigItem"],[195,27,253,0],[195,28,254,2,"routeNames"],[195,38,253,0],[195,40,255,2,"pattern"],[195,47,253,0],[195,49,256,2,"parse"],[195,54,253,0],[195,56,257,15],[196,0,258,2],[196,8,258,8,"match"],[196,13,258,13],[196,16,258,16],[196,20,258,20,"RegExp"],[196,26,258,16],[196,27,259,4],[196,33,259,10],[196,66,259,17,"pattern"],[196,73,259,10],[196,75,259,26,"replace"],[196,82,259,10],[196,83,259,34],[196,97,259,10],[196,99,259,50],[196,108,259,10],[196,109,259,4],[196,112,259,63],[196,116,258,16],[196,117,258,2],[197,0,262,2],[197,11,262,9],[198,0,263,4,"match"],[198,6,263,4,"match"],[198,11,263,9],[198,13,263,4,"match"],[198,18,262,9],[199,0,264,4,"pattern"],[199,6,264,4,"pattern"],[199,13,264,11],[199,15,264,4,"pattern"],[199,22,262,9],[200,0,266,4,"routeNames"],[200,6,266,4,"routeNames"],[200,16,266,14],[200,51,266,20,"routeNames"],[200,61,266,14],[200,62,262,9],[201,0,267,4,"parse"],[201,6,267,4,"parse"],[201,11,267,9],[201,13,267,4,"parse"],[202,0,262,9],[202,5,262,2],[203,0,269,1],[205,0,271,0],[205,11,271,9,"findParseConfigForRoute"],[205,34,271,0],[205,35,272,2,"routeName"],[205,44,271,0],[205,46,273,2,"flatConfig"],[205,56,271,0],[205,58,274,27],[206,0,275,2],[206,58,275,23,"flatConfig"],[206,68,275,2],[206,111,275,35],[207,0,275,35],[207,10,275,13,"config"],[207,16,275,35],[209,0,276,4],[209,10,276,8,"routeName"],[209,19,276,17],[209,24,276,22,"config"],[209,30,276,28],[209,31,276,29,"routeNames"],[209,41,276,22],[209,42,276,40,"config"],[209,48,276,46],[209,49,276,47,"routeNames"],[209,59,276,40],[209,60,276,58,"length"],[209,66,276,40],[209,69,276,67],[209,70,276,22],[209,71,276,4],[209,73,276,71],[210,0,277,6],[210,15,277,13,"config"],[210,21,277,19],[210,22,277,20,"parse"],[210,27,277,6],[211,0,278,5],[212,0,279,3],[214,0,280,2],[214,11,280,9,"undefined"],[214,20,280,2],[215,0,281,1],[217,0,284,0],[217,11,284,9,"findInitialRoute"],[217,27,284,0],[217,28,285,2,"routeName"],[217,37,284,0],[217,39,286,2,"initialRoutes"],[217,52,284,0],[217,54,287,22],[218,0,288,2],[218,58,288,23,"initialRoutes"],[218,71,288,2],[218,114,288,38],[219,0,288,38],[219,10,288,13,"config"],[219,16,288,38],[221,0,289,4],[221,10,289,8,"config"],[221,16,289,14],[221,17,289,15,"connectedRoutes"],[221,32,289,8],[221,33,289,31,"includes"],[221,41,289,8],[221,42,289,40,"routeName"],[221,51,289,8],[221,52,289,4],[221,54,289,52],[222,0,290,6],[222,15,290,13,"config"],[222,21,290,19],[222,22,290,20,"initialRouteName"],[222,38,290,13],[222,43,290,41,"routeName"],[222,52,290,13],[222,55,291,10,"undefined"],[222,64,290,13],[222,67,292,10,"config"],[222,73,292,16],[222,74,292,17,"initialRouteName"],[222,90,290,6],[223,0,293,5],[224,0,294,3],[226,0,295,2],[226,11,295,9,"undefined"],[226,20,295,2],[227,0,296,1],[229,0,300,0],[229,11,300,9,"createNestedState"],[229,28,300,0],[229,29,301,2,"initialRoute"],[229,41,300,0],[229,43,302,2,"routeName"],[229,52,300,0],[229,54,303,2,"isEmpty"],[229,61,300,0],[229,63,304,2,"params"],[229,69,300,0],[229,71,305,16],[230,0,306,2],[230,8,306,6,"isEmpty"],[230,15,306,2],[230,17,306,15],[231,0,307,4],[231,10,307,8,"initialRoute"],[231,22,307,4],[231,24,307,22],[232,0,308,6],[232,15,308,13],[233,0,309,8,"index"],[233,10,309,8,"index"],[233,15,309,13],[233,17,309,15],[233,18,308,13],[234,0,310,8,"routes"],[234,10,310,8,"routes"],[234,16,310,14],[234,18,310,16],[234,19,311,10],[235,0,311,12,"name"],[235,12,311,12,"name"],[235,16,311,16],[235,18,311,18,"initialRoute"],[236,0,311,10],[236,11,310,16],[237,0,312,12,"name"],[237,12,312,12,"name"],[237,16,312,16],[237,18,312,18,"routeName"],[238,0,310,16],[238,13,312,43,"params"],[238,19,312,49],[238,23,312,53],[239,0,312,55,"params"],[239,12,312,55,"params"],[239,18,312,61],[239,20,312,55,"params"],[240,0,312,53],[240,11,310,16],[241,0,308,13],[241,9,308,6],[242,0,315,5],[242,7,307,4],[242,13,315,11],[243,0,316,6],[243,15,316,13],[244,0,317,8,"routes"],[244,10,317,8,"routes"],[244,16,317,14],[244,18,317,16],[245,0,317,19,"name"],[245,12,317,19,"name"],[245,16,317,23],[245,18,317,25,"routeName"],[246,0,317,16],[246,13,317,50,"params"],[246,19,317,56],[246,23,317,60],[247,0,317,62,"params"],[247,12,317,62,"params"],[247,18,317,68],[247,20,317,62,"params"],[248,0,317,60],[248,11,317,16],[249,0,316,13],[249,9,316,6],[250,0,319,5],[251,0,320,3],[251,5,306,2],[251,11,320,9],[252,0,321,4],[252,10,321,8,"initialRoute"],[252,22,321,4],[252,24,321,22],[253,0,322,6],[253,15,322,13],[254,0,323,8,"index"],[254,10,323,8,"index"],[254,15,323,13],[254,17,323,15],[254,18,322,13],[255,0,324,8,"routes"],[255,10,324,8,"routes"],[255,16,324,14],[255,18,324,16],[255,19,325,10],[256,0,325,12,"name"],[256,12,325,12,"name"],[256,16,325,16],[256,18,325,18,"initialRoute"],[257,0,325,10],[257,11,324,16],[257,13,326,10],[258,0,326,12,"name"],[258,12,326,12,"name"],[258,16,326,16],[258,18,326,18,"routeName"],[258,27,326,10],[259,0,326,39,"state"],[259,12,326,39,"state"],[259,17,326,44],[259,19,326,46],[260,0,326,48,"routes"],[260,14,326,48,"routes"],[260,20,326,54],[260,22,326,56],[261,0,326,46],[262,0,326,10],[262,11,324,16],[263,0,322,13],[263,9,322,6],[264,0,329,5],[264,7,321,4],[264,13,329,11],[265,0,330,6],[265,15,330,13],[266,0,330,15,"routes"],[266,10,330,15,"routes"],[266,16,330,21],[266,18,330,23],[266,19,330,24],[267,0,330,26,"name"],[267,12,330,26,"name"],[267,16,330,30],[267,18,330,32,"routeName"],[267,27,330,24],[268,0,330,53,"state"],[268,12,330,53,"state"],[268,17,330,58],[268,19,330,60],[269,0,330,62,"routes"],[269,14,330,62,"routes"],[269,20,330,68],[269,22,330,70],[270,0,330,60],[271,0,330,24],[271,11,330,23],[272,0,330,13],[272,9,330,6],[273,0,331,5],[274,0,332,3],[275,0,333,1]],"functionMap":{"names":["<global>","getStateFromPath","Object.keys.map$argument_0","config.pattern.split.filter$argument_0","paramPatterns.reduce$argument_0","Object.keys.forEach$argument_0","createNormalizedConfigs","createConfigItem","findParseConfigForRoute","findInitialRoute","createNestedState"],"mappings":"AAA;eCwD;gCCU;8DDC;kBE0B,wBF;6DGG;WHU;kCIoF;OJI;CDO;AME;yCDgC;OCQ;CNO;AOE;CPgB;AQE;CRU;ASG;CTY;AUI;CViC"}},"type":"js/module"}]}