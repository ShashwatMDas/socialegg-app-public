{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"./ExpoFontLoader","data":{"isAsync":false}},{"name":"./Font.types","data":{"isAsync":false}},{"name":"./FontLoader","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.processFontFamily = processFontFamily;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function get() {\n      return _Font.FontDisplay;\n    }\n  });\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoFontLoader\"));\n\n  var _Font = _$$_REQUIRE(_dependencyMap[4], \"./Font.types\");\n\n  var _FontLoader = _$$_REQUIRE(_dependencyMap[5], \"./FontLoader\");\n\n  var loaded = {};\n  var loadPromises = {};\n\n  function processFontFamily(fontFamily) {\n    if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n      return fontFamily;\n    }\n\n    if (!isLoaded(fontFamily)) {\n      if (__DEV__) {\n        if (isLoading(fontFamily)) {\n          console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");\n        } else {\n          console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n        }\n      }\n\n      return 'System';\n    }\n\n    return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n  }\n\n  function isLoaded(fontFamily) {\n    return fontFamily in loaded;\n  }\n\n  function isLoading(fontFamily) {\n    return fontFamily in loadPromises;\n  }\n\n  function loadAsync(fontFamilyOrFontMap, source) {\n    var fontMap, names;\n    return _regenerator.default.async(function loadAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!source) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 3:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context.next = 7;\n            return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n              return loadFontInNamespaceAsync(name, fontMap[name]);\n            })));\n\n          case 7:\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return _regenerator.default.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function loadFontInNamespaceAsync(fontFamily, source) {\n    var asset;\n    return _regenerator.default.async(function loadFontInNamespaceAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (source) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n          case 2:\n            if (!loaded[fontFamily]) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (!loadPromises[fontFamily]) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n          case 6:\n            asset = (0, _FontLoader.getAssetForSource)(source);\n\n            loadPromises[fontFamily] = function _callee() {\n              return _regenerator.default.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      _context2.next = 3;\n                      return _regenerator.default.awrap((0, _FontLoader.loadSingleFontAsync)(fontFamily, asset));\n\n                    case 3:\n                      loaded[fontFamily] = true;\n\n                    case 4:\n                      _context2.prev = 4;\n                      delete loadPromises[fontFamily];\n                      return _context2.finish(4);\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, [[0,, 4, 7]], Promise);\n            }();\n\n            _context3.next = 10;\n            return _regenerator.default.awrap(loadPromises[fontFamily]);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadAllAsync() {\n    var _i, _Object$keys, fontFamily;\n\n    return _regenerator.default.async(function unloadAllAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAllAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-font', 'unloadAllAsync');\n\n          case 2:\n            if (!Object.keys(loadPromises).length) {\n              _context4.next = 4;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n          case 4:\n            for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n              fontFamily = _Object$keys[_i];\n              delete loaded[fontFamily];\n            }\n\n            _context4.next = 7;\n            return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAllAsync());\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadAsync(fontFamilyOrFontMap, options) {\n    var fontMap, names;\n    return _regenerator.default.async(function unloadAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-font', 'unloadAsync');\n\n          case 2:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context5.next = 10;\n              break;\n            }\n\n            if (!options) {\n              _context5.next = 5;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 5:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context5.next = 9;\n            return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n              return unloadFontInNamespaceAsync(name, fontMap[name]);\n            })));\n\n          case 9:\n            return _context5.abrupt(\"return\");\n\n          case 10:\n            _context5.next = 12;\n            return _regenerator.default.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n\n          case 12:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadFontInNamespaceAsync(fontFamily, options) {\n    var nativeFontName;\n    return _regenerator.default.async(function unloadFontInNamespaceAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (loaded[fontFamily]) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 4:\n            delete loaded[fontFamily];\n\n          case 5:\n            nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n\n            if (nativeFontName) {\n              _context6.next = 8;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n          case 8:\n            _context6.next = 10;\n            return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAsync(nativeFontName, options));\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});","lineCount":301,"map":[[22,0,1,0],[24,0,2,0],[26,0,3,0],[28,0,4,0],[30,0,5,0],[30,6,5,6,"loaded"],[30,12,5,12],[30,15,5,15],[30,17,5,0],[31,0,6,0],[31,6,6,6,"loadPromises"],[31,18,6,18],[31,21,6,21],[31,23,6,0],[33,0,17,7],[33,11,17,16,"processFontFamily"],[33,28,17,7],[33,29,17,34,"fontFamily"],[33,39,17,7],[33,41,17,46],[34,0,18,4],[34,8,18,8],[34,9,18,9,"fontFamily"],[34,19,18,8],[34,23,18,23],[34,24,18,24],[34,64,18,47,"fontFamily"],[34,74,18,24],[34,75,18,4],[34,77,18,60],[35,0,19,8],[35,13,19,15,"fontFamily"],[35,23,19,8],[36,0,20,5],[38,0,21,4],[38,8,21,8],[38,9,21,9,"isLoaded"],[38,17,21,17],[38,18,21,18,"fontFamily"],[38,28,21,17],[38,29,21,4],[38,31,21,31],[39,0,22,8],[39,10,22,12,"__DEV__"],[39,17,22,8],[39,19,22,21],[40,0,23,12],[40,12,23,16,"isLoading"],[40,21,23,25],[40,22,23,26,"fontFamily"],[40,32,23,25],[40,33,23,12],[40,35,23,39],[41,0,24,16,"console"],[41,10,24,16,"console"],[41,17,24,23],[41,18,24,24,"error"],[41,23,24,16],[41,60,24,63,"fontFamily"],[41,70,24,16],[42,0,27,13],[42,9,23,12],[42,15,28,17],[43,0,29,16,"console"],[43,10,29,16,"console"],[43,17,29,23],[43,18,29,24,"error"],[43,23,29,16],[43,42,29,45,"fontFamily"],[43,52,29,16],[44,0,32,13],[45,0,33,9],[47,0,34,8],[47,13,34,15],[47,21,34,8],[48,0,35,5],[50,0,36,4],[50,25,36,23],[50,60,36,41,"fontFamily"],[50,70,36,23],[50,71,36,4],[51,0,37,1],[53,0,44,7],[53,11,44,16,"isLoaded"],[53,19,44,7],[53,20,44,25,"fontFamily"],[53,30,44,7],[53,32,44,37],[54,0,45,4],[54,11,45,11,"fontFamily"],[54,21,45,21],[54,25,45,25,"loaded"],[54,31,45,4],[55,0,46,1],[57,0,53,7],[57,11,53,16,"isLoading"],[57,20,53,7],[57,21,53,26,"fontFamily"],[57,31,53,7],[57,33,53,38],[58,0,54,4],[58,11,54,11,"fontFamily"],[58,21,54,21],[58,25,54,25,"loadPromises"],[58,37,54,4],[59,0,55,1],[61,0,61,7],[61,11,61,22,"loadAsync"],[61,20,61,7],[61,21,61,32,"fontFamilyOrFontMap"],[61,40,61,7],[61,42,61,53,"source"],[61,48,61,7],[62,0,61,7],[63,0,61,7],[64,0,61,7],[65,0,61,7],[66,0,61,7],[67,0,61,7],[67,18,62,8],[67,25,62,15,"fontFamilyOrFontMap"],[67,44,62,8],[67,49,62,39],[67,57,61,7],[68,0,61,7],[69,0,61,7],[70,0,61,7],[72,0,61,7],[72,17,63,12,"source"],[72,23,61,7],[73,0,61,7],[74,0,61,7],[75,0,61,7],[77,0,61,7],[77,18,64,18],[77,22,64,22,"CodedError"],[77,38,64,18],[77,111,64,103,"source"],[77,117,64,18],[77,223,61,7],[79,0,61,7],[80,0,66,14,"fontMap"],[80,12,66,14,"fontMap"],[80,19,61,7],[80,22,66,24,"fontFamilyOrFontMap"],[80,41,61,7],[81,0,67,14,"names"],[81,12,67,14,"names"],[81,17,61,7],[81,20,67,22,"Object"],[81,26,67,28],[81,27,67,29,"keys"],[81,31,67,22],[81,32,67,34,"fontMap"],[81,39,67,22],[81,40,61,7],[82,0,61,7],[83,0,61,7],[83,46,68,14,"Promise"],[83,53,68,21],[83,54,68,22,"all"],[83,57,68,14],[83,58,68,26,"names"],[83,63,68,31],[83,64,68,32,"map"],[83,67,68,26],[83,68,68,36],[83,78,68,36,"name"],[83,82,68,40],[84,0,68,40],[84,21,68,44,"loadFontInNamespaceAsync"],[84,45,68,68],[84,46,68,69,"name"],[84,50,68,68],[84,52,68,75,"fontMap"],[84,59,68,82],[84,60,68,83,"name"],[84,64,68,82],[84,65,68,68],[84,66,68,40],[85,0,68,40],[85,13,68,26],[85,14,68,14],[85,15,61,7],[87,0,61,7],[88,0,61,7],[90,0,61,7],[91,0,61,7],[92,0,61,7],[92,46,71,17,"loadFontInNamespaceAsync"],[92,70,71,41],[92,71,71,42,"fontFamilyOrFontMap"],[92,90,71,41],[92,92,71,63,"source"],[92,98,71,41],[92,99,61,7],[94,0,61,7],[95,0,61,7],[97,0,61,7],[98,0,61,7],[99,0,61,7],[100,0,61,7],[101,0,61,7],[102,0,61,7],[103,0,61,7],[105,0,73,0],[105,11,73,15,"loadFontInNamespaceAsync"],[105,35,73,0],[105,36,73,40,"fontFamily"],[105,46,73,0],[105,48,73,52,"source"],[105,54,73,0],[106,0,73,0],[107,0,73,0],[108,0,73,0],[109,0,73,0],[110,0,73,0],[111,0,73,0],[111,16,74,9,"source"],[111,22,73,0],[112,0,73,0],[113,0,73,0],[114,0,73,0],[116,0,73,0],[116,18,75,14],[116,22,75,18,"CodedError"],[116,38,75,14],[116,110,75,97,"fontFamily"],[116,120,75,14],[116,132,75,113,"source"],[116,138,75,14],[116,212,75,189,"fontFamily"],[116,222,75,14],[116,230,73,0],[118,0,73,0],[119,0,73,0],[119,17,77,8,"loaded"],[119,23,77,14],[119,24,77,15,"fontFamily"],[119,34,77,14],[119,35,73,0],[120,0,73,0],[121,0,73,0],[122,0,73,0],[124,0,73,0],[126,0,73,0],[127,0,73,0],[127,17,80,8,"loadPromises"],[127,29,80,20],[127,30,80,21,"fontFamily"],[127,40,80,20],[127,41,73,0],[128,0,73,0],[129,0,73,0],[130,0,73,0],[132,0,73,0],[132,46,81,15,"loadPromises"],[132,58,81,27],[132,59,81,28,"fontFamily"],[132,69,81,27],[132,70,73,0],[134,0,73,0],[135,0,87,10,"asset"],[135,12,87,10,"asset"],[135,17,73,0],[135,20,87,18],[135,55,87,36,"source"],[135,61,87,18],[135,62,73,0],[137,0,88,4,"loadPromises"],[137,12,88,4,"loadPromises"],[137,24,88,16],[137,25,88,17,"fontFamily"],[137,35,88,16],[137,36,88,4],[137,39,88,32],[138,0,88,32],[139,0,88,32],[140,0,88,32],[141,0,88,32],[142,0,88,32],[143,0,88,32],[144,0,88,32],[144,56,90,18],[144,93,90,38,"fontFamily"],[144,103,90,18],[144,105,90,50,"asset"],[144,110,90,18],[144,111,88,32],[146,0,88,32],[147,0,91,12,"loaded"],[147,22,91,12,"loaded"],[147,28,91,18],[147,29,91,19,"fontFamily"],[147,39,91,18],[147,40,91,12],[147,43,91,33],[147,47,91,12],[149,0,88,32],[150,0,88,32],[151,0,94,12],[151,29,94,19,"loadPromises"],[151,41,94,31],[151,42,94,32,"fontFamily"],[151,52,94,31],[151,53,94,12],[152,0,88,32],[154,0,88,32],[155,0,88,32],[156,0,88,32],[157,0,88,32],[158,0,88,32],[159,0,88,32],[160,0,88,32],[160,13,88,31],[160,15,88,4],[162,0,73,0],[163,0,73,0],[163,46,97,10,"loadPromises"],[163,58,97,22],[163,59,97,23,"fontFamily"],[163,69,97,22],[163,70,73,0],[165,0,73,0],[166,0,73,0],[167,0,73,0],[168,0,73,0],[169,0,73,0],[170,0,73,0],[171,0,73,0],[173,0,102,7],[173,11,102,22,"unloadAllAsync"],[173,25,102,7],[174,0,102,7],[176,0,102,7],[177,0,102,7],[178,0,102,7],[179,0,102,7],[180,0,102,7],[180,16,103,9,"ExpoFontLoader"],[180,40,103,24,"unloadAllAsync"],[180,54,102,7],[181,0,102,7],[182,0,102,7],[183,0,102,7],[185,0,102,7],[185,18,104,14],[185,22,104,18,"UnavailabilityError"],[185,47,104,14],[185,48,104,38],[185,59,104,14],[185,61,104,51],[185,77,104,14],[185,78,102,7],[187,0,102,7],[188,0,102,7],[188,17,106,8,"Object"],[188,23,106,14],[188,24,106,15,"keys"],[188,28,106,8],[188,29,106,20,"loadPromises"],[188,41,106,8],[188,43,106,34,"length"],[188,49,102,7],[189,0,102,7],[190,0,102,7],[191,0,102,7],[193,0,102,7],[193,18,107,14],[193,22,107,18,"CodedError"],[193,38,107,14],[193,107,107,95,"Object"],[193,113,107,101],[193,114,107,102,"keys"],[193,118,107,95],[193,119,107,107,"loadPromises"],[193,131,107,95],[193,133,107,121,"join"],[193,137,107,95],[193,138,107,126],[193,142,107,95],[193,143,107,14],[193,144,102,7],[195,0,102,7],[196,0,109,4],[196,40,109,29,"Object"],[196,46,109,35],[196,47,109,36,"keys"],[196,51,109,29],[196,52,109,41,"loaded"],[196,58,109,29],[196,59,109,4],[196,93,109,50],[197,0,109,15,"fontFamily"],[197,14,109,15,"fontFamily"],[197,24,109,50],[198,0,110,8],[198,21,110,15,"loaded"],[198,27,110,21],[198,28,110,22,"fontFamily"],[198,38,110,21],[198,39,110,8],[199,0,111,5],[201,0,102,7],[202,0,102,7],[202,46,112,10,"ExpoFontLoader"],[202,70,112,25,"unloadAllAsync"],[202,84,112,10],[202,86,102,7],[204,0,102,7],[205,0,102,7],[206,0,102,7],[207,0,102,7],[208,0,102,7],[209,0,102,7],[210,0,102,7],[212,0,121,7],[212,11,121,22,"unloadAsync"],[212,22,121,7],[212,23,121,34,"fontFamilyOrFontMap"],[212,42,121,7],[212,44,121,55,"options"],[212,51,121,7],[213,0,121,7],[214,0,121,7],[215,0,121,7],[216,0,121,7],[217,0,121,7],[218,0,121,7],[218,16,122,9,"ExpoFontLoader"],[218,40,122,24,"unloadAsync"],[218,51,121,7],[219,0,121,7],[220,0,121,7],[221,0,121,7],[223,0,121,7],[223,18,123,14],[223,22,123,18,"UnavailabilityError"],[223,47,123,14],[223,48,123,38],[223,59,123,14],[223,61,123,51],[223,74,123,14],[223,75,121,7],[225,0,121,7],[226,0,121,7],[226,18,125,8],[226,25,125,15,"fontFamilyOrFontMap"],[226,44,125,8],[226,49,125,39],[226,57,121,7],[227,0,121,7],[228,0,121,7],[229,0,121,7],[231,0,121,7],[231,17,126,12,"options"],[231,24,121,7],[232,0,121,7],[233,0,121,7],[234,0,121,7],[236,0,121,7],[236,18,127,18],[236,22,127,22,"CodedError"],[236,38,127,18],[236,112,127,104,"options"],[236,119,127,18],[236,227,121,7],[238,0,121,7],[239,0,129,14,"fontMap"],[239,12,129,14,"fontMap"],[239,19,121,7],[239,22,129,24,"fontFamilyOrFontMap"],[239,41,121,7],[240,0,130,14,"names"],[240,12,130,14,"names"],[240,17,121,7],[240,20,130,22,"Object"],[240,26,130,28],[240,27,130,29,"keys"],[240,31,130,22],[240,32,130,34,"fontMap"],[240,39,130,22],[240,40,121,7],[241,0,121,7],[242,0,121,7],[242,46,131,14,"Promise"],[242,53,131,21],[242,54,131,22,"all"],[242,57,131,14],[242,58,131,26,"names"],[242,63,131,31],[242,64,131,32,"map"],[242,67,131,26],[242,68,131,36],[242,78,131,36,"name"],[242,82,131,40],[243,0,131,40],[243,21,131,44,"unloadFontInNamespaceAsync"],[243,47,131,70],[243,48,131,71,"name"],[243,52,131,70],[243,54,131,77,"fontMap"],[243,61,131,84],[243,62,131,85,"name"],[243,66,131,84],[243,67,131,70],[243,68,131,40],[244,0,131,40],[244,13,131,26],[244,14,131,14],[244,15,121,7],[246,0,121,7],[247,0,121,7],[249,0,121,7],[250,0,121,7],[251,0,121,7],[251,46,134,17,"unloadFontInNamespaceAsync"],[251,72,134,43],[251,73,134,44,"fontFamilyOrFontMap"],[251,92,134,43],[251,94,134,65,"options"],[251,101,134,43],[251,102,121,7],[253,0,121,7],[254,0,121,7],[256,0,121,7],[257,0,121,7],[258,0,121,7],[259,0,121,7],[260,0,121,7],[261,0,121,7],[262,0,121,7],[264,0,136,0],[264,11,136,15,"unloadFontInNamespaceAsync"],[264,37,136,0],[264,38,136,42,"fontFamily"],[264,48,136,0],[264,50,136,54,"options"],[264,57,136,0],[265,0,136,0],[266,0,136,0],[267,0,136,0],[268,0,136,0],[269,0,136,0],[270,0,136,0],[270,16,137,9,"loaded"],[270,22,137,15],[270,23,137,16,"fontFamily"],[270,33,137,15],[270,34,136,0],[271,0,136,0],[272,0,136,0],[273,0,136,0],[275,0,136,0],[277,0,136,0],[278,0,141,8],[278,19,141,15,"loaded"],[278,25,141,21],[278,26,141,22,"fontFamily"],[278,36,141,21],[278,37,141,8],[280,0,136,0],[281,0,147,10,"nativeFontName"],[281,12,147,10,"nativeFontName"],[281,26,136,0],[281,29,147,27],[281,64,147,45,"fontFamily"],[281,74,147,27],[281,75,136,0],[283,0,136,0],[283,16,148,9,"nativeFontName"],[283,30,136,0],[284,0,136,0],[285,0,136,0],[286,0,136,0],[288,0,136,0],[288,18,149,14],[288,22,149,18,"CodedError"],[288,38,149,14],[288,88,136,0],[290,0,136,0],[291,0,136,0],[292,0,136,0],[292,46,151,10,"ExpoFontLoader"],[292,70,151,25,"unloadAsync"],[292,81,151,10],[292,82,151,37,"nativeFontName"],[292,96,151,10],[292,98,151,53,"options"],[292,105,151,10],[292,106,136,0],[294,0,136,0],[295,0,136,0],[296,0,136,0],[297,0,136,0],[298,0,136,0],[299,0,136,0],[300,0,136,0]],"functionMap":{"names":["<global>","processFontFamily","isLoaded","isLoading","loadAsync","names.map$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCgB;CDoB;OEO;CFE;OGO;CHE;OIM;oCCO,qDD;CJI;AMC;gCCe;KDQ;CNE;OQI;CRW;OSQ;oCJU,uDI;CTI;AUC;CVgB"}},"type":"js/module"}]}