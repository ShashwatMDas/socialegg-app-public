{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"invariant","data":{"isAsync":false}},{"name":"unimodules-permissions-interface","data":{"isAsync":false}},{"name":"./ExpoLocation","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getProviderStatusAsync = getProviderStatusAsync;\n  exports.enableNetworkProviderAsync = enableNetworkProviderAsync;\n  exports.getCurrentPositionAsync = getCurrentPositionAsync;\n  exports.getLastKnownPositionAsync = getLastKnownPositionAsync;\n  exports.getHeadingAsync = getHeadingAsync;\n  exports.watchHeadingAsync = watchHeadingAsync;\n  exports.geocodeAsync = geocodeAsync;\n  exports.reverseGeocodeAsync = reverseGeocodeAsync;\n  exports.setApiKey = setApiKey;\n  exports.watchPositionAsync = watchPositionAsync;\n  exports.getPermissionsAsync = getPermissionsAsync;\n  exports.requestPermissionsAsync = requestPermissionsAsync;\n  exports.hasServicesEnabledAsync = hasServicesEnabledAsync;\n  exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;\n  exports.startLocationUpdatesAsync = startLocationUpdatesAsync;\n  exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;\n  exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;\n  exports.startGeofencingAsync = startGeofencingAsync;\n  exports.stopGeofencingAsync = stopGeofencingAsync;\n  exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;\n  exports.installWebGeolocationPolyfill = installWebGeolocationPolyfill;\n  exports._getCurrentWatchId = _getCurrentWatchId;\n  Object.defineProperty(exports, \"PermissionStatus\", {\n    enumerable: true,\n    get: function get() {\n      return _unimodulesPermissionsInterface.PermissionStatus;\n    }\n  });\n  exports.EventEmitter = exports.GeofencingRegionState = exports.GeofencingEventType = exports.ActivityType = exports.Accuracy = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n\n  var _unimodulesPermissionsInterface = _$$_REQUIRE(_dependencyMap[4], \"unimodules-permissions-interface\");\n\n  var _ExpoLocation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./ExpoLocation\"));\n\n  function _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } i = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return i.next.bind(i); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  var LocationEventEmitter = new _core.EventEmitter(_ExpoLocation.default);\n  exports.EventEmitter = LocationEventEmitter;\n  var LocationAccuracy;\n  exports.Accuracy = LocationAccuracy;\n\n  (function (LocationAccuracy) {\n    LocationAccuracy[LocationAccuracy[\"Lowest\"] = 1] = \"Lowest\";\n    LocationAccuracy[LocationAccuracy[\"Low\"] = 2] = \"Low\";\n    LocationAccuracy[LocationAccuracy[\"Balanced\"] = 3] = \"Balanced\";\n    LocationAccuracy[LocationAccuracy[\"High\"] = 4] = \"High\";\n    LocationAccuracy[LocationAccuracy[\"Highest\"] = 5] = \"Highest\";\n    LocationAccuracy[LocationAccuracy[\"BestForNavigation\"] = 6] = \"BestForNavigation\";\n  })(LocationAccuracy || (exports.Accuracy = LocationAccuracy = {}));\n\n  var LocationActivityType;\n  exports.ActivityType = LocationActivityType;\n\n  (function (LocationActivityType) {\n    LocationActivityType[LocationActivityType[\"Other\"] = 1] = \"Other\";\n    LocationActivityType[LocationActivityType[\"AutomotiveNavigation\"] = 2] = \"AutomotiveNavigation\";\n    LocationActivityType[LocationActivityType[\"Fitness\"] = 3] = \"Fitness\";\n    LocationActivityType[LocationActivityType[\"OtherNavigation\"] = 4] = \"OtherNavigation\";\n    LocationActivityType[LocationActivityType[\"Airborne\"] = 5] = \"Airborne\";\n  })(LocationActivityType || (exports.ActivityType = LocationActivityType = {}));\n\n  var GeofencingEventType;\n  exports.GeofencingEventType = GeofencingEventType;\n\n  (function (GeofencingEventType) {\n    GeofencingEventType[GeofencingEventType[\"Enter\"] = 1] = \"Enter\";\n    GeofencingEventType[GeofencingEventType[\"Exit\"] = 2] = \"Exit\";\n  })(GeofencingEventType || (exports.GeofencingEventType = GeofencingEventType = {}));\n\n  var GeofencingRegionState;\n  exports.GeofencingRegionState = GeofencingRegionState;\n\n  (function (GeofencingRegionState) {\n    GeofencingRegionState[GeofencingRegionState[\"Unknown\"] = 0] = \"Unknown\";\n    GeofencingRegionState[GeofencingRegionState[\"Inside\"] = 1] = \"Inside\";\n    GeofencingRegionState[GeofencingRegionState[\"Outside\"] = 2] = \"Outside\";\n  })(GeofencingRegionState || (exports.GeofencingRegionState = GeofencingRegionState = {}));\n\n  var nextWatchId = 0;\n  var headingId;\n\n  function _getNextWatchId() {\n    nextWatchId++;\n    return nextWatchId;\n  }\n\n  function _getCurrentWatchId() {\n    return nextWatchId;\n  }\n\n  var watchCallbacks = {};\n  var deviceEventSubscription;\n  var headingEventSub;\n  var googleApiKey;\n  var googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n  function getProviderStatusAsync() {\n    return _regenerator.default.async(function getProviderStatusAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _ExpoLocation.default.getProviderStatusAsync());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function enableNetworkProviderAsync() {\n    return _regenerator.default.async(function enableNetworkProviderAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(_core.Platform.OS === 'android')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", _ExpoLocation.default.enableNetworkProviderAsync());\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getCurrentPositionAsync() {\n    var options,\n        _args3 = arguments;\n    return _regenerator.default.async(function getCurrentPositionAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n            return _context3.abrupt(\"return\", _ExpoLocation.default.getCurrentPositionAsync(options));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getLastKnownPositionAsync() {\n    return _regenerator.default.async(function getLastKnownPositionAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", _ExpoLocation.default.getLastKnownPositionAsync());\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getHeadingAsync() {\n    return _regenerator.default.async(function getHeadingAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", new Promise(function _callee(resolve, reject) {\n              var tries, headingSub, done, subscription, _tries;\n\n              return _regenerator.default.async(function _callee$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      _context5.prev = 0;\n\n                      if (!headingEventSub) {\n                        _context5.next = 6;\n                        break;\n                      }\n\n                      tries = 0;\n                      headingSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref) {\n                        var heading = _ref.heading;\n\n                        if (heading.accuracy > 1 || tries > 5) {\n                          resolve(heading);\n                          LocationEventEmitter.removeSubscription(headingSub);\n                        } else {\n                          tries += 1;\n                        }\n                      });\n                      _context5.next = 12;\n                      break;\n\n                    case 6:\n                      done = false;\n                      _tries = 0;\n                      _context5.next = 10;\n                      return _regenerator.default.awrap(watchHeadingAsync(function (heading) {\n                        if (!done) {\n                          if (heading.accuracy > 1 || _tries > 5) {\n                            subscription.remove();\n                            resolve(heading);\n                            done = true;\n                          } else {\n                            _tries += 1;\n                          }\n                        } else {\n                          subscription.remove();\n                        }\n                      }));\n\n                    case 10:\n                      subscription = _context5.sent;\n\n                      if (done) {\n                        subscription.remove();\n                      }\n\n                    case 12:\n                      _context5.next = 17;\n                      break;\n\n                    case 14:\n                      _context5.prev = 14;\n                      _context5.t0 = _context5[\"catch\"](0);\n                      reject(_context5.t0);\n\n                    case 17:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, [[0, 14]], Promise);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function watchHeadingAsync(callback) {\n    return _regenerator.default.async(function watchHeadingAsync$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (headingEventSub) {\n              _removeHeadingWatcher(headingId);\n            }\n\n            headingEventSub = LocationEventEmitter.addListener('Expo.headingChanged', function (_ref2) {\n              var watchId = _ref2.watchId,\n                  heading = _ref2.heading;\n              var callback = watchCallbacks[watchId];\n\n              if (callback) {\n                callback(heading);\n              } else {\n                _ExpoLocation.default.removeWatchAsync(watchId);\n              }\n            });\n            headingId = _getNextWatchId();\n            watchCallbacks[headingId] = callback;\n            _context7.next = 6;\n            return _regenerator.default.awrap(_ExpoLocation.default.watchDeviceHeading(headingId));\n\n          case 6:\n            return _context7.abrupt(\"return\", {\n              remove: function remove() {\n                _removeHeadingWatcher(headingId);\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _removeHeadingWatcher(watchId) {\n    if (!watchCallbacks[watchId]) {\n      return;\n    }\n\n    delete watchCallbacks[watchId];\n\n    _ExpoLocation.default.removeWatchAsync(watchId);\n\n    if (headingEventSub) {\n      LocationEventEmitter.removeSubscription(headingEventSub);\n      headingEventSub = null;\n    }\n  }\n\n  function _maybeInitializeEmitterSubscription() {\n    if (!deviceEventSubscription) {\n      deviceEventSubscription = LocationEventEmitter.addListener('Expo.locationChanged', function (_ref3) {\n        var watchId = _ref3.watchId,\n            location = _ref3.location;\n        var callback = watchCallbacks[watchId];\n\n        if (callback) {\n          callback(location);\n        } else {\n          _ExpoLocation.default.removeWatchAsync(watchId);\n        }\n      });\n    }\n  }\n\n  function geocodeAsync(address) {\n    return _regenerator.default.async(function geocodeAsync$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", _ExpoLocation.default.geocodeAsync(address).catch(function (error) {\n              var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';\n\n              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n                if (!googleApiKey) {\n                  throw new _core.CodedError(error.code, error.message + \" Please set a Google API Key to use geocoding.\");\n                }\n\n                return _googleGeocodeAsync(address);\n              }\n\n              throw error;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function reverseGeocodeAsync(location) {\n    return _regenerator.default.async(function reverseGeocodeAsync$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {\n              _context9.next = 2;\n              break;\n            }\n\n            throw new TypeError('Location should be an object with number properties `latitude` and `longitude`.');\n\n          case 2:\n            return _context9.abrupt(\"return\", _ExpoLocation.default.reverseGeocodeAsync(location).catch(function (error) {\n              var platformUsesGoogleMaps = _core.Platform.OS === 'android' || _core.Platform.OS === 'web';\n\n              if (platformUsesGoogleMaps && error.code === 'E_NO_GEOCODER') {\n                if (!googleApiKey) {\n                  throw new _core.CodedError(error.code, error.message + \" Please set a Google API Key to use geocoding.\");\n                }\n\n                return _googleReverseGeocodeAsync(location);\n              }\n\n              throw error;\n            }));\n\n          case 3:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function setApiKey(apiKey) {\n    googleApiKey = apiKey;\n  }\n\n  function _googleGeocodeAsync(address) {\n    var result, resultObject;\n    return _regenerator.default.async(function _googleGeocodeAsync$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return _regenerator.default.awrap(fetch(googleApiUrl + \"?key=\" + googleApiKey + \"&address=\" + encodeURI(address)));\n\n          case 2:\n            result = _context10.sent;\n            _context10.next = 5;\n            return _regenerator.default.awrap(result.json());\n\n          case 5:\n            resultObject = _context10.sent;\n\n            if (!(resultObject.status === 'ZERO_RESULTS')) {\n              _context10.next = 8;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", []);\n\n          case 8:\n            assertGeocodeResults(resultObject);\n            return _context10.abrupt(\"return\", resultObject.results.map(function (result) {\n              var location = result.geometry.location;\n              return {\n                latitude: location.lat,\n                longitude: location.lng\n              };\n            }));\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _googleReverseGeocodeAsync(options) {\n    var result, resultObject;\n    return _regenerator.default.async(function _googleReverseGeocodeAsync$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _regenerator.default.awrap(fetch(googleApiUrl + \"?key=\" + googleApiKey + \"&latlng=\" + options.latitude + \",\" + options.longitude));\n\n          case 2:\n            result = _context11.sent;\n            _context11.next = 5;\n            return _regenerator.default.awrap(result.json());\n\n          case 5:\n            resultObject = _context11.sent;\n\n            if (!(resultObject.status === 'ZERO_RESULTS')) {\n              _context11.next = 8;\n              break;\n            }\n\n            return _context11.abrupt(\"return\", []);\n\n          case 8:\n            assertGeocodeResults(resultObject);\n            return _context11.abrupt(\"return\", resultObject.results.map(function (result) {\n              var address = {};\n              result.address_components.forEach(function (component) {\n                if (component.types.includes('locality')) {\n                  address.city = component.long_name;\n                } else if (component.types.includes('street_address')) {\n                  address.street = component.long_name;\n                } else if (component.types.includes('administrative_area_level_1')) {\n                  address.region = component.long_name;\n                } else if (component.types.includes('country')) {\n                  address.country = component.long_name;\n                } else if (component.types.includes('postal_code')) {\n                  address.postalCode = component.long_name;\n                } else if (component.types.includes('point_of_interest')) {\n                  address.name = component.long_name;\n                }\n              });\n              return address;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function assertGeocodeResults(resultObject) {\n    var status = resultObject.status,\n        error_message = resultObject.error_message;\n\n    if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n      if (error_message) {\n        throw new _core.CodedError(status, error_message);\n      } else if (status === 'UNKNOWN_ERROR') {\n        throw new _core.CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n      }\n\n      throw new _core.CodedError(status, \"An error occurred during geocoding.\");\n    }\n  }\n\n  function watchPosition(success, error, options) {\n    _maybeInitializeEmitterSubscription();\n\n    var watchId = _getNextWatchId();\n\n    watchCallbacks[watchId] = success;\n\n    _ExpoLocation.default.watchPositionImplAsync(watchId, options).catch(function (err) {\n      _removeWatcher(watchId);\n\n      error({\n        watchId: watchId,\n        message: err.message,\n        code: err.code\n      });\n    });\n\n    return watchId;\n  }\n\n  function watchPositionAsync(options, callback) {\n    var watchId;\n    return _regenerator.default.async(function watchPositionAsync$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _maybeInitializeEmitterSubscription();\n\n            watchId = _getNextWatchId();\n            watchCallbacks[watchId] = callback;\n            _context12.next = 5;\n            return _regenerator.default.awrap(_ExpoLocation.default.watchPositionImplAsync(watchId, options));\n\n          case 5:\n            return _context12.abrupt(\"return\", {\n              remove: function remove() {\n                _removeWatcher(watchId);\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function clearWatch(watchId) {\n    _removeWatcher(watchId);\n  }\n\n  function _removeWatcher(watchId) {\n    if (!watchCallbacks[watchId]) {\n      return;\n    }\n\n    _ExpoLocation.default.removeWatchAsync(watchId);\n\n    delete watchCallbacks[watchId];\n\n    if (Object.keys(watchCallbacks).length === 0 && deviceEventSubscription) {\n      LocationEventEmitter.removeSubscription(deviceEventSubscription);\n      deviceEventSubscription = null;\n    }\n  }\n\n  function getCurrentPosition(success) {\n    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (0, _invariant.default)(typeof success === 'function', 'Must provide a valid success callback.');\n    (0, _invariant.default)(typeof options === 'object', 'options must be an object.');\n\n    _getCurrentPositionAsyncWrapper(success, error, options);\n  }\n\n  function _getCurrentPositionAsyncWrapper(success, error, options) {\n    var result;\n    return _regenerator.default.async(function _getCurrentPositionAsyncWrapper$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.prev = 0;\n            _context13.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());\n\n          case 3:\n            _context13.next = 5;\n            return _regenerator.default.awrap(getCurrentPositionAsync(options));\n\n          case 5:\n            result = _context13.sent;\n            success(result);\n            _context13.next = 12;\n            break;\n\n          case 9:\n            _context13.prev = 9;\n            _context13.t0 = _context13[\"catch\"](0);\n            error(_context13.t0);\n\n          case 12:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n\n  function getPermissionsAsync() {\n    return _regenerator.default.async(function getPermissionsAsync$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return _regenerator.default.awrap(_ExpoLocation.default.getPermissionsAsync());\n\n          case 2:\n            return _context14.abrupt(\"return\", _context14.sent);\n\n          case 3:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function requestPermissionsAsync() {\n    return _regenerator.default.async(function requestPermissionsAsync$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.next = 2;\n            return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());\n\n          case 2:\n            return _context15.abrupt(\"return\", _context15.sent);\n\n          case 3:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function hasServicesEnabledAsync() {\n    return _regenerator.default.async(function hasServicesEnabledAsync$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.next = 2;\n            return _regenerator.default.awrap(_ExpoLocation.default.hasServicesEnabledAsync());\n\n          case 2:\n            return _context16.abrupt(\"return\", _context16.sent);\n\n          case 3:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _validateTaskName(taskName) {\n    (0, _invariant.default)(taskName && typeof taskName === 'string', '`taskName` must be a non-empty string.');\n  }\n\n  function isBackgroundLocationAvailableAsync() {\n    var providerStatus;\n    return _regenerator.default.async(function isBackgroundLocationAvailableAsync$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.next = 2;\n            return _regenerator.default.awrap(getProviderStatusAsync());\n\n          case 2:\n            providerStatus = _context17.sent;\n            return _context17.abrupt(\"return\", providerStatus.backgroundModeEnabled);\n\n          case 4:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function startLocationUpdatesAsync(taskName) {\n    var options,\n        _args18 = arguments;\n    return _regenerator.default.async(function startLocationUpdatesAsync$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {\n              accuracy: LocationAccuracy.Balanced\n            };\n\n            _validateTaskName(taskName);\n\n            _context18.next = 4;\n            return _regenerator.default.awrap(_ExpoLocation.default.startLocationUpdatesAsync(taskName, options));\n\n          case 4:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function stopLocationUpdatesAsync(taskName) {\n    return _regenerator.default.async(function stopLocationUpdatesAsync$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            _context19.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.stopLocationUpdatesAsync(taskName));\n\n          case 3:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function hasStartedLocationUpdatesAsync(taskName) {\n    return _regenerator.default.async(function hasStartedLocationUpdatesAsync$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            return _context20.abrupt(\"return\", _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName));\n\n          case 2:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _validateRegions(regions) {\n    if (!regions || regions.length === 0) {\n      throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n    }\n\n    for (var _iterator = _createForOfIteratorHelperLoose(regions), _step; !(_step = _iterator()).done;) {\n      var region = _step.value;\n\n      if (typeof region.latitude !== 'number') {\n        throw new TypeError(\"Region's latitude must be a number. Got '\" + region.latitude + \"' instead.\");\n      }\n\n      if (typeof region.longitude !== 'number') {\n        throw new TypeError(\"Region's longitude must be a number. Got '\" + region.longitude + \"' instead.\");\n      }\n\n      if (typeof region.radius !== 'number') {\n        throw new TypeError(\"Region's radius must be a number. Got '\" + region.radius + \"' instead.\");\n      }\n    }\n  }\n\n  function startGeofencingAsync(taskName) {\n    var regions,\n        _args21 = arguments;\n    return _regenerator.default.async(function startGeofencingAsync$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            regions = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : [];\n\n            _validateTaskName(taskName);\n\n            _validateRegions(regions);\n\n            _context21.next = 5;\n            return _regenerator.default.awrap(_ExpoLocation.default.startGeofencingAsync(taskName, {\n              regions: regions\n            }));\n\n          case 5:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function stopGeofencingAsync(taskName) {\n    return _regenerator.default.async(function stopGeofencingAsync$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            _context22.next = 3;\n            return _regenerator.default.awrap(_ExpoLocation.default.stopGeofencingAsync(taskName));\n\n          case 3:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function hasStartedGeofencingAsync(taskName) {\n    return _regenerator.default.async(function hasStartedGeofencingAsync$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            _validateTaskName(taskName);\n\n            return _context23.abrupt(\"return\", _ExpoLocation.default.hasStartedGeofencingAsync(taskName));\n\n          case 2:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function installWebGeolocationPolyfill() {\n    if (_core.Platform.OS !== 'web') {\n      window.navigator.geolocation = {\n        getCurrentPosition: getCurrentPosition,\n        watchPosition: watchPosition,\n        clearWatch: clearWatch,\n        stopObserving: function stopObserving() {}\n      };\n    }\n  }\n});","lineCount":855,"map":[[39,0,1,0],[41,0,2,0],[43,0,3,0],[45,0,4,0],[53,0,5,0],[53,6,5,6,"LocationEventEmitter"],[53,26,5,26],[53,29,5,29],[53,33,5,33,"EventEmitter"],[53,51,5,29],[53,52,5,46,"ExpoLocation"],[53,73,5,29],[53,74,5,0],[55,0,7,0],[55,6,7,4,"LocationAccuracy"],[55,22,7,0],[58,0,8,0],[58,3,8,1],[58,13,8,11,"LocationAccuracy"],[58,29,8,1],[58,31,8,29],[59,0,9,4,"LocationAccuracy"],[59,4,9,4,"LocationAccuracy"],[59,20,9,20],[59,21,9,21,"LocationAccuracy"],[59,37,9,37],[59,38,9,38],[59,46,9,37],[59,47,9,21],[59,50,9,50],[59,51,9,20],[59,52,9,4],[59,55,9,55],[59,63,9,4],[60,0,10,4,"LocationAccuracy"],[60,4,10,4,"LocationAccuracy"],[60,20,10,20],[60,21,10,21,"LocationAccuracy"],[60,37,10,37],[60,38,10,38],[60,43,10,37],[60,44,10,21],[60,47,10,47],[60,48,10,20],[60,49,10,4],[60,52,10,52],[60,57,10,4],[61,0,11,4,"LocationAccuracy"],[61,4,11,4,"LocationAccuracy"],[61,20,11,20],[61,21,11,21,"LocationAccuracy"],[61,37,11,37],[61,38,11,38],[61,48,11,37],[61,49,11,21],[61,52,11,52],[61,53,11,20],[61,54,11,4],[61,57,11,57],[61,67,11,4],[62,0,12,4,"LocationAccuracy"],[62,4,12,4,"LocationAccuracy"],[62,20,12,20],[62,21,12,21,"LocationAccuracy"],[62,37,12,37],[62,38,12,38],[62,44,12,37],[62,45,12,21],[62,48,12,48],[62,49,12,20],[62,50,12,4],[62,53,12,53],[62,59,12,4],[63,0,13,4,"LocationAccuracy"],[63,4,13,4,"LocationAccuracy"],[63,20,13,20],[63,21,13,21,"LocationAccuracy"],[63,37,13,37],[63,38,13,38],[63,47,13,37],[63,48,13,21],[63,51,13,51],[63,52,13,20],[63,53,13,4],[63,56,13,56],[63,65,13,4],[64,0,14,4,"LocationAccuracy"],[64,4,14,4,"LocationAccuracy"],[64,20,14,20],[64,21,14,21,"LocationAccuracy"],[64,37,14,37],[64,38,14,38],[64,57,14,37],[64,58,14,21],[64,61,14,61],[64,62,14,20],[64,63,14,4],[64,66,14,66],[64,85,14,4],[65,0,15,1],[65,3,8,0],[65,5,15,3,"LocationAccuracy"],[65,21,15,19],[65,45,15,24,"LocationAccuracy"],[65,61,15,40],[65,64,15,43],[65,66,15,19],[65,67,8,0],[67,0,16,0],[67,6,16,4,"LocationActivityType"],[67,26,16,0],[70,0,17,0],[70,3,17,1],[70,13,17,11,"LocationActivityType"],[70,33,17,1],[70,35,17,33],[71,0,18,4,"LocationActivityType"],[71,4,18,4,"LocationActivityType"],[71,24,18,24],[71,25,18,25,"LocationActivityType"],[71,45,18,45],[71,46,18,46],[71,53,18,45],[71,54,18,25],[71,57,18,57],[71,58,18,24],[71,59,18,4],[71,62,18,62],[71,69,18,4],[72,0,19,4,"LocationActivityType"],[72,4,19,4,"LocationActivityType"],[72,24,19,24],[72,25,19,25,"LocationActivityType"],[72,45,19,45],[72,46,19,46],[72,68,19,45],[72,69,19,25],[72,72,19,72],[72,73,19,24],[72,74,19,4],[72,77,19,77],[72,99,19,4],[73,0,20,4,"LocationActivityType"],[73,4,20,4,"LocationActivityType"],[73,24,20,24],[73,25,20,25,"LocationActivityType"],[73,45,20,45],[73,46,20,46],[73,55,20,45],[73,56,20,25],[73,59,20,59],[73,60,20,24],[73,61,20,4],[73,64,20,64],[73,73,20,4],[74,0,21,4,"LocationActivityType"],[74,4,21,4,"LocationActivityType"],[74,24,21,24],[74,25,21,25,"LocationActivityType"],[74,45,21,45],[74,46,21,46],[74,63,21,45],[74,64,21,25],[74,67,21,67],[74,68,21,24],[74,69,21,4],[74,72,21,72],[74,89,21,4],[75,0,22,4,"LocationActivityType"],[75,4,22,4,"LocationActivityType"],[75,24,22,24],[75,25,22,25,"LocationActivityType"],[75,45,22,45],[75,46,22,46],[75,56,22,45],[75,57,22,25],[75,60,22,60],[75,61,22,24],[75,62,22,4],[75,65,22,65],[75,75,22,4],[76,0,23,1],[76,3,17,0],[76,5,23,3,"LocationActivityType"],[76,25,23,23],[76,53,23,28,"LocationActivityType"],[76,73,23,48],[76,76,23,51],[76,78,23,23],[76,79,17,0],[78,0,25,7],[78,6,25,11,"GeofencingEventType"],[78,25,25,7],[81,0,26,0],[81,3,26,1],[81,13,26,11,"GeofencingEventType"],[81,32,26,1],[81,34,26,32],[82,0,27,4,"GeofencingEventType"],[82,4,27,4,"GeofencingEventType"],[82,23,27,23],[82,24,27,24,"GeofencingEventType"],[82,43,27,43],[82,44,27,44],[82,51,27,43],[82,52,27,24],[82,55,27,55],[82,56,27,23],[82,57,27,4],[82,60,27,60],[82,67,27,4],[83,0,28,4,"GeofencingEventType"],[83,4,28,4,"GeofencingEventType"],[83,23,28,23],[83,24,28,24,"GeofencingEventType"],[83,43,28,43],[83,44,28,44],[83,50,28,43],[83,51,28,24],[83,54,28,54],[83,55,28,23],[83,56,28,4],[83,59,28,59],[83,65,28,4],[84,0,29,1],[84,3,26,0],[84,5,29,3,"GeofencingEventType"],[84,24,29,22],[84,59,29,27,"GeofencingEventType"],[84,78,29,46],[84,81,29,49],[84,83,29,22],[84,84,26,0],[86,0,30,7],[86,6,30,11,"GeofencingRegionState"],[86,27,30,7],[89,0,31,0],[89,3,31,1],[89,13,31,11,"GeofencingRegionState"],[89,34,31,1],[89,36,31,34],[90,0,32,4,"GeofencingRegionState"],[90,4,32,4,"GeofencingRegionState"],[90,25,32,25],[90,26,32,26,"GeofencingRegionState"],[90,47,32,47],[90,48,32,48],[90,57,32,47],[90,58,32,26],[90,61,32,61],[90,62,32,25],[90,63,32,4],[90,66,32,66],[90,75,32,4],[91,0,33,4,"GeofencingRegionState"],[91,4,33,4,"GeofencingRegionState"],[91,25,33,25],[91,26,33,26,"GeofencingRegionState"],[91,47,33,47],[91,48,33,48],[91,56,33,47],[91,57,33,26],[91,60,33,60],[91,61,33,25],[91,62,33,4],[91,65,33,65],[91,73,33,4],[92,0,34,4,"GeofencingRegionState"],[92,4,34,4,"GeofencingRegionState"],[92,25,34,25],[92,26,34,26,"GeofencingRegionState"],[92,47,34,47],[92,48,34,48],[92,57,34,47],[92,58,34,26],[92,61,34,61],[92,62,34,25],[92,63,34,4],[92,66,34,66],[92,75,34,4],[93,0,35,1],[93,3,31,0],[93,5,35,3,"GeofencingRegionState"],[93,26,35,24],[93,63,35,29,"GeofencingRegionState"],[93,84,35,50],[93,87,35,53],[93,89,35,24],[93,90,31,0],[95,0,36,0],[95,6,36,4,"nextWatchId"],[95,17,36,15],[95,20,36,18],[95,21,36,0],[96,0,37,0],[96,6,37,4,"headingId"],[96,15,37,0],[98,0,38,0],[98,11,38,9,"_getNextWatchId"],[98,26,38,0],[98,29,38,27],[99,0,39,4,"nextWatchId"],[99,4,39,4,"nextWatchId"],[99,15,39,15],[100,0,40,4],[100,11,40,11,"nextWatchId"],[100,22,40,4],[101,0,41,1],[103,0,42,0],[103,11,42,9,"_getCurrentWatchId"],[103,29,42,0],[103,32,42,30],[104,0,43,4],[104,11,43,11,"nextWatchId"],[104,22,43,4],[105,0,44,1],[107,0,45,0],[107,6,45,4,"watchCallbacks"],[107,20,45,18],[107,23,45,21],[107,25,45,0],[108,0,46,0],[108,6,46,4,"deviceEventSubscription"],[108,29,46,0],[109,0,47,0],[109,6,47,4,"headingEventSub"],[109,21,47,0],[110,0,48,0],[110,6,48,4,"googleApiKey"],[110,18,48,0],[111,0,49,0],[111,6,49,6,"googleApiUrl"],[111,18,49,18],[111,21,49,21],[111,72,49,0],[113,0,50,7],[113,11,50,22,"getProviderStatusAsync"],[113,33,50,7],[114,0,50,7],[115,0,50,7],[116,0,50,7],[117,0,50,7],[118,0,50,7],[118,45,51,11,"ExpoLocation"],[118,67,51,24,"getProviderStatusAsync"],[118,89,51,11],[118,91,50,7],[120,0,50,7],[121,0,50,7],[122,0,50,7],[123,0,50,7],[124,0,50,7],[125,0,50,7],[126,0,50,7],[128,0,53,7],[128,11,53,22,"enableNetworkProviderAsync"],[128,37,53,7],[129,0,53,7],[130,0,53,7],[131,0,53,7],[132,0,53,7],[133,0,53,7],[133,18,58,8,"Platform"],[133,33,58,17,"OS"],[133,35,58,8],[133,40,58,24],[133,49,53,7],[134,0,53,7],[135,0,53,7],[136,0,53,7],[138,0,53,7],[138,46,59,15,"ExpoLocation"],[138,68,59,28,"enableNetworkProviderAsync"],[138,94,59,15],[138,96,53,7],[140,0,53,7],[141,0,53,7],[142,0,53,7],[143,0,53,7],[144,0,53,7],[145,0,53,7],[146,0,53,7],[148,0,62,7],[148,11,62,22,"getCurrentPositionAsync"],[148,34,62,7],[149,0,62,7],[150,0,62,7],[151,0,62,7],[152,0,62,7],[153,0,62,7],[154,0,62,7],[155,0,62,46,"options"],[155,12,62,46,"options"],[155,19,62,7],[155,81,62,56],[155,83,62,7],[156,0,62,7],[156,46,63,11,"ExpoLocation"],[156,68,63,24,"getCurrentPositionAsync"],[156,91,63,11],[156,92,63,48,"options"],[156,99,63,11],[156,100,62,7],[158,0,62,7],[159,0,62,7],[160,0,62,7],[161,0,62,7],[162,0,62,7],[163,0,62,7],[164,0,62,7],[166,0,65,7],[166,11,65,22,"getLastKnownPositionAsync"],[166,36,65,7],[167,0,65,7],[168,0,65,7],[169,0,65,7],[170,0,65,7],[171,0,65,7],[171,46,66,11,"ExpoLocation"],[171,68,66,24,"getLastKnownPositionAsync"],[171,93,66,11],[171,95,65,7],[173,0,65,7],[174,0,65,7],[175,0,65,7],[176,0,65,7],[177,0,65,7],[178,0,65,7],[179,0,65,7],[181,0,71,7],[181,11,71,22,"getHeadingAsync"],[181,26,71,7],[182,0,71,7],[183,0,71,7],[184,0,71,7],[185,0,71,7],[186,0,71,7],[186,46,72,11],[186,50,72,15,"Promise"],[186,57,72,11],[186,58,72,23],[186,75,72,30,"resolve"],[186,82,72,23],[186,84,72,39,"reject"],[186,90,72,23],[187,0,72,23],[189,0,72,23],[190,0,72,23],[191,0,72,23],[192,0,72,23],[193,0,72,23],[195,0,72,23],[195,27,75,16,"headingEventSub"],[195,42,72,23],[196,0,72,23],[197,0,72,23],[198,0,72,23],[200,0,76,20,"tries"],[200,22,76,20,"tries"],[200,27,72,23],[200,30,76,28],[200,31,72,23],[201,0,77,22,"headingSub"],[201,22,77,22,"headingSub"],[201,32,72,23],[201,35,77,35,"LocationEventEmitter"],[201,55,77,55],[201,56,77,56,"addListener"],[201,67,77,35],[201,68,77,68],[201,89,77,35],[201,91,77,91],[201,107,77,108],[202,0,77,108],[202,28,77,94,"heading"],[202,35,77,108],[202,43,77,94,"heading"],[202,50,77,108],[204,0,78,20],[204,28,78,24,"heading"],[204,35,78,31],[204,36,78,32,"accuracy"],[204,44,78,24],[204,47,78,43],[204,48,78,24],[204,52,78,48,"tries"],[204,57,78,53],[204,60,78,56],[204,61,78,20],[204,63,78,59],[205,0,79,24,"resolve"],[205,26,79,24,"resolve"],[205,33,79,31],[205,34,79,32,"heading"],[205,41,79,31],[205,42,79,24],[206,0,80,24,"LocationEventEmitter"],[206,26,80,24,"LocationEventEmitter"],[206,46,80,44],[206,47,80,45,"removeSubscription"],[206,65,80,24],[206,66,80,64,"headingSub"],[206,76,80,24],[207,0,81,21],[207,25,78,20],[207,31,82,25],[208,0,83,24,"tries"],[208,26,83,24,"tries"],[208,31,83,29],[208,35,83,33],[208,36,83,24],[209,0,84,21],[210,0,85,17],[210,23,77,35],[210,24,72,23],[211,0,72,23],[212,0,72,23],[214,0,72,23],[215,0,88,20,"done"],[215,22,88,20,"done"],[215,26,72,23],[215,29,88,27],[215,34,72,23],[216,0,90,20,"tries"],[216,22,90,20,"tries"],[216,28,72,23],[216,31,90,28],[216,32,72,23],[217,0,72,23],[218,0,72,23],[218,56,91,37,"watchHeadingAsync"],[218,73,91,54],[218,74,91,55],[218,84,91,56,"heading"],[218,91,91,55],[218,93,91,68],[219,0,92,20],[219,28,92,24],[219,29,92,25,"done"],[219,33,92,20],[219,35,92,31],[220,0,93,24],[220,30,93,28,"heading"],[220,37,93,35],[220,38,93,36,"accuracy"],[220,46,93,28],[220,49,93,47],[220,50,93,28],[220,54,93,52,"tries"],[220,60,93,57],[220,63,93,60],[220,64,93,24],[220,66,93,63],[221,0,94,28,"subscription"],[221,28,94,28,"subscription"],[221,40,94,40],[221,41,94,41,"remove"],[221,47,94,28],[222,0,95,28,"resolve"],[222,28,95,28,"resolve"],[222,35,95,35],[222,36,95,36,"heading"],[222,43,95,35],[222,44,95,28],[223,0,96,28,"done"],[223,28,96,28,"done"],[223,32,96,32],[223,35,96,35],[223,39,96,28],[224,0,97,25],[224,27,93,24],[224,33,98,29],[225,0,99,28,"tries"],[225,28,99,28,"tries"],[225,34,99,33],[225,38,99,37],[225,39,99,28],[226,0,100,25],[227,0,101,21],[227,25,92,20],[227,31,102,25],[228,0,103,24,"subscription"],[228,26,103,24,"subscription"],[228,38,103,36],[228,39,103,37,"remove"],[228,45,103,24],[229,0,104,21],[230,0,105,17],[230,23,91,54],[230,24,72,23],[232,0,72,23],[233,0,91,16,"subscription"],[233,22,91,16,"subscription"],[233,34,72,23],[235,0,106,16],[235,26,106,20,"done"],[235,30,106,16],[235,32,106,26],[236,0,107,20,"subscription"],[236,24,107,20,"subscription"],[236,36,107,32],[236,37,107,33,"remove"],[236,43,107,20],[237,0,108,17],[239,0,72,23],[240,0,72,23],[241,0,72,23],[243,0,72,23],[244,0,72,23],[245,0,72,23],[246,0,112,12,"reject"],[246,22,112,12,"reject"],[246,28,112,18],[246,42,112,12],[248,0,72,23],[249,0,72,23],[250,0,72,23],[251,0,72,23],[252,0,72,23],[253,0,72,23],[254,0,72,23],[254,13,72,11],[254,14,71,7],[256,0,71,7],[257,0,71,7],[258,0,71,7],[259,0,71,7],[260,0,71,7],[261,0,71,7],[262,0,71,7],[264,0,116,7],[264,11,116,22,"watchHeadingAsync"],[264,28,116,7],[264,29,116,40,"callback"],[264,37,116,7],[265,0,116,7],[266,0,116,7],[267,0,116,7],[268,0,116,7],[269,0,118,4],[269,16,118,8,"headingEventSub"],[269,31,118,4],[269,33,118,25],[270,0,119,8,"_removeHeadingWatcher"],[270,14,119,8,"_removeHeadingWatcher"],[270,35,119,29],[270,36,119,30,"headingId"],[270,45,119,29],[270,46,119,8],[271,0,120,5],[273,0,121,4,"headingEventSub"],[273,12,121,4,"headingEventSub"],[273,27,121,19],[273,30,121,22,"LocationEventEmitter"],[273,50,121,42],[273,51,121,43,"addListener"],[273,62,121,22],[273,63,121,55],[273,84,121,22],[273,86,121,78],[273,103,121,104],[274,0,121,104],[274,18,121,81,"watchId"],[274,25,121,104],[274,34,121,81,"watchId"],[274,41,121,104],[275,0,121,104],[275,18,121,90,"heading"],[275,25,121,104],[275,34,121,90,"heading"],[275,41,121,104],[276,0,122,8],[276,18,122,14,"callback"],[276,26,122,22],[276,29,122,25,"watchCallbacks"],[276,43,122,39],[276,44,122,40,"watchId"],[276,51,122,39],[276,52,122,8],[278,0,123,8],[278,18,123,12,"callback"],[278,26,123,8],[278,28,123,22],[279,0,124,12,"callback"],[279,16,124,12,"callback"],[279,24,124,20],[279,25,124,21,"heading"],[279,32,124,20],[279,33,124,12],[280,0,125,9],[280,15,123,8],[280,21,126,13],[281,0,127,12,"ExpoLocation"],[281,38,127,25,"removeWatchAsync"],[281,54,127,12],[281,55,127,42,"watchId"],[281,62,127,12],[282,0,128,9],[283,0,129,5],[283,13,121,22],[283,14,121,4],[284,0,130,4,"headingId"],[284,12,130,4,"headingId"],[284,21,130,13],[284,24,130,16,"_getNextWatchId"],[284,39,130,31],[284,41,130,4],[285,0,131,4,"watchCallbacks"],[285,12,131,4,"watchCallbacks"],[285,26,131,18],[285,27,131,19,"headingId"],[285,36,131,18],[285,37,131,4],[285,40,131,32,"callback"],[285,48,131,4],[286,0,116,7],[287,0,116,7],[287,46,132,10,"ExpoLocation"],[287,68,132,23,"watchDeviceHeading"],[287,86,132,10],[287,87,132,42,"headingId"],[287,96,132,10],[287,97,116,7],[289,0,116,7],[290,0,116,7],[290,46,133,11],[291,0,134,8,"remove"],[291,14,134,8,"remove"],[291,20,133,11],[291,40,134,17],[292,0,135,12,"_removeHeadingWatcher"],[292,16,135,12,"_removeHeadingWatcher"],[292,37,135,33],[292,38,135,34,"headingId"],[292,47,135,33],[292,48,135,12],[293,0,136,9],[294,0,133,11],[294,13,116,7],[296,0,116,7],[297,0,116,7],[298,0,116,7],[299,0,116,7],[300,0,116,7],[301,0,116,7],[302,0,116,7],[304,0,140,0],[304,11,140,9,"_removeHeadingWatcher"],[304,32,140,0],[304,33,140,31,"watchId"],[304,40,140,0],[304,42,140,40],[305,0,141,4],[305,8,141,8],[305,9,141,9,"watchCallbacks"],[305,23,141,23],[305,24,141,24,"watchId"],[305,31,141,23],[305,32,141,4],[305,34,141,34],[306,0,142,8],[307,0,143,5],[309,0,144,4],[309,11,144,11,"watchCallbacks"],[309,25,144,25],[309,26,144,26,"watchId"],[309,33,144,25],[309,34,144,4],[311,0,145,4,"ExpoLocation"],[311,26,145,17,"removeWatchAsync"],[311,42,145,4],[311,43,145,34,"watchId"],[311,50,145,4],[313,0,146,4],[313,8,146,8,"headingEventSub"],[313,23,146,4],[313,25,146,25],[314,0,147,8,"LocationEventEmitter"],[314,6,147,8,"LocationEventEmitter"],[314,26,147,28],[314,27,147,29,"removeSubscription"],[314,45,147,8],[314,46,147,48,"headingEventSub"],[314,61,147,8],[315,0,148,8,"headingEventSub"],[315,6,148,8,"headingEventSub"],[315,21,148,23],[315,24,148,26],[315,28,148,8],[316,0,149,5],[317,0,150,1],[319,0,152,0],[319,11,152,9,"_maybeInitializeEmitterSubscription"],[319,46,152,0],[319,49,152,47],[320,0,153,4],[320,8,153,8],[320,9,153,9,"deviceEventSubscription"],[320,32,153,4],[320,34,153,34],[321,0,154,8,"deviceEventSubscription"],[321,6,154,8,"deviceEventSubscription"],[321,29,154,31],[321,32,154,34,"LocationEventEmitter"],[321,52,154,54],[321,53,154,55,"addListener"],[321,64,154,34],[321,65,154,67],[321,87,154,34],[321,89,154,91],[321,106,154,118],[322,0,154,118],[322,12,154,94,"watchId"],[322,19,154,118],[322,28,154,94,"watchId"],[322,35,154,118],[323,0,154,118],[323,12,154,103,"location"],[323,20,154,118],[323,29,154,103,"location"],[323,37,154,118],[324,0,155,12],[324,12,155,18,"callback"],[324,20,155,26],[324,23,155,29,"watchCallbacks"],[324,37,155,43],[324,38,155,44,"watchId"],[324,45,155,43],[324,46,155,12],[326,0,156,12],[326,12,156,16,"callback"],[326,20,156,12],[326,22,156,26],[327,0,157,16,"callback"],[327,10,157,16,"callback"],[327,18,157,24],[327,19,157,25,"location"],[327,27,157,24],[327,28,157,16],[328,0,158,13],[328,9,156,12],[328,15,159,17],[329,0,160,16,"ExpoLocation"],[329,32,160,29,"removeWatchAsync"],[329,48,160,16],[329,49,160,46,"watchId"],[329,56,160,16],[330,0,161,13],[331,0,162,9],[331,7,154,34],[331,8,154,8],[332,0,163,5],[333,0,164,1],[335,0,165,7],[335,11,165,22,"geocodeAsync"],[335,23,165,7],[335,24,165,35,"address"],[335,31,165,7],[336,0,165,7],[337,0,165,7],[338,0,165,7],[339,0,165,7],[340,0,165,7],[340,46,166,11,"ExpoLocation"],[340,68,166,24,"geocodeAsync"],[340,80,166,11],[340,81,166,37,"address"],[340,88,166,11],[340,90,166,46,"catch"],[340,95,166,11],[340,96,166,52],[340,106,166,52,"error"],[340,111,166,57],[340,113,166,61],[341,0,167,8],[341,18,167,14,"platformUsesGoogleMaps"],[341,40,167,36],[341,43,167,39,"Platform"],[341,58,167,48,"OS"],[341,60,167,39],[341,65,167,55],[341,74,167,39],[341,78,167,68,"Platform"],[341,93,167,77,"OS"],[341,95,167,68],[341,100,167,84],[341,105,167,8],[343,0,168,8],[343,18,168,12,"platformUsesGoogleMaps"],[343,40,168,34],[343,44,168,38,"error"],[343,49,168,43],[343,50,168,44,"code"],[343,54,168,38],[343,59,168,53],[343,74,168,8],[343,76,168,70],[344,0,169,12],[344,20,169,16],[344,21,169,17,"googleApiKey"],[344,33,169,12],[344,35,169,31],[345,0,170,16],[345,24,170,22],[345,28,170,26,"CodedError"],[345,44,170,22],[345,45,170,37,"error"],[345,50,170,42],[345,51,170,43,"code"],[345,55,170,22],[345,57,170,52,"error"],[345,62,170,57],[345,63,170,58,"message"],[345,70,170,22],[345,122,170,16],[346,0,171,13],[348,0,172,12],[348,23,172,19,"_googleGeocodeAsync"],[348,42,172,38],[348,43,172,39,"address"],[348,50,172,38],[348,51,172,12],[349,0,173,9],[351,0,174,8],[351,20,174,14,"error"],[351,25,174,8],[352,0,175,5],[352,13,166,11],[352,14,165,7],[354,0,165,7],[355,0,165,7],[356,0,165,7],[357,0,165,7],[358,0,165,7],[359,0,165,7],[360,0,165,7],[362,0,177,7],[362,11,177,22,"reverseGeocodeAsync"],[362,30,177,7],[362,31,177,42,"location"],[362,39,177,7],[363,0,177,7],[364,0,177,7],[365,0,177,7],[366,0,177,7],[367,0,177,7],[367,18,178,8],[367,25,178,15,"location"],[367,33,178,23],[367,34,178,24,"latitude"],[367,42,178,8],[367,47,178,37],[367,55,178,8],[367,59,178,49],[367,66,178,56,"location"],[367,74,178,64],[367,75,178,65,"longitude"],[367,84,178,49],[367,89,178,79],[367,97,177,7],[368,0,177,7],[369,0,177,7],[370,0,177,7],[372,0,177,7],[372,18,179,14],[372,22,179,18,"TypeError"],[372,31,179,14],[372,32,179,28],[372,113,179,14],[372,114,177,7],[374,0,177,7],[375,0,177,7],[375,46,181,11,"ExpoLocation"],[375,68,181,24,"reverseGeocodeAsync"],[375,87,181,11],[375,88,181,44,"location"],[375,96,181,11],[375,98,181,54,"catch"],[375,103,181,11],[375,104,181,60],[375,114,181,60,"error"],[375,119,181,65],[375,121,181,69],[376,0,182,8],[376,18,182,14,"platformUsesGoogleMaps"],[376,40,182,36],[376,43,182,39,"Platform"],[376,58,182,48,"OS"],[376,60,182,39],[376,65,182,55],[376,74,182,39],[376,78,182,68,"Platform"],[376,93,182,77,"OS"],[376,95,182,68],[376,100,182,84],[376,105,182,8],[378,0,183,8],[378,18,183,12,"platformUsesGoogleMaps"],[378,40,183,34],[378,44,183,38,"error"],[378,49,183,43],[378,50,183,44,"code"],[378,54,183,38],[378,59,183,53],[378,74,183,8],[378,76,183,70],[379,0,184,12],[379,20,184,16],[379,21,184,17,"googleApiKey"],[379,33,184,12],[379,35,184,31],[380,0,185,16],[380,24,185,22],[380,28,185,26,"CodedError"],[380,44,185,22],[380,45,185,37,"error"],[380,50,185,42],[380,51,185,43,"code"],[380,55,185,22],[380,57,185,52,"error"],[380,62,185,57],[380,63,185,58,"message"],[380,70,185,22],[380,122,185,16],[381,0,186,13],[383,0,187,12],[383,23,187,19,"_googleReverseGeocodeAsync"],[383,49,187,45],[383,50,187,46,"location"],[383,58,187,45],[383,59,187,12],[384,0,188,9],[386,0,189,8],[386,20,189,14,"error"],[386,25,189,8],[387,0,190,5],[387,13,181,11],[387,14,177,7],[389,0,177,7],[390,0,177,7],[391,0,177,7],[392,0,177,7],[393,0,177,7],[394,0,177,7],[395,0,177,7],[397,0,192,7],[397,11,192,16,"setApiKey"],[397,20,192,7],[397,21,192,26,"apiKey"],[397,27,192,7],[397,29,192,34],[398,0,193,4,"googleApiKey"],[398,4,193,4,"googleApiKey"],[398,16,193,16],[398,19,193,19,"apiKey"],[398,25,193,4],[399,0,194,1],[401,0,195,0],[401,11,195,15,"_googleGeocodeAsync"],[401,30,195,0],[401,31,195,35,"address"],[401,38,195,0],[402,0,195,0],[403,0,195,0],[404,0,195,0],[405,0,195,0],[406,0,195,0],[407,0,195,0],[408,0,195,0],[408,46,196,25,"fetch"],[408,51,196,30],[408,52,196,34,"googleApiUrl"],[408,64,196,30],[408,77,196,54,"googleApiKey"],[408,89,196,30],[408,106,196,78,"encodeURI"],[408,115,196,87],[408,116,196,88,"address"],[408,123,196,87],[408,124,196,30],[408,125,195,0],[410,0,195,0],[411,0,196,10,"result"],[411,12,196,10,"result"],[411,18,195,0],[412,0,195,0],[413,0,195,0],[413,46,197,31,"result"],[413,52,197,37],[413,53,197,38,"json"],[413,57,197,31],[413,59,195,0],[415,0,195,0],[416,0,197,10,"resultObject"],[416,12,197,10,"resultObject"],[416,24,195,0],[418,0,195,0],[418,18,198,8,"resultObject"],[418,30,198,20],[418,31,198,21,"status"],[418,37,198,8],[418,42,198,32],[418,56,195,0],[419,0,195,0],[420,0,195,0],[421,0,195,0],[423,0,195,0],[423,47,199,15],[423,49,195,0],[425,0,195,0],[426,0,201,4,"assertGeocodeResults"],[426,12,201,4,"assertGeocodeResults"],[426,32,201,24],[426,33,201,25,"resultObject"],[426,45,201,24],[426,46,201,4],[427,0,195,0],[427,47,202,11,"resultObject"],[427,59,202,23],[427,60,202,24,"results"],[427,67,202,11],[427,68,202,32,"map"],[427,71,202,11],[427,72,202,36],[427,82,202,36,"result"],[427,88,202,42],[427,90,202,46],[428,0,203,8],[428,18,203,12,"location"],[428,26,203,20],[428,29,203,23,"result"],[428,35,203,29],[428,36,203,30,"geometry"],[428,44,203,23],[428,45,203,39,"location"],[428,53,203,8],[429,0,205,8],[429,21,205,15],[430,0,206,12,"latitude"],[430,16,206,12,"latitude"],[430,24,206,20],[430,26,206,22,"location"],[430,34,206,30],[430,35,206,31,"lat"],[430,38,205,15],[431,0,207,12,"longitude"],[431,16,207,12,"longitude"],[431,25,207,21],[431,27,207,23,"location"],[431,35,207,31],[431,36,207,32,"lng"],[432,0,205,15],[432,15,205,8],[433,0,209,5],[433,13,202,11],[433,14,195,0],[435,0,195,0],[436,0,195,0],[437,0,195,0],[438,0,195,0],[439,0,195,0],[440,0,195,0],[441,0,195,0],[443,0,211,0],[443,11,211,15,"_googleReverseGeocodeAsync"],[443,37,211,0],[443,38,211,42,"options"],[443,45,211,0],[444,0,211,0],[445,0,211,0],[446,0,211,0],[447,0,211,0],[448,0,211,0],[449,0,211,0],[450,0,211,0],[450,46,212,25,"fetch"],[450,51,212,30],[450,52,212,34,"googleApiUrl"],[450,64,212,30],[450,77,212,54,"googleApiKey"],[450,89,212,30],[450,105,212,77,"options"],[450,112,212,84],[450,113,212,85,"latitude"],[450,121,212,30],[450,130,212,97,"options"],[450,137,212,104],[450,138,212,105,"longitude"],[450,147,212,30],[450,148,211,0],[452,0,211,0],[453,0,212,10,"result"],[453,12,212,10,"result"],[453,18,211,0],[454,0,211,0],[455,0,211,0],[455,46,213,31,"result"],[455,52,213,37],[455,53,213,38,"json"],[455,57,213,31],[455,59,211,0],[457,0,211,0],[458,0,213,10,"resultObject"],[458,12,213,10,"resultObject"],[458,24,211,0],[460,0,211,0],[460,18,214,8,"resultObject"],[460,30,214,20],[460,31,214,21,"status"],[460,37,214,8],[460,42,214,32],[460,56,211,0],[461,0,211,0],[462,0,211,0],[463,0,211,0],[465,0,211,0],[465,47,215,15],[465,49,211,0],[467,0,211,0],[468,0,217,4,"assertGeocodeResults"],[468,12,217,4,"assertGeocodeResults"],[468,32,217,24],[468,33,217,25,"resultObject"],[468,45,217,24],[468,46,217,4],[469,0,211,0],[469,47,218,11,"resultObject"],[469,59,218,23],[469,60,218,24,"results"],[469,67,218,11],[469,68,218,32,"map"],[469,71,218,11],[469,72,218,36],[469,82,218,36,"result"],[469,88,218,42],[469,90,218,46],[470,0,219,8],[470,18,219,14,"address"],[470,25,219,21],[470,28,219,24],[470,30,219,8],[471,0,220,8,"result"],[471,14,220,8,"result"],[471,20,220,14],[471,21,220,15,"address_components"],[471,39,220,8],[471,40,220,34,"forEach"],[471,47,220,8],[471,48,220,42],[471,58,220,42,"component"],[471,67,220,51],[471,69,220,55],[472,0,221,12],[472,20,221,16,"component"],[472,29,221,25],[472,30,221,26,"types"],[472,35,221,16],[472,36,221,32,"includes"],[472,44,221,16],[472,45,221,41],[472,55,221,16],[472,56,221,12],[472,58,221,54],[473,0,222,16,"address"],[473,18,222,16,"address"],[473,25,222,23],[473,26,222,24,"city"],[473,30,222,16],[473,33,222,31,"component"],[473,42,222,40],[473,43,222,41,"long_name"],[473,52,222,16],[474,0,223,13],[474,17,221,12],[474,23,224,17],[474,27,224,21,"component"],[474,36,224,30],[474,37,224,31,"types"],[474,42,224,21],[474,43,224,37,"includes"],[474,51,224,21],[474,52,224,46],[474,68,224,21],[474,69,224,17],[474,71,224,65],[475,0,225,16,"address"],[475,18,225,16,"address"],[475,25,225,23],[475,26,225,24,"street"],[475,32,225,16],[475,35,225,33,"component"],[475,44,225,42],[475,45,225,43,"long_name"],[475,54,225,16],[476,0,226,13],[476,17,224,17],[476,23,227,17],[476,27,227,21,"component"],[476,36,227,30],[476,37,227,31,"types"],[476,42,227,21],[476,43,227,37,"includes"],[476,51,227,21],[476,52,227,46],[476,81,227,21],[476,82,227,17],[476,84,227,78],[477,0,228,16,"address"],[477,18,228,16,"address"],[477,25,228,23],[477,26,228,24,"region"],[477,32,228,16],[477,35,228,33,"component"],[477,44,228,42],[477,45,228,43,"long_name"],[477,54,228,16],[478,0,229,13],[478,17,227,17],[478,23,230,17],[478,27,230,21,"component"],[478,36,230,30],[478,37,230,31,"types"],[478,42,230,21],[478,43,230,37,"includes"],[478,51,230,21],[478,52,230,46],[478,61,230,21],[478,62,230,17],[478,64,230,58],[479,0,231,16,"address"],[479,18,231,16,"address"],[479,25,231,23],[479,26,231,24,"country"],[479,33,231,16],[479,36,231,34,"component"],[479,45,231,43],[479,46,231,44,"long_name"],[479,55,231,16],[480,0,232,13],[480,17,230,17],[480,23,233,17],[480,27,233,21,"component"],[480,36,233,30],[480,37,233,31,"types"],[480,42,233,21],[480,43,233,37,"includes"],[480,51,233,21],[480,52,233,46],[480,65,233,21],[480,66,233,17],[480,68,233,62],[481,0,234,16,"address"],[481,18,234,16,"address"],[481,25,234,23],[481,26,234,24,"postalCode"],[481,36,234,16],[481,39,234,37,"component"],[481,48,234,46],[481,49,234,47,"long_name"],[481,58,234,16],[482,0,235,13],[482,17,233,17],[482,23,236,17],[482,27,236,21,"component"],[482,36,236,30],[482,37,236,31,"types"],[482,42,236,21],[482,43,236,37,"includes"],[482,51,236,21],[482,52,236,46],[482,71,236,21],[482,72,236,17],[482,74,236,68],[483,0,237,16,"address"],[483,18,237,16,"address"],[483,25,237,23],[483,26,237,24,"name"],[483,30,237,16],[483,33,237,31,"component"],[483,42,237,40],[483,43,237,41,"long_name"],[483,52,237,16],[484,0,238,13],[485,0,239,9],[485,15,220,8],[486,0,240,8],[486,21,240,15,"address"],[486,28,240,8],[487,0,241,5],[487,13,218,11],[487,14,211,0],[489,0,211,0],[490,0,211,0],[491,0,211,0],[492,0,211,0],[493,0,211,0],[494,0,211,0],[495,0,211,0],[497,0,244,0],[497,11,244,9,"assertGeocodeResults"],[497,31,244,0],[497,32,244,30,"resultObject"],[497,44,244,0],[497,46,244,44],[498,0,244,44],[498,8,245,12,"status"],[498,14,244,44],[498,17,245,38,"resultObject"],[498,29,244,44],[498,30,245,12,"status"],[498,36,244,44],[499,0,244,44],[499,8,245,20,"error_message"],[499,21,244,44],[499,24,245,38,"resultObject"],[499,36,244,44],[499,37,245,20,"error_message"],[499,50,244,44],[501,0,246,4],[501,8,246,8,"status"],[501,14,246,14],[501,19,246,19],[501,33,246,8],[501,37,246,37,"status"],[501,43,246,43],[501,48,246,48],[501,52,246,4],[501,54,246,54],[502,0,247,8],[502,10,247,12,"error_message"],[502,23,247,8],[502,25,247,27],[503,0,248,12],[503,14,248,18],[503,18,248,22,"CodedError"],[503,34,248,18],[503,35,248,33,"status"],[503,41,248,18],[503,43,248,41,"error_message"],[503,56,248,18],[503,57,248,12],[504,0,249,9],[504,7,247,8],[504,13,250,13],[504,17,250,17,"status"],[504,23,250,23],[504,28,250,28],[504,43,250,13],[504,45,250,45],[505,0,251,12],[505,14,251,18],[505,18,251,22,"CodedError"],[505,34,251,18],[505,35,251,33,"status"],[505,41,251,18],[505,43,251,41],[505,144,251,18],[505,145,251,12],[506,0,252,9],[508,0,253,8],[508,12,253,14],[508,16,253,18,"CodedError"],[508,32,253,14],[508,33,253,29,"status"],[508,39,253,14],[508,79,253,8],[509,0,254,5],[510,0,255,1],[512,0,257,0],[512,11,257,9,"watchPosition"],[512,24,257,0],[512,25,257,23,"success"],[512,32,257,0],[512,34,257,32,"error"],[512,39,257,0],[512,41,257,39,"options"],[512,48,257,0],[512,50,257,48],[513,0,258,4,"_maybeInitializeEmitterSubscription"],[513,4,258,4,"_maybeInitializeEmitterSubscription"],[513,39,258,39],[515,0,259,4],[515,8,259,10,"watchId"],[515,15,259,17],[515,18,259,20,"_getNextWatchId"],[515,33,259,35],[515,35,259,4],[517,0,260,4,"watchCallbacks"],[517,4,260,4,"watchCallbacks"],[517,18,260,18],[517,19,260,19,"watchId"],[517,26,260,18],[517,27,260,4],[517,30,260,30,"success"],[517,37,260,4],[519,0,261,4,"ExpoLocation"],[519,26,261,17,"watchPositionImplAsync"],[519,48,261,4],[519,49,261,40,"watchId"],[519,56,261,4],[519,58,261,49,"options"],[519,65,261,4],[519,67,261,58,"catch"],[519,72,261,4],[519,73,261,64],[519,83,261,64,"err"],[519,86,261,67],[519,88,261,71],[520,0,262,8,"_removeWatcher"],[520,6,262,8,"_removeWatcher"],[520,20,262,22],[520,21,262,23,"watchId"],[520,28,262,22],[520,29,262,8],[522,0,263,8,"error"],[522,6,263,8,"error"],[522,11,263,13],[522,12,263,14],[523,0,263,16,"watchId"],[523,8,263,16,"watchId"],[523,15,263,23],[523,17,263,16,"watchId"],[523,24,263,14],[524,0,263,25,"message"],[524,8,263,25,"message"],[524,15,263,32],[524,17,263,34,"err"],[524,20,263,37],[524,21,263,38,"message"],[524,28,263,14],[525,0,263,47,"code"],[525,8,263,47,"code"],[525,12,263,51],[525,14,263,53,"err"],[525,17,263,56],[525,18,263,57,"code"],[526,0,263,14],[526,7,263,13],[526,8,263,8],[527,0,264,5],[527,5,261,4],[529,0,265,4],[529,11,265,11,"watchId"],[529,18,265,4],[530,0,266,1],[532,0,267,7],[532,11,267,22,"watchPositionAsync"],[532,29,267,7],[532,30,267,41,"options"],[532,37,267,7],[532,39,267,50,"callback"],[532,47,267,7],[533,0,267,7],[534,0,267,7],[535,0,267,7],[536,0,267,7],[537,0,267,7],[538,0,268,4,"_maybeInitializeEmitterSubscription"],[538,12,268,4,"_maybeInitializeEmitterSubscription"],[538,47,268,39],[540,0,269,10,"watchId"],[540,12,269,10,"watchId"],[540,19,267,7],[540,22,269,20,"_getNextWatchId"],[540,37,269,35],[540,39,267,7],[541,0,270,4,"watchCallbacks"],[541,12,270,4,"watchCallbacks"],[541,26,270,18],[541,27,270,19,"watchId"],[541,34,270,18],[541,35,270,4],[541,38,270,30,"callback"],[541,46,270,4],[542,0,267,7],[543,0,267,7],[543,46,271,10,"ExpoLocation"],[543,68,271,23,"watchPositionImplAsync"],[543,90,271,10],[543,91,271,46,"watchId"],[543,98,271,10],[543,100,271,55,"options"],[543,107,271,10],[543,108,267,7],[545,0,267,7],[546,0,267,7],[546,47,272,11],[547,0,273,8,"remove"],[547,14,273,8,"remove"],[547,20,272,11],[547,40,273,17],[548,0,274,12,"_removeWatcher"],[548,16,274,12,"_removeWatcher"],[548,30,274,26],[548,31,274,27,"watchId"],[548,38,274,26],[548,39,274,12],[549,0,275,9],[550,0,272,11],[550,13,267,7],[552,0,267,7],[553,0,267,7],[554,0,267,7],[555,0,267,7],[556,0,267,7],[557,0,267,7],[558,0,267,7],[560,0,279,0],[560,11,279,9,"clearWatch"],[560,21,279,0],[560,22,279,20,"watchId"],[560,29,279,0],[560,31,279,29],[561,0,280,4,"_removeWatcher"],[561,4,280,4,"_removeWatcher"],[561,18,280,18],[561,19,280,19,"watchId"],[561,26,280,18],[561,27,280,4],[562,0,281,1],[564,0,282,0],[564,11,282,9,"_removeWatcher"],[564,25,282,0],[564,26,282,24,"watchId"],[564,33,282,0],[564,35,282,33],[565,0,284,4],[565,8,284,8],[565,9,284,9,"watchCallbacks"],[565,23,284,23],[565,24,284,24,"watchId"],[565,31,284,23],[565,32,284,4],[565,34,284,34],[566,0,285,8],[567,0,286,5],[569,0,287,4,"ExpoLocation"],[569,26,287,17,"removeWatchAsync"],[569,42,287,4],[569,43,287,34,"watchId"],[569,50,287,4],[571,0,288,4],[571,11,288,11,"watchCallbacks"],[571,25,288,25],[571,26,288,26,"watchId"],[571,33,288,25],[571,34,288,4],[573,0,289,4],[573,8,289,8,"Object"],[573,14,289,14],[573,15,289,15,"keys"],[573,19,289,8],[573,20,289,20,"watchCallbacks"],[573,34,289,8],[573,36,289,36,"length"],[573,42,289,8],[573,47,289,47],[573,48,289,8],[573,52,289,52,"deviceEventSubscription"],[573,75,289,4],[573,77,289,77],[574,0,290,8,"LocationEventEmitter"],[574,6,290,8,"LocationEventEmitter"],[574,26,290,28],[574,27,290,29,"removeSubscription"],[574,45,290,8],[574,46,290,48,"deviceEventSubscription"],[574,69,290,8],[575,0,291,8,"deviceEventSubscription"],[575,6,291,8,"deviceEventSubscription"],[575,29,291,31],[575,32,291,34],[575,36,291,8],[576,0,292,5],[577,0,293,1],[579,0,294,0],[579,11,294,9,"getCurrentPosition"],[579,29,294,0],[579,30,294,28,"success"],[579,37,294,0],[579,39,294,70],[580,0,294,70],[580,8,294,37,"error"],[580,13,294,70],[580,84,294,45],[580,96,294,51],[580,97,294,54],[580,98,294,70],[581,0,294,70],[581,8,294,56,"options"],[581,15,294,70],[581,86,294,66],[581,88,294,70],[582,0,295,4],[582,28,295,14],[582,35,295,21,"success"],[582,42,295,14],[582,47,295,33],[582,57,295,4],[582,59,295,45],[582,99,295,4],[583,0,296,4],[583,28,296,14],[583,35,296,21,"options"],[583,42,296,14],[583,47,296,33],[583,55,296,4],[583,57,296,43],[583,85,296,4],[585,0,297,4,"_getCurrentPositionAsyncWrapper"],[585,4,297,4,"_getCurrentPositionAsyncWrapper"],[585,35,297,35],[585,36,297,36,"success"],[585,43,297,35],[585,45,297,45,"error"],[585,50,297,35],[585,52,297,52,"options"],[585,59,297,35],[585,60,297,4],[586,0,298,1],[588,0,301,0],[588,11,301,15,"_getCurrentPositionAsyncWrapper"],[588,42,301,0],[588,43,301,47,"success"],[588,50,301,0],[588,52,301,56,"error"],[588,57,301,0],[588,59,301,63,"options"],[588,66,301,0],[589,0,301,0],[590,0,301,0],[591,0,301,0],[592,0,301,0],[593,0,301,0],[594,0,301,0],[595,0,301,0],[596,0,301,0],[596,46,303,14,"ExpoLocation"],[596,68,303,27,"requestPermissionsAsync"],[596,91,303,14],[596,93,301,0],[598,0,301,0],[599,0,301,0],[600,0,301,0],[600,46,304,29,"getCurrentPositionAsync"],[600,69,304,52],[600,70,304,53,"options"],[600,77,304,52],[600,78,301,0],[602,0,301,0],[603,0,304,14,"result"],[603,12,304,14,"result"],[603,18,301,0],[604,0,305,8,"success"],[604,12,305,8,"success"],[604,19,305,15],[604,20,305,16,"result"],[604,26,305,15],[604,27,305,8],[605,0,301,0],[606,0,301,0],[608,0,301,0],[609,0,301,0],[610,0,301,0],[611,0,308,8,"error"],[611,12,308,8,"error"],[611,17,308,13],[611,32,308,8],[613,0,301,0],[614,0,301,0],[615,0,301,0],[616,0,301,0],[617,0,301,0],[618,0,301,0],[619,0,301,0],[621,0,311,7],[621,11,311,22,"getPermissionsAsync"],[621,30,311,7],[622,0,311,7],[623,0,311,7],[624,0,311,7],[625,0,311,7],[626,0,311,7],[627,0,311,7],[627,46,312,17,"ExpoLocation"],[627,68,312,30,"getPermissionsAsync"],[627,87,312,17],[627,89,311,7],[629,0,311,7],[630,0,311,7],[632,0,311,7],[633,0,311,7],[634,0,311,7],[635,0,311,7],[636,0,311,7],[637,0,311,7],[638,0,311,7],[640,0,314,7],[640,11,314,22,"requestPermissionsAsync"],[640,34,314,7],[641,0,314,7],[642,0,314,7],[643,0,314,7],[644,0,314,7],[645,0,314,7],[646,0,314,7],[646,46,315,17,"ExpoLocation"],[646,68,315,30,"requestPermissionsAsync"],[646,91,315,17],[646,93,314,7],[648,0,314,7],[649,0,314,7],[651,0,314,7],[652,0,314,7],[653,0,314,7],[654,0,314,7],[655,0,314,7],[656,0,314,7],[657,0,314,7],[659,0,318,7],[659,11,318,22,"hasServicesEnabledAsync"],[659,34,318,7],[660,0,318,7],[661,0,318,7],[662,0,318,7],[663,0,318,7],[664,0,318,7],[665,0,318,7],[665,46,319,17,"ExpoLocation"],[665,68,319,30,"hasServicesEnabledAsync"],[665,91,319,17],[665,93,318,7],[667,0,318,7],[668,0,318,7],[670,0,318,7],[671,0,318,7],[672,0,318,7],[673,0,318,7],[674,0,318,7],[675,0,318,7],[676,0,318,7],[678,0,322,0],[678,11,322,9,"_validateTaskName"],[678,28,322,0],[678,29,322,27,"taskName"],[678,37,322,0],[678,39,322,37],[679,0,323,4],[679,28,323,14,"taskName"],[679,36,323,22],[679,40,323,26],[679,47,323,33,"taskName"],[679,55,323,26],[679,60,323,46],[679,68,323,4],[679,70,323,56],[679,110,323,4],[680,0,324,1],[682,0,325,7],[682,11,325,22,"isBackgroundLocationAvailableAsync"],[682,45,325,7],[683,0,325,7],[684,0,325,7],[685,0,325,7],[686,0,325,7],[687,0,325,7],[688,0,325,7],[689,0,325,7],[689,46,326,33,"getProviderStatusAsync"],[689,68,326,55],[689,70,325,7],[691,0,325,7],[692,0,326,10,"providerStatus"],[692,12,326,10,"providerStatus"],[692,26,325,7],[693,0,325,7],[693,47,327,11,"providerStatus"],[693,61,327,25],[693,62,327,26,"backgroundModeEnabled"],[693,83,325,7],[695,0,325,7],[696,0,325,7],[697,0,325,7],[698,0,325,7],[699,0,325,7],[700,0,325,7],[701,0,325,7],[703,0,329,7],[703,11,329,22,"startLocationUpdatesAsync"],[703,36,329,7],[703,37,329,48,"taskName"],[703,45,329,7],[704,0,329,7],[705,0,329,7],[706,0,329,7],[707,0,329,7],[708,0,329,7],[709,0,329,7],[710,0,329,58,"options"],[710,12,329,58,"options"],[710,19,329,7],[710,84,329,68],[711,0,329,70,"accuracy"],[711,14,329,70,"accuracy"],[711,22,329,78],[711,24,329,80,"LocationAccuracy"],[711,40,329,96],[711,41,329,97,"Balanced"],[712,0,329,68],[712,13,329,7],[714,0,330,4,"_validateTaskName"],[714,12,330,4,"_validateTaskName"],[714,29,330,21],[714,30,330,22,"taskName"],[714,38,330,21],[714,39,330,4],[716,0,329,7],[717,0,329,7],[717,46,331,10,"ExpoLocation"],[717,68,331,23,"startLocationUpdatesAsync"],[717,93,331,10],[717,94,331,49,"taskName"],[717,102,331,10],[717,104,331,59,"options"],[717,111,331,10],[717,112,329,7],[719,0,329,7],[720,0,329,7],[721,0,329,7],[722,0,329,7],[723,0,329,7],[724,0,329,7],[725,0,329,7],[727,0,333,7],[727,11,333,22,"stopLocationUpdatesAsync"],[727,35,333,7],[727,36,333,47,"taskName"],[727,44,333,7],[728,0,333,7],[729,0,333,7],[730,0,333,7],[731,0,333,7],[732,0,334,4,"_validateTaskName"],[732,12,334,4,"_validateTaskName"],[732,29,334,21],[732,30,334,22,"taskName"],[732,38,334,21],[732,39,334,4],[734,0,333,7],[735,0,333,7],[735,46,335,10,"ExpoLocation"],[735,68,335,23,"stopLocationUpdatesAsync"],[735,92,335,10],[735,93,335,48,"taskName"],[735,101,335,10],[735,102,333,7],[737,0,333,7],[738,0,333,7],[739,0,333,7],[740,0,333,7],[741,0,333,7],[742,0,333,7],[743,0,333,7],[745,0,337,7],[745,11,337,22,"hasStartedLocationUpdatesAsync"],[745,41,337,7],[745,42,337,53,"taskName"],[745,50,337,7],[746,0,337,7],[747,0,337,7],[748,0,337,7],[749,0,337,7],[750,0,338,4,"_validateTaskName"],[750,12,338,4,"_validateTaskName"],[750,29,338,21],[750,30,338,22,"taskName"],[750,38,338,21],[750,39,338,4],[752,0,337,7],[752,47,339,11,"ExpoLocation"],[752,69,339,24,"hasStartedLocationUpdatesAsync"],[752,99,339,11],[752,100,339,55,"taskName"],[752,108,339,11],[752,109,337,7],[754,0,337,7],[755,0,337,7],[756,0,337,7],[757,0,337,7],[758,0,337,7],[759,0,337,7],[760,0,337,7],[762,0,342,0],[762,11,342,9,"_validateRegions"],[762,27,342,0],[762,28,342,26,"regions"],[762,35,342,0],[762,37,342,35],[763,0,343,4],[763,8,343,8],[763,9,343,9,"regions"],[763,16,343,8],[763,20,343,20,"regions"],[763,27,343,27],[763,28,343,28,"length"],[763,34,343,20],[763,39,343,39],[763,40,343,4],[763,42,343,42],[764,0,344,8],[764,12,344,14],[764,16,344,18,"Error"],[764,21,344,14],[764,22,344,24],[764,123,344,14],[764,124,344,8],[765,0,345,5],[767,0,346,4],[767,57,346,25,"regions"],[767,64,346,4],[767,104,346,34],[768,0,346,34],[768,10,346,15,"region"],[768,16,346,34],[770,0,347,8],[770,10,347,12],[770,17,347,19,"region"],[770,23,347,25],[770,24,347,26,"latitude"],[770,32,347,12],[770,37,347,39],[770,45,347,8],[770,47,347,49],[771,0,348,12],[771,14,348,18],[771,18,348,22,"TypeError"],[771,27,348,18],[771,74,348,76,"region"],[771,80,348,82],[771,81,348,83,"latitude"],[771,89,348,18],[771,105,348,12],[772,0,349,9],[774,0,350,8],[774,10,350,12],[774,17,350,19,"region"],[774,23,350,25],[774,24,350,26,"longitude"],[774,33,350,12],[774,38,350,40],[774,46,350,8],[774,48,350,50],[775,0,351,12],[775,14,351,18],[775,18,351,22,"TypeError"],[775,27,351,18],[775,75,351,77,"region"],[775,81,351,83],[775,82,351,84,"longitude"],[775,91,351,18],[775,107,351,12],[776,0,352,9],[778,0,353,8],[778,10,353,12],[778,17,353,19,"region"],[778,23,353,25],[778,24,353,26,"radius"],[778,30,353,12],[778,35,353,37],[778,43,353,8],[778,45,353,47],[779,0,354,12],[779,14,354,18],[779,18,354,22,"TypeError"],[779,27,354,18],[779,72,354,74,"region"],[779,78,354,80],[779,79,354,81,"radius"],[779,85,354,18],[779,101,354,12],[780,0,355,9],[781,0,356,5],[782,0,357,1],[784,0,358,7],[784,11,358,22,"startGeofencingAsync"],[784,31,358,7],[784,32,358,43,"taskName"],[784,40,358,7],[785,0,358,7],[786,0,358,7],[787,0,358,7],[788,0,358,7],[789,0,358,7],[790,0,358,7],[791,0,358,53,"regions"],[791,12,358,53,"regions"],[791,19,358,7],[791,84,358,63],[791,86,358,7],[793,0,359,4,"_validateTaskName"],[793,12,359,4,"_validateTaskName"],[793,29,359,21],[793,30,359,22,"taskName"],[793,38,359,21],[793,39,359,4],[795,0,360,4,"_validateRegions"],[795,12,360,4,"_validateRegions"],[795,28,360,20],[795,29,360,21,"regions"],[795,36,360,20],[795,37,360,4],[797,0,358,7],[798,0,358,7],[798,46,361,10,"ExpoLocation"],[798,68,361,23,"startGeofencingAsync"],[798,88,361,10],[798,89,361,44,"taskName"],[798,97,361,10],[798,99,361,54],[799,0,361,56,"regions"],[799,14,361,56,"regions"],[799,21,361,63],[799,23,361,56,"regions"],[800,0,361,54],[800,13,361,10],[800,14,358,7],[802,0,358,7],[803,0,358,7],[804,0,358,7],[805,0,358,7],[806,0,358,7],[807,0,358,7],[808,0,358,7],[810,0,363,7],[810,11,363,22,"stopGeofencingAsync"],[810,30,363,7],[810,31,363,42,"taskName"],[810,39,363,7],[811,0,363,7],[812,0,363,7],[813,0,363,7],[814,0,363,7],[815,0,364,4,"_validateTaskName"],[815,12,364,4,"_validateTaskName"],[815,29,364,21],[815,30,364,22,"taskName"],[815,38,364,21],[815,39,364,4],[817,0,363,7],[818,0,363,7],[818,46,365,10,"ExpoLocation"],[818,68,365,23,"stopGeofencingAsync"],[818,87,365,10],[818,88,365,43,"taskName"],[818,96,365,10],[818,97,363,7],[820,0,363,7],[821,0,363,7],[822,0,363,7],[823,0,363,7],[824,0,363,7],[825,0,363,7],[826,0,363,7],[828,0,367,7],[828,11,367,22,"hasStartedGeofencingAsync"],[828,36,367,7],[828,37,367,48,"taskName"],[828,45,367,7],[829,0,367,7],[830,0,367,7],[831,0,367,7],[832,0,367,7],[833,0,368,4,"_validateTaskName"],[833,12,368,4,"_validateTaskName"],[833,29,368,21],[833,30,368,22,"taskName"],[833,38,368,21],[833,39,368,4],[835,0,367,7],[835,47,369,11,"ExpoLocation"],[835,69,369,24,"hasStartedGeofencingAsync"],[835,94,369,11],[835,95,369,50,"taskName"],[835,103,369,11],[835,104,367,7],[837,0,367,7],[838,0,367,7],[839,0,367,7],[840,0,367,7],[841,0,367,7],[842,0,367,7],[843,0,367,7],[845,0,371,7],[845,11,371,16,"installWebGeolocationPolyfill"],[845,40,371,7],[845,43,371,48],[846,0,372,4],[846,8,372,8,"Platform"],[846,23,372,17,"OS"],[846,25,372,8],[846,30,372,24],[846,35,372,4],[846,37,372,31],[847,0,376,8,"window"],[847,6,376,8,"window"],[847,12,376,14],[847,13,376,15,"navigator"],[847,22,376,8],[847,23,376,25,"geolocation"],[847,34,376,8],[847,37,376,39],[848,0,377,12,"getCurrentPosition"],[848,8,377,12,"getCurrentPosition"],[848,26,377,30],[848,28,377,12,"getCurrentPosition"],[848,46,376,39],[849,0,378,12,"watchPosition"],[849,8,378,12,"watchPosition"],[849,21,378,25],[849,23,378,12,"watchPosition"],[849,36,376,39],[850,0,379,12,"clearWatch"],[850,8,379,12,"clearWatch"],[850,18,379,22],[850,20,379,12,"clearWatch"],[850,30,376,39],[851,0,382,12,"stopObserving"],[851,8,382,12,"stopObserving"],[851,21,382,25],[851,23,382,27],[851,48,382,33],[851,49,382,36],[852,0,376,39],[852,7,376,8],[853,0,384,5],[854,0,385,1]],"functionMap":{"names":["<global>","<anonymous>","_getNextWatchId","_getCurrentWatchId","getProviderStatusAsync","enableNetworkProviderAsync","getCurrentPositionAsync","getLastKnownPositionAsync","getHeadingAsync","Promise$argument_0","LocationEventEmitter.addListener$argument_1","watchHeadingAsync$argument_0","watchHeadingAsync","remove","_removeHeadingWatcher","_maybeInitializeEmitterSubscription","geocodeAsync","ExpoLocation.geocodeAsync._catch$argument_0","reverseGeocodeAsync","ExpoLocation.reverseGeocodeAsync._catch$argument_0","setApiKey","_googleGeocodeAsync","resultObject.results.map$argument_0","_googleReverseGeocodeAsync","result.address_components.forEach$argument_0","assertGeocodeResults","watchPosition","ExpoLocation.watchPositionImplAsync._catch$argument_0","watchPositionAsync","clearWatch","_removeWatcher","getCurrentPosition","_getCurrentPositionAsyncWrapper","getPermissionsAsync","requestPermissionsAsync","hasServicesEnabledAsync","_validateTaskName","isBackgroundLocationAvailableAsync","startLocationUpdatesAsync","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync","installWebGeolocationPolyfill","window.navigator.geolocation.stopObserving"],"mappings":"AAA;CCO;CDO;CCE;CDM;CCG;CDG;CCE;CDI;AEG;CFG;AGC;CHE;OIM;CJE;OKC;CLQ;OMC;CNE;OOC;CPE;OQI;uBCC;2FCK;iBDQ;uDEM;iBFc;KDS;CRC;OYC;8EFK;KEQ;QCK;SDE;CZE;AcE;CdU;AeE;2FLE;SKQ;CfE;OgBC;oDCC;KDS;ChBC;OkBC;4DCI;KDS;ClBC;OoBC;CpBE;AqBC;oCCO;KDO;CrBC;AuBC;oCDO;0CEE;SFmB;KCE;CvBC;AyBE;CzBW;A0BE;gECI;KDG;C1BE;O4BC;QfM;SeE;C5BE;A6BE;C7BE;A8BC;C9BW;A+BC,6C9B,S8B;C/BI;AgCG;ChCS;OiCC;CjCE;OkCC;ClCE;OmCE;CnCE;AoCE;CpCE;OqCC;CrCG;OsCC;CtCG;OuCC;CvCG;OwCC;CxCG;AyCE;CzCe;O0CC;C1CI;O2CC;C3CG;O4CC;C5CG;O6CC;2BCW,SD;C7CG"}},"type":"js/module"}]}